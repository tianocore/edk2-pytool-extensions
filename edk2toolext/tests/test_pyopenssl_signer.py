# @file test_pyopenssl_signer.py
# This contains unit tests for the pyopenssl binary wrapper
##
# Copyright (c) Microsoft Corporation
#
# SPDX-License-Identifier: BSD-2-Clause-Patent
##
import unittest
from edk2toolext.capsule import pyopenssl_signer

# TEST_CERT is a cert used to test the ability to parse pfx and pull out necessary information.
# To generate a new test cert follow these steps:
# 1. Generate the Cert (.pfx) file

# 2. Serialize the Cert
#   Run the following Python commands to read the cert and print the bytes:
#   ```
#   with open(path/to/file, 'rb') as file:
#        print(file.read())
#   ```
#   You will see console output in the form b'0\x..\x..\x..\'

# 3. Break the serialized cert up to fit across multiple lines
#   To do this, simply start a new line immediately before a " \ " symbol
#   On the new line you just started, add " b' " to the start.
#   On the previous line, add " '\ " to the end.
#   As an example, take the value b'0\x82\tA\x02\x01\x030\x82', which would transform into
#   var = b'0\x82\tA\x02'\
#         b'x01\x030\x82'
# spell-checker:disable
TEST_CERT = b'0\x82\tA\x02\x01\x030\x82\t\x07\x06\t*\x86H\x86\xf7\r\x01\x07\x01\xa0\x82\x08\xf8'\
            b'\x04\x82\x08\xf40\x82\x08\xf00\x82\x03\xa7\x06\t*\x86H\x86\xf7\r\x01\x07\x06\xa0\x82'\
            b'\x03\x980\x82\x03\x94\x02\x01\x000\x82\x03\x8d\x06\t*\x86H\x86\xf7\r\x01\x07\x010'\
            b'\x1c\x06\n*\x86H\x86\xf7\r\x01\x0c\x01\x060\x0e\x04\x08\x96)\xa4\x90\xb0_M\x0f\x02\x02'\
            b'\x08\x00\x80\x82\x03`\x01\x90D\xc5\x9f\xf1&\xd7w\xa9\xd9<\xbd\xa8\xd7R\xc5\xd4\x9a'\
            b'\xd7, \x9c\xf9\x1c\t\x089\xc0$?\x1c4U0\xab\x82k9\xce*$\xe6+\xe9\x06p\x0f\xff\xf7-'\
            b'\xf1\xde4\xbc\x1f\xb2/\xb7D)\x90\xc6$N\xd1\x91\xff\xd7\xd4\x12\xd3\xf8/\xa1\xb2Rt'\
            b'\xa8/\x13\\\xb0\x90\x1dp\xe6\x1fn\x0fDu\x1d\x01\xc8\x9eT\xeaP+B\xdf\xa4!\x1b\xf6\xe3'\
            b'\x04)\xad\x85\xc4\x8d\xce@hT\xc8\xbf}\x8f_Sb\xdd\x83\xbe\xa2\xbeN\xd6\x9f\xd6\xbf'\
            b'\x10z+s\x95\xe0\x1fb\xe0\xe2N\x16\x08\x80}\xad*v\x9bo\xc0T\x9d\x9az4\xb9}\x91\xce\x81'\
            b'\x15\xceo\x96\x1e;t\xf2\xc8m\xfan\xc02\xe8\xb7\xbbf\xa7\x0b\x12\xd1\x12w\x80\x9b'\
            b'\x8c"\x89\xd6)\x9c\x19\xd1d\xd7\xc2a\xdc\x93\x7f\x96\xa7\x9f\xa4\x1d\xd6\xde_XG\x12'\
            b'\xf6\n\xef#\xcd\xaa\xe5\xa5d0\xe8\xee\xd0\xd8(\xcbm\x9eS\xfaD\x99\xa8\xa1\x01\xc9'\
            b'\x02\xd5\x88+\xc2 \xb62L\x1f\n\xaf\x98(\xfca\xaeSj\x19`-]Z\x9a\xf1\x188s\x9c\xc3'\
            b'\xbf)\xec\r]\xe78\xda\x1e\xe3\xe8\xaa\xc8K\xa7\xed$S\x0b)\x80l~\xc6|Cs\x08\xbc\'\x0f7?'\
            b'\xdc\x87\xb9r\x9b8\x9b\xb66\t\x13\xc5p&W\x0b\xfd\x13\xf5\xee\xd3\xa2\xe0\x98B\xe3\x88'\
            b'\x1d\x12\xb8T\x8e?;\xb3y!\xe9\x90\xd8\xdcT\xe8S\xbb\xbf\xbe\x84\x1d\xffX\xa9E6B\xba'\
            b'\xb3\x85sm\x11n\x10\xdf\xc8\xec\x9a~\xf4\xb2\x01){\x1eY7\xfa\xc1\x95\x18{\xed\xad hI'\
            b'\x8b\x16\xfb\x85\xcd\xc8\xe7\xea\x9d\x98i\xf8L\xeb\x06h=\x027\xef&x\x96\xb4\xc4\xdbX'\
            b'\x87\xa4;\xf0\xdb\x8d\\W\xc3\x0f\xbf\x01y\x13\x82\xa7.\xb61^\xad5\xa3\xd7\xa7\xca\xcb'\
            b'\xbc*3{BU\x08\x93\xb1\xb5\xfb\xba%\x83\x17\xa9\xc4\x17\xa3P\x01\x9dD\xb1F\x84\xc3`x'\
            b'\xe5\xe5!\xf3\x1bL/x\xfb\xd31PG\x02\t\xfa\xa9\xcf\xc6\xe8\xf7\xa2\xe5\xa4\xe1(Y*4\x03'\
            b'\xdf\xd1,&~ZW1\x96T\x81}\xb4\xf8\t\xa3]\x04\xd6\xf7\xfev\x82\x07\x9a\x98)\xcd\x81\xc9'\
            b'\x8b\xe7\xcb<\x96zm\xba\xf3\xa6{J\xf6\xf7\'R9\xec+\\\x91k\x1f\xfe\xdf\xcdc\x84\x86['\
            b'\x00nx\xae\xe3\xa7\x00\xd7\xd4\x84\xe5\xa2\x8c\xe6\xd3tNp{h=\x8fri\xcdu\x94b\x81T\x04Z'\
            b'\x81\xc7\x88X\x03\x08\x05\xc3\xff\xdf\xa7v\xfcV\xd2<\xc5I\xf3\xae\xf7\xc1\x08^+S,\xa4Y>'\
            b'\xd8\x9dC<V\xe0E\x82\xaeF\x18\xf5-\xd4\xf6Z\xc3\xf8\xde\x98\xf3\x15\xe5c^\xf9\x17\x8b'\
            b'\xfc\x12\xa3\x9e&G\xe5\x9c\x08M\xbc\xf8<y\xbaB\xdf\xc6\xe6\xd3?\x87\x8e\x98\x81\x1b'\
            b'\xb1\xe6<\xbb*\xb8\x8fC\x03\xea\x82\x82J\xf0\x91l\xf0\x8f\xfa\x99\t/\xd9\xf3X\xea\xdb[D'\
            b'\xc6\xd2v-2,\xfaj\x81\t<\x10BU\xf2k\xc8\xfd\xbc\x17\x19\xe2S-\x02a\\&\xae\xe3\xc0'\
            b'\xc1G\xd9\xd8s&\x98\x085\xf7\xcf\xce2f\x95I\x15\x12rY?F\xbd3\x1b\x03|\xdbKp];Z\x1a'\
            b'\x0b\xfe\xb46\x8d_i\xa6\xe4\x80\x9c\xb3]\xe3fc\xfb\xf6\xf7rH\xd2\xc4\x8b\x07\x9dmB\xbd'\
            b'\x9a\x99!\xf5\x9a\xed\xa4\xbe\xf8Lz\x0b6\xab\x0e{*\x0f+\xde%\xbd\xb6:;\x18\'\xa9mF\xd7k'\
            b'\xd0D\xd3\xd6CF\xcb\x8e\xb8\xd5\x9f\xb3\xfd\x8f{\xa5\xfa?a\xe0\xde\x07;\xf9\xa6\xac'\
            b'\xa40\x82\x05A\x06\t*\x86H\x86\xf7\r\x01\x07\x01\xa0\x82\x052\x04\x82\x05.0\x82\x05*0'\
            b'\x82\x05&\x06\x0b*\x86H\x86\xf7\r\x01\x0c\n\x01\x02\xa0\x82\x04\xee0\x82\x04\xea0\x1c'\
            b'\x06\n*\x86H\x86\xf7\r\x01\x0c\x01\x030\x0e\x04\x08\xc7\x97\xae\x98\x9dS\x01\x13\x02'\
            b'\x02\x08\x00\x04\x82\x04\xc8\xa6,\x9d\x85\x0b(\x8f^\xb8\xee\xcaU$@\xb4\xee\rOp\xd0'\
            b'\x86K\xdf9\x16\xf8\xc8,\xd8/\x12o.e\xed\xaa=b\xb9\xc1XM\xf3[\xd0\xea\\z\xe6\xae\xc3^'\
            b'\xa1\'s\x1d\x94w8\x9d\x03\x18\x03\xc5P\x07\x04\x1a\x87\x84\xb5\xe4\x0c\xc2-\x9e\x0f'\
            b'\x7fC\x8a\xd5K\xd19 \xfb\x0eV\xbbe\xfbKW\xb1\x8b\xdc\x92\xd1?\xd57U\xa0\xdc\xc2\x95'\
            b'\x83k\xc0\x11<\xd8\xd7=\x13\xe7\xc3\x04D:0\xb1{\xa6qu"\x07\xd5\x80\xc3\x87:I\xf8\x19?'\
            b'\x17\x81\x9fX\xf2H:\xba\xcf\xcf\xa5\xecHC\x06\xb2Fr\x1a\xe6\x19\x95\x02UJaK\x96\xf5fQ'\
            b'\xef\xcd\x8f\x0cS\xd4\xf8<0!\xef\x8b3\t\x83\xb9\xb1\xb1X:\x81 8a<oo\x85\xd5\xaao\xb59'\
            b'\xc2]\xf7\xaf"\xc0\xb3_\xd20-I\xf4\x06\xceQ\x02\t\xbd2_\x9cW\x7f\x85\xf87\xe6Z\xba\x94('\
            b'\x84\x15\x94\xbet\xf7@^\xa5N:\x07G\x96\xeb\x13\xb2G\x98\x96\x89y\x11\x9cO\x010\xd8'\
            b'\x1enm\xec\xf6\xa2C\x93\xed}\x14\r\xd4m\x93\xf3 \x7fz\x8f\xcdl\x0e%\xd6\xfc\xecq1\xf2n'\
            b'\xab\x9co\xc0\x00\xa9\xfd\x16v\xc3\xd7\xa3\xe5S\xe0ZJ\xf1 L\xfc.S\x00\xd4[\xbb\x11&\xf6'\
            b'\xb3g(\xd24T\x86U\xfb\x87\xad\x18y\xa2\xf0\xe5\xb9\xcb\xaeR\xca\xc5\'\xfc>\xd1/V\xad'\
            b'\x1cA\x0fp\xc7\xac}h\xa4\xb3\xb6\x81d\xbc\x18$*N\xe6\x94r\xe6~\xd3\xdc&\xbf\x13_FJ\xe6'\
            b'\xe7a+\x17\x02e\xdf\x04\x9f\xa5\xc3\xc8\xea\xf7\xdc\xa3<\xc2\xfe\x8c\xcf\xe5\x1b;\xf7'\
            b'\xd3F\xa3\xa78\xc3\xb4\x8crM\xf6\xda;B\x07\xd3\xcdQ|9\xa6z\xbd]\x91\xdeB\xd5\x16\x8e'\
            b'\xce\xcc\x11"\x06\xbb*u\xe3\xc8\x9c\xff\x7f\x86!\xe2\xd0\x9d*\xc4\r\xe3\x83\xc4\xea&'\
            b'\xfev\xf6V\x10?o_\xb6a\xf0\x8a\x9d3\xb6\xddd\x1e\x8b\x8f\xc6C@=\xa7g\xfe\xeb\x90\xe2i'\
            b'\xa9\x1e\xaa\x8a\xc4\xda\x01Gg\x9b\x00\xcd\xd1B}\x17\xc3\xb1\x12D\xbab\x87H\xf5\xaf\xf1'\
            b'\x8ekq\x14f\xc3T*0\xd1\x1d5\xcc\x18\x8a\xfaW\xad\x82\xba\xf9\x88\xf9\xd7\x11\xa7b\x15'\
            b'\xdf\x84\xf37\x02\x97\x94$\x93\xe8\x0f\xf0\xfa\xa9\x84\xe1\x8be\x98\x04\x92G\x8b'\
            b'\x119<\xdb\x0fC\xd1{\x81\x1d\xcd\xa0\xady\\5K\xd1\x06mC\xf25@ \x8a\xc8\xa2\x0b\xcd$'\
            b'\xbf\xe2\xb61\xc0\xa1\x91#xO\'\xd1\x14\x18\x98\xdd\x9cX\xc2e6M\x08~\x175\xed\x87/\xf4'\
            b'\xed=@\xee\x11c\xa3\x8e1\x16\x85\xb5\x14\x8e%\'+\xc53\xd5\x1d,\x9cy%\xac\xf3\x91\xd5'\
            b'\xd7PX\xcd\x86\x19A\xdd1\x1f-~\x9f=\x99+*\xe6\xedU\xecY\xfa\x88XO\xc7\x93+)\xa1\xd8'\
            b'\xd4P\xd0U\xda#\xc9G\xa5\x07\xc6Z\x12\xe4A\xa9\x96\xe1\xbe\x02\x9c\x972\x1f\xde~4Y'\
            b'\xf6+\x0bR\x9fe\x10\t\xfc\x1e\x08S\'\x08\xbf\xbe\x90pZ\x8bx\x9cj\xe0\xe9\x1aG*\xb9'\
            b'\xa1\xc4\x08\xb9\xeb\x8a\xd5\x1e\xe2k\x840\xaaB\xf01\xd5\xabN\xf39\x82\xa8\x93\xe9\xb7'\
            b'\xb9\x18\x9bye\xeaN\x07d\xf7\xad\x95\x0c\xea|b\xdeu.\x1a\xe0\xe1\xdb\xfbw8U\xaa\x8e5D'\
            b'\xd9\x0c\x014q\x0e\ny\x1f\xdb\xc9\xf6~P\x80\xc6\x02\x8b&\x11i8\xf4)\xeb<_\xde\x0fu%'\
            b'\xef\xdc\x816\xa3\x99"\r\xcf\xe9_\xa9\xc1\xe9=\x9d\x85\xfc|%\x96FN\x00\xc9\xc4\x90'\
            b'\x8cv4Y\xd4\xc2QK\xdc\xd7\x84\xf0;\x92\xdc\xfc\x06R\xaep\x86\xe4\xa0\x7fb\xe2!\x81\tK('\
            b'\xc4b\xa1\x0e.K\xcd\xbd,\xd6\x00\x87?1I\x11\xbd1\x16c\xc4\x87Tz\xfa\xb1\x0cB5\xfd\xe2'\
            b'\xa4\xdb\xea\x81\x9e\xaf\xaaV\xaa%\xb4\xfc>\xf2j\xa7\xb0\xc37\xa9\x13-\x05\x9c\x9d-[9'\
            b'\xa4\xc9%^\xe2\x0c\x19W\xb6<b\xf0U\x8d\x9cm\xce&\xb3\x89\xb6>\x9c\x8b\x04\xed\x03\xaaVI'\
            b'\xe4o!&\xea\xb5\xd5!<\x8e7\xc8\xdc\xa3\xbd\xc5\xce\x83\xdb\xc9\xab\xca\x84\x93$M\xeb'\
            b'\xb8\xdd\xe6\x95\x17[\x88\x0b\r\x83^fQ\xd5\xea\xf4\xcf@\xb6\x12\xday,\x82-=\xda\xd9\x03'\
            b'\xf5\xce\xd3\xbe\x00{ w\xaa/2\x17\xf1\x01\x9dQ\xffF\x1a\xca;J\x07\xa6x\x08\xdek\x10\x086A'\
            b'\xd4y\x9e\xf6\xfa\x1b\x81\n\xca\xa5\x80f\x10\x82q\xd5\x1e\xcc[\x0c\x9d\xaf\x98h\x0f\xc5\xda'\
            b'\x8fV"?J<\x1f\xabt\xd8\x7f)\xc6\xc8&\x1a@\xd84\x9bm3\xde\x8cp$\xd56\x01Y\xa9e\xdc\x1d\x82~'\
            b'\xc1D \xc8\xed\xba\'\x7f\x82\x0c\xff\xa5F\x02o\xcf\x0f7pO\xa1\x0e\xc6;\xf8\xef\xe9X\xba\x17'\
            b'\x8a\x02C?\x98\xd2\xca\xdb\x98\x84\xad6:\x8a^g98r\t\xa1\x19\x1b\xad\xb1b\xe3\xed\x81y'\
            b'\xeb\xe7p0\x03\x1a\xb8e\xde\x17\x86Y)\x91\x95\xb3\x8f\xc6\xba\xf26\xb0\xcf\xc3\xb7'\
            b'\x1b1%0#\x06\t*\x86H\x86\xf7\r\x01\t\x151\x16\x04\x14\x82\xd3\xf6\x93b\xc4=\xec\xeb\xa1'\
            b'\x9d+r8\xf1\xbf\xdd\xafm\xc3010!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14\xdd\x880'\
            b'\xb7kL\xb5\x80\x06\xce\xd5\xe6j\xbd\xe27e\xdd\x01\xaf\x04\x08\x14\xef\x1dI8\xc6.\x13'\
            b'\x02\x02\x08\x00'
# spell-checker:enable


class Test_pyopenssl_signer(unittest.TestCase):

    def test_empty(self):
        with self.assertRaises((KeyError, ValueError)):
            pyopenssl_signer.sign(None, {}, {})

    def test_proper_options_good_key(self):
        signer = {
            'key_file_format': 'pkcs12',
            'key_data': TEST_CERT
        }
        signature = {
            'type': 'bare',
            'encoding': 'binary',
            'hash_alg': 'sha256',

        }
        data = "Data for testing signer".encode()
        pyopenssl_signer.sign(data, signature, signer)

    def test_proper_options_bad_key(self):
        # we're going to assume that we're
        with self.assertRaises(ValueError):
            signer = {
                'key_file_format': 'pkcs12',
                'key_data': "hello there"
            }
            signature = {
                'type': 'bare',
                'encoding': 'binary',
                'hash_alg': 'sha256',

            }
            pyopenssl_signer.sign(None, signature, signer)

    def test_invalid_type(self):
        # we're going to assume that we're
        with self.assertRaises(ValueError):
            signature = {
                'type': 'bad_type',
            }
            pyopenssl_signer.sign(None, signature, {})

    def test_invalid_type_options(self):
        # we're going to assume that we're
        with self.assertRaises(ValueError):
            signature = {
                'type': 'bare',
                'type_options': 'not allowed'
            }
            pyopenssl_signer.sign(None, signature, {})
