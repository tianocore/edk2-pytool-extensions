# @file test_pyopenssl_signer.py
# This contains unit tests for the pyopenssl binary wrapper
##
# Copyright (c) Microsoft Corporation
#
# SPDX-License-Identifier: BSD-2-Clause-Patent
##
import unittest
from edk2toolext.capsule import pyopenssl_signer

r"""
TEST_CERT is a cert used to test the ability to parse pfx and pull out necessary information.
To generate a new test cert follow these steps:

1. Generate the Cert (.pfx) file
There are multiple ways to do this, but running this powershell script is the easiest:

``` powershell
$myPwd = ConvertTo-SecureString "password" -Force -AsPlainText
$Cert = New-SelfSignedCertificate `
    -DnsName "www.contoso.com" `
    -CertStoreLocation "Cert:\LocalMachine\My\" `
    -KeyAlgorithm RSA `
    -KeyLength 2048 `
    -Subject "CN=Mock Platform Key" `
    -NotAfter (Get-Date).AddYears(10)
Export-PfxCertificate `
    -Cert ("Cert:\LocalMachine\My\"+$Cert.Thumbprint) `
    -FilePath ./Certificate.pfx `
    -Password $myPwd
```

2. Serialize the Cert
Run the following Python commands to read the cert and print the bytes in a
format allowing it to be used in a python file while meeting flake8 requirements:
``` python
with open("path/to/cert.pfx", 'rb') as file:
    line = file.read(30)
    while(line):
        print(str(line), end='')
        line = file.read(30)
        if line:
            print("\\")
```
From there, you can copy the console printed serialized cert and use it in your
python file as seen below this docstring.
"""

# spell-checker:disable
# TEST_CERT1 has no password
TEST_CERT1 = b'0\x82\tA\x02\x01\x030\x82\t\x07\x06\t*\x86H\x86\xf7\r\x01\x07\x01\xa0\x82\x08\xf8'\
             b'\x04\x82\x08\xf40\x82\x08\xf00\x82\x03\xa7\x06\t*\x86H\x86\xf7\r\x01\x07\x06\xa0\x82'\
             b'\x03\x980\x82\x03\x94\x02\x01\x000\x82\x03\x8d\x06\t*\x86H\x86\xf7\r\x01\x07\x010'\
             b'\x1c\x06\n*\x86H\x86\xf7\r\x01\x0c\x01\x060\x0e\x04\x08\x96)\xa4\x90\xb0_M\x0f\x02\x02'\
             b'\x08\x00\x80\x82\x03`\x01\x90D\xc5\x9f\xf1&\xd7w\xa9\xd9<\xbd\xa8\xd7R\xc5\xd4\x9a'\
             b'\xd7, \x9c\xf9\x1c\t\x089\xc0$?\x1c4U0\xab\x82k9\xce*$\xe6+\xe9\x06p\x0f\xff\xf7-'\
             b'\xf1\xde4\xbc\x1f\xb2/\xb7D)\x90\xc6$N\xd1\x91\xff\xd7\xd4\x12\xd3\xf8/\xa1\xb2Rt'\
             b'\xa8/\x13\\\xb0\x90\x1dp\xe6\x1fn\x0fDu\x1d\x01\xc8\x9eT\xeaP+B\xdf\xa4!\x1b\xf6\xe3'\
             b'\x04)\xad\x85\xc4\x8d\xce@hT\xc8\xbf}\x8f_Sb\xdd\x83\xbe\xa2\xbeN\xd6\x9f\xd6\xbf'\
             b'\x10z+s\x95\xe0\x1fb\xe0\xe2N\x16\x08\x80}\xad*v\x9bo\xc0T\x9d\x9az4\xb9}\x91\xce\x81'\
             b'\x15\xceo\x96\x1e;t\xf2\xc8m\xfan\xc02\xe8\xb7\xbbf\xa7\x0b\x12\xd1\x12w\x80\x9b'\
             b'\x8c"\x89\xd6)\x9c\x19\xd1d\xd7\xc2a\xdc\x93\x7f\x96\xa7\x9f\xa4\x1d\xd6\xde_XG\x12'\
             b'\xf6\n\xef#\xcd\xaa\xe5\xa5d0\xe8\xee\xd0\xd8(\xcbm\x9eS\xfaD\x99\xa8\xa1\x01\xc9'\
             b'\x02\xd5\x88+\xc2 \xb62L\x1f\n\xaf\x98(\xfca\xaeSj\x19`-]Z\x9a\xf1\x188s\x9c\xc3'\
             b'\xbf)\xec\r]\xe78\xda\x1e\xe3\xe8\xaa\xc8K\xa7\xed$S\x0b)\x80l~\xc6|Cs\x08\xbc\'\x0f7?'\
             b'\xdc\x87\xb9r\x9b8\x9b\xb66\t\x13\xc5p&W\x0b\xfd\x13\xf5\xee\xd3\xa2\xe0\x98B\xe3\x88'\
             b'\x1d\x12\xb8T\x8e?;\xb3y!\xe9\x90\xd8\xdcT\xe8S\xbb\xbf\xbe\x84\x1d\xffX\xa9E6B\xba'\
             b'\xb3\x85sm\x11n\x10\xdf\xc8\xec\x9a~\xf4\xb2\x01){\x1eY7\xfa\xc1\x95\x18{\xed\xad hI'\
             b'\x8b\x16\xfb\x85\xcd\xc8\xe7\xea\x9d\x98i\xf8L\xeb\x06h=\x027\xef&x\x96\xb4\xc4\xdbX'\
             b'\x87\xa4;\xf0\xdb\x8d\\W\xc3\x0f\xbf\x01y\x13\x82\xa7.\xb61^\xad5\xa3\xd7\xa7\xca\xcb'\
             b'\xbc*3{BU\x08\x93\xb1\xb5\xfb\xba%\x83\x17\xa9\xc4\x17\xa3P\x01\x9dD\xb1F\x84\xc3`x'\
             b'\xe5\xe5!\xf3\x1bL/x\xfb\xd31PG\x02\t\xfa\xa9\xcf\xc6\xe8\xf7\xa2\xe5\xa4\xe1(Y*4\x03'\
             b'\xdf\xd1,&~ZW1\x96T\x81}\xb4\xf8\t\xa3]\x04\xd6\xf7\xfev\x82\x07\x9a\x98)\xcd\x81\xc9'\
             b'\x8b\xe7\xcb<\x96zm\xba\xf3\xa6{J\xf6\xf7\'R9\xec+\\\x91k\x1f\xfe\xdf\xcdc\x84\x86['\
             b'\x00nx\xae\xe3\xa7\x00\xd7\xd4\x84\xe5\xa2\x8c\xe6\xd3tNp{h=\x8fri\xcdu\x94b\x81T\x04Z'\
             b'\x81\xc7\x88X\x03\x08\x05\xc3\xff\xdf\xa7v\xfcV\xd2<\xc5I\xf3\xae\xf7\xc1\x08^+S,\xa4Y>'\
             b'\xd8\x9dC<V\xe0E\x82\xaeF\x18\xf5-\xd4\xf6Z\xc3\xf8\xde\x98\xf3\x15\xe5c^\xf9\x17\x8b'\
             b'\xfc\x12\xa3\x9e&G\xe5\x9c\x08M\xbc\xf8<y\xbaB\xdf\xc6\xe6\xd3?\x87\x8e\x98\x81\x1b'\
             b'\xb1\xe6<\xbb*\xb8\x8fC\x03\xea\x82\x82J\xf0\x91l\xf0\x8f\xfa\x99\t/\xd9\xf3X\xea\xdb[D'\
             b'\xc6\xd2v-2,\xfaj\x81\t<\x10BU\xf2k\xc8\xfd\xbc\x17\x19\xe2S-\x02a\\&\xae\xe3\xc0'\
             b'\xc1G\xd9\xd8s&\x98\x085\xf7\xcf\xce2f\x95I\x15\x12rY?F\xbd3\x1b\x03|\xdbKp];Z\x1a'\
             b'\x0b\xfe\xb46\x8d_i\xa6\xe4\x80\x9c\xb3]\xe3fc\xfb\xf6\xf7rH\xd2\xc4\x8b\x07\x9dmB\xbd'\
             b'\x9a\x99!\xf5\x9a\xed\xa4\xbe\xf8Lz\x0b6\xab\x0e{*\x0f+\xde%\xbd\xb6:;\x18\'\xa9mF\xd7k'\
             b'\xd0D\xd3\xd6CF\xcb\x8e\xb8\xd5\x9f\xb3\xfd\x8f{\xa5\xfa?a\xe0\xde\x07;\xf9\xa6\xac'\
             b'\xa40\x82\x05A\x06\t*\x86H\x86\xf7\r\x01\x07\x01\xa0\x82\x052\x04\x82\x05.0\x82\x05*0'\
             b'\x82\x05&\x06\x0b*\x86H\x86\xf7\r\x01\x0c\n\x01\x02\xa0\x82\x04\xee0\x82\x04\xea0\x1c'\
             b'\x06\n*\x86H\x86\xf7\r\x01\x0c\x01\x030\x0e\x04\x08\xc7\x97\xae\x98\x9dS\x01\x13\x02'\
             b'\x02\x08\x00\x04\x82\x04\xc8\xa6,\x9d\x85\x0b(\x8f^\xb8\xee\xcaU$@\xb4\xee\rOp\xd0'\
             b'\x86K\xdf9\x16\xf8\xc8,\xd8/\x12o.e\xed\xaa=b\xb9\xc1XM\xf3[\xd0\xea\\z\xe6\xae\xc3^'\
             b'\xa1\'s\x1d\x94w8\x9d\x03\x18\x03\xc5P\x07\x04\x1a\x87\x84\xb5\xe4\x0c\xc2-\x9e\x0f'\
             b'\x7fC\x8a\xd5K\xd19 \xfb\x0eV\xbbe\xfbKW\xb1\x8b\xdc\x92\xd1?\xd57U\xa0\xdc\xc2\x95'\
             b'\x83k\xc0\x11<\xd8\xd7=\x13\xe7\xc3\x04D:0\xb1{\xa6qu"\x07\xd5\x80\xc3\x87:I\xf8\x19?'\
             b'\x17\x81\x9fX\xf2H:\xba\xcf\xcf\xa5\xecHC\x06\xb2Fr\x1a\xe6\x19\x95\x02UJaK\x96\xf5fQ'\
             b'\xef\xcd\x8f\x0cS\xd4\xf8<0!\xef\x8b3\t\x83\xb9\xb1\xb1X:\x81 8a<oo\x85\xd5\xaao\xb59'\
             b'\xc2]\xf7\xaf"\xc0\xb3_\xd20-I\xf4\x06\xceQ\x02\t\xbd2_\x9cW\x7f\x85\xf87\xe6Z\xba\x94('\
             b'\x84\x15\x94\xbet\xf7@^\xa5N:\x07G\x96\xeb\x13\xb2G\x98\x96\x89y\x11\x9cO\x010\xd8'\
             b'\x1enm\xec\xf6\xa2C\x93\xed}\x14\r\xd4m\x93\xf3 \x7fz\x8f\xcdl\x0e%\xd6\xfc\xecq1\xf2n'\
             b'\xab\x9co\xc0\x00\xa9\xfd\x16v\xc3\xd7\xa3\xe5S\xe0ZJ\xf1 L\xfc.S\x00\xd4[\xbb\x11&\xf6'\
             b'\xb3g(\xd24T\x86U\xfb\x87\xad\x18y\xa2\xf0\xe5\xb9\xcb\xaeR\xca\xc5\'\xfc>\xd1/V\xad'\
             b'\x1cA\x0fp\xc7\xac}h\xa4\xb3\xb6\x81d\xbc\x18$*N\xe6\x94r\xe6~\xd3\xdc&\xbf\x13_FJ\xe6'\
             b'\xe7a+\x17\x02e\xdf\x04\x9f\xa5\xc3\xc8\xea\xf7\xdc\xa3<\xc2\xfe\x8c\xcf\xe5\x1b;\xf7'\
             b'\xd3F\xa3\xa78\xc3\xb4\x8crM\xf6\xda;B\x07\xd3\xcdQ|9\xa6z\xbd]\x91\xdeB\xd5\x16\x8e'\
             b'\xce\xcc\x11"\x06\xbb*u\xe3\xc8\x9c\xff\x7f\x86!\xe2\xd0\x9d*\xc4\r\xe3\x83\xc4\xea&'\
             b'\xfev\xf6V\x10?o_\xb6a\xf0\x8a\x9d3\xb6\xddd\x1e\x8b\x8f\xc6C@=\xa7g\xfe\xeb\x90\xe2i'\
             b'\xa9\x1e\xaa\x8a\xc4\xda\x01Gg\x9b\x00\xcd\xd1B}\x17\xc3\xb1\x12D\xbab\x87H\xf5\xaf\xf1'\
             b'\x8ekq\x14f\xc3T*0\xd1\x1d5\xcc\x18\x8a\xfaW\xad\x82\xba\xf9\x88\xf9\xd7\x11\xa7b\x15'\
             b'\xdf\x84\xf37\x02\x97\x94$\x93\xe8\x0f\xf0\xfa\xa9\x84\xe1\x8be\x98\x04\x92G\x8b'\
             b'\x119<\xdb\x0fC\xd1{\x81\x1d\xcd\xa0\xady\\5K\xd1\x06mC\xf25@ \x8a\xc8\xa2\x0b\xcd$'\
             b'\xbf\xe2\xb61\xc0\xa1\x91#xO\'\xd1\x14\x18\x98\xdd\x9cX\xc2e6M\x08~\x175\xed\x87/\xf4'\
             b'\xed=@\xee\x11c\xa3\x8e1\x16\x85\xb5\x14\x8e%\'+\xc53\xd5\x1d,\x9cy%\xac\xf3\x91\xd5'\
             b'\xd7PX\xcd\x86\x19A\xdd1\x1f-~\x9f=\x99+*\xe6\xedU\xecY\xfa\x88XO\xc7\x93+)\xa1\xd8'\
             b'\xd4P\xd0U\xda#\xc9G\xa5\x07\xc6Z\x12\xe4A\xa9\x96\xe1\xbe\x02\x9c\x972\x1f\xde~4Y'\
             b'\xf6+\x0bR\x9fe\x10\t\xfc\x1e\x08S\'\x08\xbf\xbe\x90pZ\x8bx\x9cj\xe0\xe9\x1aG*\xb9'\
             b'\xa1\xc4\x08\xb9\xeb\x8a\xd5\x1e\xe2k\x840\xaaB\xf01\xd5\xabN\xf39\x82\xa8\x93\xe9\xb7'\
             b'\xb9\x18\x9bye\xeaN\x07d\xf7\xad\x95\x0c\xea|b\xdeu.\x1a\xe0\xe1\xdb\xfbw8U\xaa\x8e5D'\
             b'\xd9\x0c\x014q\x0e\ny\x1f\xdb\xc9\xf6~P\x80\xc6\x02\x8b&\x11i8\xf4)\xeb<_\xde\x0fu%'\
             b'\xef\xdc\x816\xa3\x99"\r\xcf\xe9_\xa9\xc1\xe9=\x9d\x85\xfc|%\x96FN\x00\xc9\xc4\x90'\
             b'\x8cv4Y\xd4\xc2QK\xdc\xd7\x84\xf0;\x92\xdc\xfc\x06R\xaep\x86\xe4\xa0\x7fb\xe2!\x81\tK('\
             b'\xc4b\xa1\x0e.K\xcd\xbd,\xd6\x00\x87?1I\x11\xbd1\x16c\xc4\x87Tz\xfa\xb1\x0cB5\xfd\xe2'\
             b'\xa4\xdb\xea\x81\x9e\xaf\xaaV\xaa%\xb4\xfc>\xf2j\xa7\xb0\xc37\xa9\x13-\x05\x9c\x9d-[9'\
             b'\xa4\xc9%^\xe2\x0c\x19W\xb6<b\xf0U\x8d\x9cm\xce&\xb3\x89\xb6>\x9c\x8b\x04\xed\x03\xaaVI'\
             b'\xe4o!&\xea\xb5\xd5!<\x8e7\xc8\xdc\xa3\xbd\xc5\xce\x83\xdb\xc9\xab\xca\x84\x93$M\xeb'\
             b'\xb8\xdd\xe6\x95\x17[\x88\x0b\r\x83^fQ\xd5\xea\xf4\xcf@\xb6\x12\xday,\x82-=\xda\xd9\x03'\
             b'\xf5\xce\xd3\xbe\x00{ w\xaa/2\x17\xf1\x01\x9dQ\xffF\x1a\xca;J\x07\xa6x\x08\xdek\x10\x086A'\
             b'\xd4y\x9e\xf6\xfa\x1b\x81\n\xca\xa5\x80f\x10\x82q\xd5\x1e\xcc[\x0c\x9d\xaf\x98h\x0f\xc5\xda'\
             b'\x8fV"?J<\x1f\xabt\xd8\x7f)\xc6\xc8&\x1a@\xd84\x9bm3\xde\x8cp$\xd56\x01Y\xa9e\xdc\x1d\x82~'\
             b'\xc1D \xc8\xed\xba\'\x7f\x82\x0c\xff\xa5F\x02o\xcf\x0f7pO\xa1\x0e\xc6;\xf8\xef\xe9X\xba\x17'\
             b'\x8a\x02C?\x98\xd2\xca\xdb\x98\x84\xad6:\x8a^g98r\t\xa1\x19\x1b\xad\xb1b\xe3\xed\x81y'\
             b'\xeb\xe7p0\x03\x1a\xb8e\xde\x17\x86Y)\x91\x95\xb3\x8f\xc6\xba\xf26\xb0\xcf\xc3\xb7'\
             b'\x1b1%0#\x06\t*\x86H\x86\xf7\r\x01\t\x151\x16\x04\x14\x82\xd3\xf6\x93b\xc4=\xec\xeb\xa1'\
             b'\x9d+r8\xf1\xbf\xdd\xafm\xc3010!0\t\x06\x05+\x0e\x03\x02\x1a\x05\x00\x04\x14\xdd\x880'\
             b'\xb7kL\xb5\x80\x06\xce\xd5\xe6j\xbd\xe27e\xdd\x01\xaf\x04\x08\x14\xef\x1dI8\xc6.\x13'\
             b'\x02\x02\x08\x00'

# TEST_CERT2 has a password
TEST_CERT2 = b'0\x82\ni\x02\x01\x030\x82\n%\x06\t*\x86H\x86\xf7\r\x01\x07\x01\xa0\x82\n\x16\x04\x82\n\x120'\
             b'\x82\n\x0e0\x82\x06\x0f\x06\t*\x86H\x86\xf7\r\x01\x07\x01\xa0\x82\x06\x00\x04\x82\x05\xfc0'\
             b'\x82\x05\xf80\x82\x05\xf4\x06\x0b*\x86H\x86\xf7\r\x01\x0c\n\x01\x02\xa0\x82\x04\xfe0\x82'\
             b'\x04\xfa0\x1c\x06\n*\x86H\x86\xf7\r\x01\x0c\x01\x030\x0e\x04\x08\xa3u\xeaT\x9c^W\x98'\
             b'\x02\x02\x07\xd0\x04\x82\x04\xd8\xe6\xd9\x08e\x04\xed\xd8\xed^t\xb63\x06\xedP]3~\xca\\\x9er'\
             b'\x8bw\xad\xf4)\xc5\x9a\xbc\x98\x9cy\x91|\xe9\xa8U\x8d\xee\t\xdeOm\x8c1\xbd\xe2\x8dY'\
             b'\x04a\x83i\xa3\x9c\xfc6\xdd\x82\x1f4oQ\xc3\xeb\x97\xaf\x94?_\xce\xbci\x08\xda.M\xc5:6'\
             b'\x12~8\xd7!\x7f\xefg\xce\xc9\x83N}\xd2\xf3f\xfa\x07\x7fT\xe2\x97s\xce/\xbe\xe7\xa1\xec'\
             b'\x14(\x05\x94\xe72\x01O\x80\'\xa7\x00\x1dP\xc9\xd16\x02\xa6\x83\xd83,\x1f3\x9c\x90\xdeN'\
             b'\x8c\xfe=\xe6D \xb2\x02\xda\xaf\xb7l\xf6\xcf\x0e\xb5\xd9\xc9\xe2\x83\x05\t\xea\xe82'\
             b'\x89\xef$\xc4\x12\xee\xba\x04\xff8\xc8\xefQ\xf1\x9a\xa8Ue\xb1FT\xdf55\xaf\xa3\x85\xec,'\
             b'\xe4M\xde\xab\xb1Z\xc1\xba\x19\x96[j1]0\xa2\xecP\x9c;\xc6\xad\x97\xbd\xd0\x12\xfcb\x8b'\
             b'\x8b>\xbc\x0fB%c+\xd1\x19\xc2+\x91N2\x19V\x92>\xbd\xc7j\xa2\x91\'\xf3\xbe\xe6\xbc'\
             b'\x1a\x112u\xc5j\xc0Z\xb9>M\x92\xd2\xa3\x8a\xc2K^\xbf\xc0\xf1m\xb4\x14I\x82V:\x90'\
             b'\xbeO\xb5b\\)L\t\x1d\x17\xb58\x99\x08D[\xdb\xa9q\x00 \xe1C\xe0\xbc\x9c\xea\xfe\x9d'\
             b'\xa3\x0c\x8d\xe1\x80\x08}\xb0H\xfc*y\x85\xe13\x8bf\xf6"\x19:[\xd5\xdc\xdf\n;n\x0fy9'\
             b'\x94Ld7\x83\xa0\xa2kqn8\x80R\xdd\x164\x15\xa1?\xba\x82\xef\xa4\xc5\xa5\xd2l i\x10\xa2'\
             b'\xef\xad\xdeV\tqb\xa5\x8cQ\xc8BS\xad\x0cQk\x95\x9d\x87\xd4\xfc\x93\x89\xf0\x87.n\x19\ti'\
             b'\xee\xa1\xe5HI\xba5\x198-\xc5k\xf6\xf7fu\xc3\xab\xe3\xe6\x07\x82c\x16\x03m%h\x1a('\
             b'\x05\xc2\xc7m\x02\xa5\xf8eR\x02\xbd\xbd\x07\x10E\xff\xe2\x8f\xb4\xa2I\x95\\\xc0\xfc'\
             b'\x92t`%cw\x1f\x12\xbe4\xc5\'}\x92xf\xb6\xc1\x08\x85\x80\xf7%\x89v\xfd^oL\x84\xaaS'\
             b'\xc6\xe3\xb0M\xd0\xcf\xb9\xea\xc9\xb4jk\x00\xd1\xb1\x8f\xda\x0e\xc1\x93\xe0\xe5'\
             b'\xe1\xc6e\xab=\x14\xf3\t\xbd\x98\xfc$]i\xaa"\xa8\xbd\xec\xf9@U\xd1\xccT\xea#GJD'\
             b'\xc3N\x1b\xdby%\xee\xf3\xc8:\xe3\xfcPR\xc6\xd4\x04\xa6\xd5\x1bUf\t\xba#UP\x9dL'\
             b'\xde\x13\x8b\x8db\x89\x17\x98\x1ee?e\xd7\x15\x11S\xdc\xff\xdf-\x8b\xee\xcd\x8c'\
             b'\xff;\xbd\xa2\xa0\x97\xa7L\x1dc|\x8ap\xd2z\xbe\x82\x8ds\x80]G\xa2q\xcdzA\xa2>[e'\
             b'\x00T*\x02\xfeV\t\x8b\x87\x8e\x96\n7\xc7\x03\x05<\x1b\xaf/A\xe6\x88\xd0FL<\x02'\
             b'\xc5G\x05\x81\xf8\xef\x81a\xa0{\xb3\xda\x03\x80*\x98\\\xe4m\x9ez\x02O;\xc3\xfdV'\
             b'\xd5\x04\xd4\xcd@\xb7\x07\xa1\xa0M\x08\xae>\xc8o:\x9f\xb0\x9f\x80\xad}\x80D\x9d'\
             b'\x86Ob\xfeq\xdc\xe6|\x9fk\xe8F\xcc\r"\xf7\xf7\x96\x8a\x06*\\(\x8d\xba\xdeL\xc6'\
             b'\r"|\xe3\x12\xf1\xa5\xc1\x95*d\xca,\xc3\x89\x0f\x12\xbdR]\xf7\xf7\xe8\xbd\x83'\
             b'\xb9\'\xcf\xe3Sb\x8c\xc5i\xefw\xfc\xf5m\xa7}\x06\x15\xfa\x9bLoR\xa6\xd2L\x84'\
             b'\x104&\xfd\xa0x\x87\xd3T\xb7@\xa3\xd0M\x98@\x9cT\xd6\x8b\x8b\x80?4\xe2@\xe7\xa2'\
             b'\xca\xc1\xd1[UPYo\x1e\xb9B\x9f\xa9\xe4v\xafV[\\\xea\xbb\x95\xb2o-a\xe4A\x04\xeb'\
             b'\xcaa\xbc\xb4j\xb9\xc9\xb2\xba\xe9\xa1\xaa5\x13\xe2\xf8MC\x11\x91\'\xdf$\xec\x8e'\
             b'\x05M\xe1\xc3\x9bJ\xa7n\x12r8/~\x8ej\x7f\x91\xc3\x1b\x12u%6\xbe\x1b\xdb_\x9c\xe3'\
             b'\xf41\x8b/[\xc4\xad]vH\xab\x8c\x1f\x95\xb9*\x18@\xdc\x92\x9c\xfaJ\xde\xdfp\xad\x18'\
             b'\x03(A\xcb\xb2:\xd2\xc1\x1f[F0\xf5r\xf3\x01!@@Q\xb5\x8c\x1c\xaa\xe6\x1c@\xb8)\xe2'\
             b'\xb4\xab>\x0c\x86M8\x1b\xeaQ-\xdf\xe1\x02\x87R\'\xc1DQ~NO(\x9108\x8e\x99C\x1c>\x19'\
             b'\xe6K\xddZ\xdb1\xba\xba\x1aV\x0c6\x93\xcfH\xe3\xfdH\x86l,\xd0\xea\xbeE\\\xcf\xa9\xd2'\
             b'\x90[G&\xdb\xdf\xbd\x9by\xb3}}\xa5\x07\x02\xd4\x0f5\xd4\x1f\xe7\xcc*<.\x7f\x8b\n\xd7'\
             b'\x8bb-C\xcd\x9aHt\xac\xe8l\xa1\xf0\xeeJH\xfe\x90\x94@\xb0"\xb04X\xd7\xb2A\x85\x8f\xb9'\
             b'\xca\x18A\xe6\xb6\xddd\xe5\x13\xb0ux\x00\x92N"(9\xe2\rc\x1f>\x9c\xdcI\xd2\x92p\x9eX\xb4'\
             b'\xda\xb3q@\x84\xd0@XP)C\xaf\'\xa5\xdf\xbdD\x0e\xed\x95\xe1s\xac\xd5\xe6\x11\x8az\x06\xb9r'\
             b'\x94\x84w\xef\xe7\x82D\x9b:\xf1\xcd>\x16h\x16\xbc!s\x91\x9b\xa4"\x8e\x8f\xe0\xa1\x84Spt'\
             b'\xe7\'\x11\xb9\x1bj5\xe4v\x15\x05\x8a\xf6\xf5Lo:\xb5\x0e\xc4\xa1n\x19\x16\xbd\xc2\\\x84'\
             b'\xef%\x0b\xef!n\x81l\x8c\xa8\x16\x8a[X\x99\xf5\xab\xdaE\xf3\xd8\x9b\x92\xef\xb7\xe6\xf74'\
             b'\xdd\xae\xc1t\xb8\xc7\xcc]\xa1\r\xd5\x83D\x181\x81\xe20\r\x06\t+\x06\x01\x04\x01\x827\x11'\
             b'\x021\x000\x13\x06\t*\x86H\x86\xf7\r\x01\t\x151\x06\x04\x04\x01\x00\x00\x000]\x06\t*\x86H'\
             b'\x86\xf7\r\x01\t\x141P\x1eN\x00t\x00e\x00-\x00c\x006\x003\x005\x007\x00e\x005\x001\x00-'\
             b'\x006\x002\x006\x002\x00-\x004\x000\x001\x008\x00-\x008\x00e\x00b\x004\x00-\x00c\x004\x000'\
             b'\x00c\x008\x004\x006\x000\x00a\x00f\x005\x0000]\x06\t+\x06\x01\x04\x01\x827\x11\x011P\x1eN'\
             b'\x00M\x00i\x00c\x00r\x00o\x00s\x00o\x00f\x00t\x00 \x00S\x00o\x00f\x00t\x00w\x00a\x00r\x00e'\
             b'\x00 \x00K\x00e\x00y\x00 \x00S\x00t\x00o\x00r\x00a\x00g\x00e\x00 \x00P\x00r\x00o\x00v\x00i\x00d'\
             b'\x00e\x00r0\x82\x03\xf7\x06\t*\x86H\x86\xf7\r\x01\x07\x06\xa0\x82\x03\xe80\x82\x03\xe4\x02\x01'\
             b'\x000\x82\x03\xdd\x06\t*\x86H\x86\xf7\r\x01\x07\x010\x1c\x06\n*\x86H\x86\xf7\r\x01'\
             b'\x0c\x01\x030\x0e\x04\x08\x9f\xb7\xb8\xd9\x1b_q~\x02\x02\x07\xd0\x80\x82\x03\xb0-\xd0'\
             b'\xd5hx?\x05\x17\x99\x10\x8f\xc8lh\xfd\x88L9\xe6pi\xc2\xe5\xf9\xdbOz\xc9\t\xdf|\xaf'\
             b'\xdcHH\x88\x86\xb7X\xa8\x15\x1f\x85\x80\xab}6\xfe\x04\xc8#\xb4\x07\xc2>Vp{\xb1\x83'\
             b'\xf341\xe8\xf6k\xdf\xe9\x9b\x141eb\xf8\xd1*\x112\xe2\x84X\x08x\xee\x18\x07O\x1f\x99'\
             b'\xde\xcc\xf4\xd4l\xf1\xee\tw.\xd8\x1fx\x92\xfe\xb5Zs!\xcbj\x8e\xd27\xb3jHo\xb2\xc2'\
             b'\xfcL\x1ak\x1e<\xb3E\xe9\x1e\x92\xe7\x8f\xc1\xf8\x18J[\xa6\x03I\x89\xebJ\x10}MV\xbe'\
             b'\xd4t\x97\xc4\x07\xc00-\x0e\xa9uL#J\xa4\x19A\xb6\x0b{N\x12\xd61-\xa2\xed\xc8w\x06a'\
             b'\xfbf&r1Jv\x7f\x82#\x11\xac\x1d\xadG\xf6\x03\xd5\x0f\x152\xf8\xc3\xca\xe2c@\x08\xc4'\
             b'\x99\x8f}\xae]\x81\xe2)\xbc\x12w\xc9\xc8\xcd\x81\xe9F\xa4\x01\xfc\xf8\xc94=\xdb\xda'\
             b'\x8a\xfa\xee\xe4<![V\x98.e\x19\x05\x9a\t\xb6\x83\xc7\x9d*%\x93\x08\xe1\xbb\xc2m\x9e'\
             b'\xe4M\xb8\x97\x19\xa8\x1a\xfe\xcc\xae\x0e88v@\xbd\x02\xd7$\x10\xb2\xcd:\x9f9_A\x83\x8d'\
             b'\xa9J\xf7\xe1\xba\xde\xc4Sv\xc6z\x05\xebB\xffg\xc0\x80\xdf\xfd\xeb\xc1\xa5\xa4f-\xc1\x0b'\
             b'\xd9\x88;\xb4\xaf4k\x8dLq\xe7\xa42\xb3\xa4\xfd\'.2\xa4\xf8piQ_\xfaWv\xbe W8\xd6\xac\xf9'\
             b'\xf3\xb7T\xea\xc2T\xa7$\xa4\x83\x01;\xa9\xaf\xd2\x90\x0e\xbep \xda\xcb4V\xbf$\x87\xc4\xa3'\
             b'\x18\xeb\x13*\xf8A\xce\xff\n\x0e\x9cDb\xa4\xf3\x0b\x1af\xee\x87@6\xfe\x18Q\xb7\x88~(\xfaF'\
             b'\x85I6 \xfb\x1fl\xb8Li\x1e\x8d0\xfa\x9dg\xe5m\x165MUV\xbcj\xce\xdf\x85\x90%%\xcaQ\xfc\x80'\
             b'\xdf[H[\x88\x8e\x9f\')v6|\xe9zO\xf6\x0c.b\xb50&lp\xdeJ\x19\xcc\x01\xda\x11\xa5\xa4\xf5b*\nJ'\
             b'\xea\x87\xf3?\xacU\xdf\xe3\x8b)\x00\xf5Q={\x97\xbd\xe1\xe4A\xfb\x8a\xfa\x12\x11\x97\xf3f\xc81'\
             b'\xb3\x1e/\xd6\x9c6\xcd\x91\x97\x022\xce\x1d\xd6\x13\x83\xb0l\xa0\xc9Wu\xe8\x07\x8a\x144b;\xec'\
             b'\x1c\\r\xdc\x96|\xa2sK\x9e2\xa1\x80W\x15e\xd56.\xa8(\xb2\x12\x84\x8d\x9eFF\xb4\xad\xa0;\xde\xf8C'\
             b'\xff\xbc\xa0\xd50\xe0\xa9\x91\xa4\x83\xc0GW\xf9\xbd\xe3\xc6\x89\r*?]\xe18F\x88\xc0\xf8\xeb\xba`'\
             b'\xb0\xc8/\x17\x07\x8db\xa6B\x18\xa5\'\x98\x90\x1b\x92\xec\xa2I~@\x80\xc4\\]\x8c\xd0@^x\x81\xf2'\
             b'\x97;\x81\x93\x99]\xab\xb5\xa3t\xca\x1a\xab\x01\x8c\xc6\x0b\xa9}\xf9\x8di`0J\xaaP\x9c&\xc1'\
             b'\x01\xd1\xf7LQx\xe1u\xc5\x8c\x06\x9a\xecA\xaf\xc9\xb0_\xa7Wp;\x7f7\x89\x8c\xb3\xfdok'\
             b'\xe2\xc6<W\x04:\x95\x92\x99\xab\xddx\xa4"%l?<\xcc\xbci~VL\xdb6\x0b\xf8\x8b\x8e\x90qI'\
             b'\xfb\te(\xb2c\xdcgp\x16\x96\xaa\xe4\xdbV5\xb5L9eG\xcf\xcd\x92\x03\xd8\xc9\x9f\xbb;G'\
             b'\x98\xe3\x9e\x97\x17\x1d+b-\x04P}\x97\r\xeaA\xc1\xa2W\xce\xd7\xb0\x0cG\xc7\xdb\xb7'\
             b'\xb2\xb0\n\xd8\xe8\xa3\x07\xde\xd3\xcc\xfe\x99\x17A\xc1EY\xee\x97X\xc5\ts\x89\xba'\
             b'\xa4\x91G\x14\xa6\xac\xf9\xb8 \xcf\x94\x1e*\xb0\x87\xcc\xa6\x93%\xbfAE\xe1\xcaV\xb2"'\
             b'\xc3F7v\xe0\x13\xfc4\x0b\x04g\xa1Q.\xee\x99\x0e\xb2\xc1\x82,\xb2(\xea\x9aK\xe8G\x14'\
             b'\xc8\xf7$\xa7\x1fF\xb3P]\xbc]\xf3\xa6O4%\xa1\xd7!\xd65\xa1;\xb8)\x1d*\t\x15w-\x1c^fO'\
             b'\xdf\x98\xe6\x8f/\x0b\xd8\xb7+s\xa3,\x97\x9d\xfb\x0e\xf0\xdb\xe3w!B\x16\x1e\x9bO9Oi'\
             b'\x9a\xbfu0;0\x1f0\x07\x06\x05+\x0e\x03\x02\x1a\x04\x14zK;dL\xe5P\xdc\x80\x00\x162!S?3?W3'\
             b'\x7f\x04\x14v\x8c\xa5\xd4\xdb\x8c\xbd\x96\x93\xc0\x1b\xa7\xb7\xb0\x7f\\:\x1aY(\x02\x02\x07\xd0'
# spell-checker:enable


class Test_pyopenssl_signer(unittest.TestCase):

    def test_empty(self):
        with self.assertRaises((KeyError, ValueError)):
            pyopenssl_signer.sign(None, {}, {})

    def test_proper_options_good_key_no_pass(self):
        signer = {
            'key_file_format': 'pkcs12',
            'key_data': TEST_CERT1
        }
        signature = {
            'type': 'bare',
            'encoding': 'binary',
            'hash_alg': 'sha256',

        }
        data = "Data for testing signer".encode()
        pyopenssl_signer.sign(data, signature, signer)

    def test_proper_options_good_key_pass(self):
        signer = {
            'key_file_format': 'pkcs12',
            'key_data': TEST_CERT2,
            'password': 'password'
        }
        signature = {
            'type': 'bare',
            'encoding': 'binary',
            'hash_alg': 'sha256',

        }
        data = "Data for testing signer".encode()
        pyopenssl_signer.sign(data, signature, signer)

    def test_proper_options_bad_key(self):
        # we're going to assume that we're
        with self.assertRaises(ValueError):
            signer = {
                'key_file_format': 'pkcs12',
                'key_data': "hello there"
            }
            signature = {
                'type': 'bare',
                'encoding': 'binary',
                'hash_alg': 'sha256',

            }
            pyopenssl_signer.sign(None, signature, signer)

    def test_invalid_type(self):
        # we're going to assume that we're
        with self.assertRaises(ValueError):
            signature = {
                'type': 'bad_type',
            }
            pyopenssl_signer.sign(None, signature, {})

    def test_invalid_type_options(self):
        # we're going to assume that we're
        with self.assertRaises(ValueError):
            signature = {
                'type': 'bare',
                'type_options': 'not allowed'
            }
            pyopenssl_signer.sign(None, signature, {})
