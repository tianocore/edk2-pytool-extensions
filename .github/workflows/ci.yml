# This workflow runs unit tests against the specified python versions on both
# ubuntu and windows. Additionally, it performs CI against the codebase.
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent

name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  set-python:
    name: Set Python Versions
    
    runs-on: ubuntu-latest
    
    env:
      versions: "['3.11', '3.10', '3.9']" # Keep Python Versions in descending order

    outputs:
      VERSIONS: ${{ steps.set-python.outputs.VERSIONS}}
    
    steps:
      - name: Set Python Versions
        id: set-python
        run: echo "VERSIONS=$versions" >> $GITHUB_OUTPUT

  unit-test:
    name: Unit Tests
    needs: set-python

    runs-on: ${{ matrix.os }}
  
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.set-python.outputs.VERSIONS) }}
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade -r requirements.txt
        pip install -e . 
    
    - name: Run Unit Tests
      run: |
        coverage run --include=edk2toolext\* -m pytest --junitxml=test.junit.xml --html=pytest_report.html --self-contained-html
        

    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v2
      with:
        verbose: false
    
    - uses: actions/upload-artifact@v3
      with:
        name: Artifacts-${{matrix.os}}-${{matrix.python-version}}
        path: |
          pytest_report.html
          test.junit.xml
      if: failure()
  
  ci:
    name: CI Tests
    needs: set-python

    runs-on: ubuntu-latest
    
    env:
      node-version: "19"
      package-src: "edk2toolext"
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ fromJson(needs.set-python.outputs.VERSIONS)[0] }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ fromJson(needs.set-python.outputs.VERSIONS)[0] }}
      
      - name: Set up Node ${{ env.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version}}
      
      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt
          pip install --upgrade -r docs/user/requirements.txt
          pip install -e .

      - name: Install npm dependencies
        run: |
          npm install -g markdownlint-cli@0.32.2
          npm install -g cspell@5.20.0
      
      - name: Run flake8
        if: success() || failure()
        run: flake8 ${{ env.package-src }}
      
      - name: Run markdownlint
        if: success() || failure()
        run: markdownlint "**/*.md"
      
      - name: Run cspell
        if: success() || failure()
        run: cspell -c .cspell.json "**/*.py" "**/*.md"
      
      - name: Run pydocstyle
        if: success() || failure()
        run: pydocstyle ${{ env.package-src }}
      
      - name: Run mkdocs build
        if: success() || failure()
        run: mkdocs build --strict
      
      - name: Run basic dev tests
        if: success() || failure()
        run: python BasicDevTests.py
  