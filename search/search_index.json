{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Our Philosophy \u00b6 Edk2 Pytool Extensions (edk2toolext) is a Tianocore maintained project consisting of command line and other python tools and extensions to simplify and automate the process of building and maintaining an Edk2 based UEFI Firmware code tree. Note If stuart is already integrated into your platform and you're looking for a tutorial on how to install and use stuart, please see Installation , Building , and Core CI Instructions. As UEFI developers, we found the process of building firmware to be extremely rigid and hard to customize without the use of disjointed scripts that would only work under extremely specific circumstances. Due to this, we sought to develop a build system to manage our environment and it's dependencies in a easily configurable, yet extremely reliable and fashion - even across operating systems. As we developed this system, we found ourselves referring to it as 'the environment' because it is just a complex series of system states... But it's more fun to imagine that your code and enviornment is being managed by a helpful pet. This is how Stuart came to be; he is a mouse that lives inside your computer. He takes care of your code and even manages your environment for you. Executing commands such as building a platform is as simple as asking Stuart to do it for you. You can ask him to do many things... see some of them here! . What does Stuart Manage for us \u00b6 Stuart is responsible for many things, so lets take a look at them, and see how you can use it to simplify your building experience! The Environment \u00b6 Stuart uses a self describing environment to read and understand workspaces. The Environment is a collection of path, pypath, build vars, and plugin configurations needed for a build to execute successfully. Settings Manager \u00b6 Stuart's invocables are very smart but they don't know everything. The paradigm we've come up with is to have each invocable provide an abstract Settings Manager class with a 'get' function for each piece of information required invocation. Invoking an edk2 invocable requires that an instance of this class be passed in. This way, the invocable script gets all the information it needs without needing to carry the overhead of command line parsing and loading the class. Settings Manager documentation Scopes \u00b6 Stuart allows many different workflows in the same tree, but needs a way to organize the environment in a way that identifies which component are used by which workflows. Stuart manages this via scopes! Each component can have only one scope, and a workflow designates a combination of scopes, known as ActiveScopes to specify which components to use in a workflow. Plugins \u00b6 Stuart manages many plugins that are executed in specific workflows according to their scope. There are three different types of plugins that exist and can be implemented. UefiBuildPlugin - Used for platform builds, this interface has two hooks: pre-build and post-build. CiBuildPlugin - Our CI process is to run all CiBuildPlugins for each package. Each plugin is essentially a test that will be executed on the given code tree. UefiHelperPlugin - Registers one or more functions that can called by any part of the build system. Plugin Manager Documentation External Dependencies \u00b6 External dependencies (ext_deps) are a great way to manage tools and resources for a codebase. You provide a _ext_dep.json file that indicates the source, type (git, web download, NuGet, etc.), scope, and version. Stuart will manage the rest! When you call stuart_update, Stuart will collect, download, and store the ext_deps pertaining to your scope. Stuart will make sure these ext_deps are available to the rest of the environment. External Dependency Documentation Environment Variables \u00b6 Different then your operating system environment variables, Stuart will also manage variables defined across your FDF, DSC, DEC, ext_deps, build scripts and ensures a variable defined in one is available to all others. This means if a variable is set in the build script, it can then be used in your FDF, DSC, etc (and vise versa). Environment Variable Documentation What can I ask Stuart to do \u00b6 I'm glad you asked! Stuart has a variety of invocable tasks that he hopes will be helpful for a wide variety workflows. stuart_setup \u00b6 Sets up the git repo based on the gitsubmodule file in your repo. It checks to make sure the required repos as provided by settings manager are present. stuart_update \u00b6 Reads ext_dep files in the environment and downloads the appropriate files for the active scopes currently defined. These scopes come from the settings manager. stuart_build \u00b6 Builds a platform. Requires an instance of UefiBuilder to be provided in addition to the settings manager. stuart_ci_setup \u00b6 Intended for CI environment setup. Given a list of required repos from the settings manager, clone each of them in the workspace. stuart_ci_build \u00b6 Given a list of packages, runs all plugins (for active scope) on each package. This includes compiler plugin, which builds each package for the required targets. Stuart will checkpoint the original environment and restore that checkpoint between each test. Living with Stuart \u00b6 .gitignore \u00b6 We have a couple .gitignore items that are important for keeping git from getting its hands on Stuart! *.pyc *_LOG.* *_extdep/","title":"Our Philosophy"},{"location":"#our-philosophy","text":"Edk2 Pytool Extensions (edk2toolext) is a Tianocore maintained project consisting of command line and other python tools and extensions to simplify and automate the process of building and maintaining an Edk2 based UEFI Firmware code tree. Note If stuart is already integrated into your platform and you're looking for a tutorial on how to install and use stuart, please see Installation , Building , and Core CI Instructions. As UEFI developers, we found the process of building firmware to be extremely rigid and hard to customize without the use of disjointed scripts that would only work under extremely specific circumstances. Due to this, we sought to develop a build system to manage our environment and it's dependencies in a easily configurable, yet extremely reliable and fashion - even across operating systems. As we developed this system, we found ourselves referring to it as 'the environment' because it is just a complex series of system states... But it's more fun to imagine that your code and enviornment is being managed by a helpful pet. This is how Stuart came to be; he is a mouse that lives inside your computer. He takes care of your code and even manages your environment for you. Executing commands such as building a platform is as simple as asking Stuart to do it for you. You can ask him to do many things... see some of them here! .","title":"Our Philosophy"},{"location":"#what-does-stuart-manage-for-us","text":"Stuart is responsible for many things, so lets take a look at them, and see how you can use it to simplify your building experience!","title":"What does Stuart Manage for us"},{"location":"#the-environment","text":"Stuart uses a self describing environment to read and understand workspaces. The Environment is a collection of path, pypath, build vars, and plugin configurations needed for a build to execute successfully.","title":"The Environment"},{"location":"#settings-manager","text":"Stuart's invocables are very smart but they don't know everything. The paradigm we've come up with is to have each invocable provide an abstract Settings Manager class with a 'get' function for each piece of information required invocation. Invoking an edk2 invocable requires that an instance of this class be passed in. This way, the invocable script gets all the information it needs without needing to carry the overhead of command line parsing and loading the class. Settings Manager documentation","title":"Settings Manager"},{"location":"#scopes","text":"Stuart allows many different workflows in the same tree, but needs a way to organize the environment in a way that identifies which component are used by which workflows. Stuart manages this via scopes! Each component can have only one scope, and a workflow designates a combination of scopes, known as ActiveScopes to specify which components to use in a workflow.","title":"Scopes"},{"location":"#plugins","text":"Stuart manages many plugins that are executed in specific workflows according to their scope. There are three different types of plugins that exist and can be implemented. UefiBuildPlugin - Used for platform builds, this interface has two hooks: pre-build and post-build. CiBuildPlugin - Our CI process is to run all CiBuildPlugins for each package. Each plugin is essentially a test that will be executed on the given code tree. UefiHelperPlugin - Registers one or more functions that can called by any part of the build system. Plugin Manager Documentation","title":"Plugins"},{"location":"#external-dependencies","text":"External dependencies (ext_deps) are a great way to manage tools and resources for a codebase. You provide a _ext_dep.json file that indicates the source, type (git, web download, NuGet, etc.), scope, and version. Stuart will manage the rest! When you call stuart_update, Stuart will collect, download, and store the ext_deps pertaining to your scope. Stuart will make sure these ext_deps are available to the rest of the environment. External Dependency Documentation","title":"External Dependencies"},{"location":"#environment-variables","text":"Different then your operating system environment variables, Stuart will also manage variables defined across your FDF, DSC, DEC, ext_deps, build scripts and ensures a variable defined in one is available to all others. This means if a variable is set in the build script, it can then be used in your FDF, DSC, etc (and vise versa). Environment Variable Documentation","title":"Environment Variables"},{"location":"#what-can-i-ask-stuart-to-do","text":"I'm glad you asked! Stuart has a variety of invocable tasks that he hopes will be helpful for a wide variety workflows.","title":"What can I ask Stuart to do"},{"location":"#stuart_setup","text":"Sets up the git repo based on the gitsubmodule file in your repo. It checks to make sure the required repos as provided by settings manager are present.","title":"stuart_setup"},{"location":"#stuart_update","text":"Reads ext_dep files in the environment and downloads the appropriate files for the active scopes currently defined. These scopes come from the settings manager.","title":"stuart_update"},{"location":"#stuart_build","text":"Builds a platform. Requires an instance of UefiBuilder to be provided in addition to the settings manager.","title":"stuart_build"},{"location":"#stuart_ci_setup","text":"Intended for CI environment setup. Given a list of required repos from the settings manager, clone each of them in the workspace.","title":"stuart_ci_setup"},{"location":"#stuart_ci_build","text":"Given a list of packages, runs all plugins (for active scope) on each package. This includes compiler plugin, which builds each package for the required targets. Stuart will checkpoint the original environment and restore that checkpoint between each test.","title":"stuart_ci_build"},{"location":"#living-with-stuart","text":"","title":"Living with Stuart"},{"location":"#gitignore","text":"We have a couple .gitignore items that are important for keeping git from getting its hands on Stuart! *.pyc *_LOG.* *_extdep/","title":".gitignore"},{"location":"api/base_abstract_invocable/","text":"base_abstract_invocable \u00b6 The Base abstract Invocable that all other invocables should inherit from. BaseAbstractInvocable \u00b6 The Abstract Invocable. The base abstract invocable that other invocables should inherit from. Provides base functionality to configure logging and the environment. Attributes: Name Type Description log_filename str logfile path plugin_manager plugin_manager . PluginManager the plugin manager helper HelperFunctions container for all helper functions __init__ \u00b6 __init__ () Init the Invocable. ParseCommandLineOptions \u00b6 ParseCommandLineOptions () Parse command line arguments. Tip Required Override in a subclass GetWorkspaceRoot \u00b6 GetWorkspaceRoot () Return the workspace root for initializing the SDE. Tip Required Override in a subclass Returns: Type Description str absolute path to workspace root GetActiveScopes \u00b6 GetActiveScopes () Return tuple containing scopes that should be active for this process. Tip Required Override in a subclass Warning A single scope should end in a comma i.e. (scope,) Returns: Type Description Tuple scopes GetSkippedDirectories \u00b6 GetSkippedDirectories () Return tuple containing workspace-relative directory paths that should be skipped for processing. Tip Optional Override in a subclass Warning A single directory should end with a comma i.e. (dir,) Returns: Type Description Tuple directories GetLoggingLevel \u00b6 GetLoggingLevel ( loggerType ) Get the logging level depending on logger type. Tip Required Override in a subclass Parameters: Name Type Description Default loggerType str type of logger being logged to required Returns: Type Description logging . Level The logging level None No logging of this type loggerType possible values \"base\": lowest logging level supported \"con\": logs to screen \"txt\": logs to plain text file \"md\": logs to markdown file GetLoggingFolderRelativeToRoot \u00b6 GetLoggingFolderRelativeToRoot () Return the path to a directory to hold all log files. Hint Required Override in a subclass Returns: Type Description str path to the directory InputParametersConfiguredCallback \u00b6 InputParametersConfiguredCallback () A Callback once all input parameters are collected. Hint Optional override in subclass GetVerifyCheckRequired \u00b6 GetVerifyCheckRequired () Will call self_describing_environment.VerifyEnvironment if this returns True. Hint Optional override in a subclass Returns: Type Description bool whether verify check is required or not GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Get the logging File name to provide file name customization. Hint Required Override this in a subclass Parameters: Name Type Description Default loggerType obj values can be base, con, txt, md. See hint below required Returns: Type Description str filename None No logging file should be created loggerType possible values \"base\": lowest logging level supported \"con\": logs to screen \"txt\": logs to plain text file \"md\": logs to markdown file Go \u00b6 Go () Main function to run. Main function to run after the environment and logging has been configured. Tip Required Override in a subclass ConfigureLogging \u00b6 ConfigureLogging () Sets up the logging. Tip Optional override in a subclass if new behavior is needed Invoke \u00b6 Invoke () Main process function to configure logging and the environment. Danger Do not override this method","title":"Base abstract invocable"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable","text":"The Base abstract Invocable that all other invocables should inherit from.","title":"base_abstract_invocable"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable","text":"The Abstract Invocable. The base abstract invocable that other invocables should inherit from. Provides base functionality to configure logging and the environment. Attributes: Name Type Description log_filename str logfile path plugin_manager plugin_manager . PluginManager the plugin manager helper HelperFunctions container for all helper functions","title":"BaseAbstractInvocable"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.__init__","text":"__init__ () Init the Invocable.","title":"__init__()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.ParseCommandLineOptions","text":"ParseCommandLineOptions () Parse command line arguments. Tip Required Override in a subclass","title":"ParseCommandLineOptions()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetWorkspaceRoot","text":"GetWorkspaceRoot () Return the workspace root for initializing the SDE. Tip Required Override in a subclass Returns: Type Description str absolute path to workspace root","title":"GetWorkspaceRoot()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetActiveScopes","text":"GetActiveScopes () Return tuple containing scopes that should be active for this process. Tip Required Override in a subclass Warning A single scope should end in a comma i.e. (scope,) Returns: Type Description Tuple scopes","title":"GetActiveScopes()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetSkippedDirectories","text":"GetSkippedDirectories () Return tuple containing workspace-relative directory paths that should be skipped for processing. Tip Optional Override in a subclass Warning A single directory should end with a comma i.e. (dir,) Returns: Type Description Tuple directories","title":"GetSkippedDirectories()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetLoggingLevel","text":"GetLoggingLevel ( loggerType ) Get the logging level depending on logger type. Tip Required Override in a subclass Parameters: Name Type Description Default loggerType str type of logger being logged to required Returns: Type Description logging . Level The logging level None No logging of this type loggerType possible values \"base\": lowest logging level supported \"con\": logs to screen \"txt\": logs to plain text file \"md\": logs to markdown file","title":"GetLoggingLevel()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetLoggingFolderRelativeToRoot","text":"GetLoggingFolderRelativeToRoot () Return the path to a directory to hold all log files. Hint Required Override in a subclass Returns: Type Description str path to the directory","title":"GetLoggingFolderRelativeToRoot()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.InputParametersConfiguredCallback","text":"InputParametersConfiguredCallback () A Callback once all input parameters are collected. Hint Optional override in subclass","title":"InputParametersConfiguredCallback()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetVerifyCheckRequired","text":"GetVerifyCheckRequired () Will call self_describing_environment.VerifyEnvironment if this returns True. Hint Optional override in a subclass Returns: Type Description bool whether verify check is required or not","title":"GetVerifyCheckRequired()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Get the logging File name to provide file name customization. Hint Required Override this in a subclass Parameters: Name Type Description Default loggerType obj values can be base, con, txt, md. See hint below required Returns: Type Description str filename None No logging file should be created loggerType possible values \"base\": lowest logging level supported \"con\": logs to screen \"txt\": logs to plain text file \"md\": logs to markdown file","title":"GetLoggingFileName()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.Go","text":"Go () Main function to run. Main function to run after the environment and logging has been configured. Tip Required Override in a subclass","title":"Go()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.ConfigureLogging","text":"ConfigureLogging () Sets up the logging. Tip Optional override in a subclass if new behavior is needed","title":"ConfigureLogging()"},{"location":"api/base_abstract_invocable/#edk2toolext.base_abstract_invocable.BaseAbstractInvocable.Invoke","text":"Invoke () Main process function to configure logging and the environment. Danger Do not override this method","title":"Invoke()"},{"location":"api/edk2_git/","text":"edk2_git \u00b6 This module contains code that supports simple git operations. This should not be used as an extensive git lib, but as what is needed for CI/CD builds. ObjectDict \u00b6 A class representing an ObjectDict. __init__ \u00b6 __init__ () Inits an empty ObjectDict. __setattr__ \u00b6 __setattr__ ( key , value ) Sets an attribute. __str__ \u00b6 __str__ () String representation of ObjectDict. set \u00b6 set ( key , value ) Sets a key value pair. Repo \u00b6 A class representing a git repo. __init__ \u00b6 __init__ ( path = None ) Inits an empty Repo object. submodule \u00b6 submodule ( command , args ) Performs a git command on a submodule. fetch \u00b6 fetch ( remote = 'origin' , branch = None ) Performs a git fetch. pull \u00b6 pull () Performs a git pull. checkout \u00b6 checkout ( branch = None , commit = None ) Checks out a branch or commit. clone_from classmethod \u00b6 clone_from ( url , to_path , branch = None , shallow = False , reference = None , kwargs , ) Clones a repository.","title":"Edk2 git"},{"location":"api/edk2_git/#edk2toolext.edk2_git","text":"This module contains code that supports simple git operations. This should not be used as an extensive git lib, but as what is needed for CI/CD builds.","title":"edk2_git"},{"location":"api/edk2_git/#edk2toolext.edk2_git.ObjectDict","text":"A class representing an ObjectDict.","title":"ObjectDict"},{"location":"api/edk2_git/#edk2toolext.edk2_git.ObjectDict.__init__","text":"__init__ () Inits an empty ObjectDict.","title":"__init__()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.ObjectDict.__setattr__","text":"__setattr__ ( key , value ) Sets an attribute.","title":"__setattr__()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.ObjectDict.__str__","text":"__str__ () String representation of ObjectDict.","title":"__str__()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.ObjectDict.set","text":"set ( key , value ) Sets a key value pair.","title":"set()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo","text":"A class representing a git repo.","title":"Repo"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo.__init__","text":"__init__ ( path = None ) Inits an empty Repo object.","title":"__init__()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo.submodule","text":"submodule ( command , args ) Performs a git command on a submodule.","title":"submodule()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo.fetch","text":"fetch ( remote = 'origin' , branch = None ) Performs a git fetch.","title":"fetch()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo.pull","text":"pull () Performs a git pull.","title":"pull()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo.checkout","text":"checkout ( branch = None , commit = None ) Checks out a branch or commit.","title":"checkout()"},{"location":"api/edk2_git/#edk2toolext.edk2_git.Repo.clone_from","text":"clone_from ( url , to_path , branch = None , shallow = False , reference = None , kwargs , ) Clones a repository.","title":"clone_from()"},{"location":"api/edk2_invocable/","text":"edk2_invocable \u00b6 Edk2 Invocable Interface to be overriden in a subclass. Provides two main classes, the Edk2InvocableSettingsInterface and the Edk2Invocable, which should be used as subclasses to create invocables that perform tasks associated with the EDK2 build system. Any Edk2Invocable subclass should be platform agnostic and work for any platform. Platform specific data is provided via the Edk2InvocableSettingsInterface. Edk2InvocableSettingsInterface \u00b6 Settings APIs to support an Edk2Invocable. This is an interface definition only to show which functions are required to be implemented and can be implemented in a settings manager. Example of Overriding Edk2InvocableSettingsInterface import os import logging import argparse from typing import Iterable , Tuple from edk2toolext.edk2_invocable import Edk2InvocableSettingsInterface class NewInvocableSettingsManager ( Edk2InvocableSettingsInterface ): def GetWorkspaceRoot ( self ) -> str : return os . path . abspath ( __file__ ) def GetPackagesPath ( self ) -> Iterable [ os . PathLike ] return [ \"C:/src/MU_BASECORE\" , \"Common/MU\" ] def GetActiveScopes ( self ) -> Tuple [ str ]: return ( \"edk2-build\" , \"pipbuild-win\" ) def GetLoggingLevel ( self , loggerType : str ) -> str : if loggerType == 'txt' : return logging . WARNING else : return logging . INFO def AddCommandLineOptions ( self , parserObj : object ) -> None : parserObj . add_argument ( '-a' , \"--arch\" , dest = \"build_arch\" , type = str , default = \"IA32,X64\" ) def RetrieveCommandLineOptions ( self , args : object ) -> None : self . arch = args . build_arch def GetSkippedDirectories ( self ) -> Tuple [ str ]: return ( \"Downloads/Extra\" ) Warning This interface should not be subclassed directly unless you are creating a new invocable Other invocables subclass from this interface, so you have the ability to call the functions in this class as a part of those invocable settings managers. GetWorkspaceRoot \u00b6 GetWorkspaceRoot () -> str Return the workspace root for initializing the SDE. Tip Required Override in a subclass The absolute path to the root of the workspace Returns: Type Description str path to workspace root GetPackagesPath \u00b6 GetPackagesPath () -> Iterable [ os . PathLike ] Provides an iterable of paths should should be mapped as edk2 PackagePaths. Tip Optional Override in a subclass Returns: Type Description Iterable [ os . PathLike ] paths GetActiveScopes \u00b6 GetActiveScopes () -> Tuple [ str ] Provides scopes that should be active for this process. Tip Optional Override in a subclass Returns: Type Description Tuple [ str ] scopes GetLoggingLevel \u00b6 GetLoggingLevel ( loggerType : str ) -> str Get the logging level depending on logger type. Tip Optional Override in a subclass Returns: Type Description Logging . Level The logging level loggerType possible values \"base\": lowest logging level supported \"con\": logs to screen \"txt\": logs to plain text file \"md\": logs to markdown file AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj : object ) -> None Add command line options to the argparser. Tip Optional override in a subclass Parameters: Name Type Description Default parserObj object Argparser object. required RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args : object ) -> None Retrieve Command line options from the argparser. Tip Optional override in a subclass Parameters: Name Type Description Default args object argparser args namespace containing command line options required GetSkippedDirectories \u00b6 GetSkippedDirectories () -> Tuple [ str ] Returns a tuple containing workspace-relative directories to be skipped. Tip Optional override in a subclass Returns: Type Description Tuple [ str ] directories to be skipped. Edk2Invocable \u00b6 Base class for Edk2 based invocables. Edk2 means it has common features like workspace, packagespath, scopes, and other name value pairs Attributes: Name Type Description PlatformSettings Edk2InvocableSettingsInterface A settings class PlatformModule object The platform module Verbose bool CLI Argument to determine whether or not to have verbose Tip Checkout BaseAbstractInvocable Attributes to find any additional attributes that might exist. Warning This Invocable should only be subclassed if creating a new invocable collect_python_pip_info classmethod \u00b6 collect_python_pip_info () Class method to collect all pip packages names and versions. Reports them to the global version_aggregator as well as print them to the screen. GetWorkspaceRoot \u00b6 GetWorkspaceRoot () -> os . PathLike Returns the absolute path to the workspace root. Note Workspace Root is platform specific and thus provided by the PlatformSettings Returns: Type Description os . PathLike absolute path to workspace root GetPackagesPath \u00b6 GetPackagesPath () -> Iterable [ os . PathLike ] Returns an iterable of packages path. Note PackagesPath is platform specific and thus provided by the PlatformSettings Returns: Type Description Iterable [ os . PathLike ] Packages path GetActiveScopes \u00b6 GetActiveScopes () -> Tuple [ str ] Returns an iterable of Active scopes. Note Scopes are platform specific and thus provided by the PlatformSettings This function adds an os specific scope in addition to scopes provided by SettingsManager Returns: Type Description Tuple [ str ] active scopes GetLoggingLevel \u00b6 GetLoggingLevel ( loggerType ) Get the logging level for a given logger type. Note Logging Level is platform specific and thus provided by the PlatformSettings Returns: Type Description logging . Level logging level AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj ) Add command line options to the argparser. Note Optional Override to add functionality RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. Note Optional Override to add functionality GetSkippedDirectories \u00b6 GetSkippedDirectories () Returns a Tuple containing workspace-relative directories that should be skipped. Tip Override in a subclass to add invocable specific directories to skip Note Skipped Directories are platform specific and thus provided by the PlatformSettings Returns: Type Description Tuple [ str ] skipped directories as relative paths GetSettingsClass \u00b6 GetSettingsClass () The required settings manager for the invocable. Note Required override to define Edk2InvocableSettingsInterface subclass specific to the invocable Returns: Type Description Edk2InvocableSettingsInterface Subclass of Edk2InvocableSettingsInterface GetLoggingFolderRelativeToRoot \u00b6 GetLoggingFolderRelativeToRoot () Directory containing all logging files. ParseCommandLineOptions \u00b6 ParseCommandLineOptions () Parses command line options. Sets up argparser specifically to get PlatformSettingsManager instance. Then sets up second argparser and passes it to child class and to PlatformSettingsManager. Finally, parses all known args and then reads the unknown args in to build vars.","title":"Edk2 invocable"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable","text":"Edk2 Invocable Interface to be overriden in a subclass. Provides two main classes, the Edk2InvocableSettingsInterface and the Edk2Invocable, which should be used as subclasses to create invocables that perform tasks associated with the EDK2 build system. Any Edk2Invocable subclass should be platform agnostic and work for any platform. Platform specific data is provided via the Edk2InvocableSettingsInterface.","title":"edk2_invocable"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface","text":"Settings APIs to support an Edk2Invocable. This is an interface definition only to show which functions are required to be implemented and can be implemented in a settings manager. Example of Overriding Edk2InvocableSettingsInterface import os import logging import argparse from typing import Iterable , Tuple from edk2toolext.edk2_invocable import Edk2InvocableSettingsInterface class NewInvocableSettingsManager ( Edk2InvocableSettingsInterface ): def GetWorkspaceRoot ( self ) -> str : return os . path . abspath ( __file__ ) def GetPackagesPath ( self ) -> Iterable [ os . PathLike ] return [ \"C:/src/MU_BASECORE\" , \"Common/MU\" ] def GetActiveScopes ( self ) -> Tuple [ str ]: return ( \"edk2-build\" , \"pipbuild-win\" ) def GetLoggingLevel ( self , loggerType : str ) -> str : if loggerType == 'txt' : return logging . WARNING else : return logging . INFO def AddCommandLineOptions ( self , parserObj : object ) -> None : parserObj . add_argument ( '-a' , \"--arch\" , dest = \"build_arch\" , type = str , default = \"IA32,X64\" ) def RetrieveCommandLineOptions ( self , args : object ) -> None : self . arch = args . build_arch def GetSkippedDirectories ( self ) -> Tuple [ str ]: return ( \"Downloads/Extra\" ) Warning This interface should not be subclassed directly unless you are creating a new invocable Other invocables subclass from this interface, so you have the ability to call the functions in this class as a part of those invocable settings managers.","title":"Edk2InvocableSettingsInterface"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.GetWorkspaceRoot","text":"GetWorkspaceRoot () -> str Return the workspace root for initializing the SDE. Tip Required Override in a subclass The absolute path to the root of the workspace Returns: Type Description str path to workspace root","title":"GetWorkspaceRoot()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.GetPackagesPath","text":"GetPackagesPath () -> Iterable [ os . PathLike ] Provides an iterable of paths should should be mapped as edk2 PackagePaths. Tip Optional Override in a subclass Returns: Type Description Iterable [ os . PathLike ] paths","title":"GetPackagesPath()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.GetActiveScopes","text":"GetActiveScopes () -> Tuple [ str ] Provides scopes that should be active for this process. Tip Optional Override in a subclass Returns: Type Description Tuple [ str ] scopes","title":"GetActiveScopes()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.GetLoggingLevel","text":"GetLoggingLevel ( loggerType : str ) -> str Get the logging level depending on logger type. Tip Optional Override in a subclass Returns: Type Description Logging . Level The logging level loggerType possible values \"base\": lowest logging level supported \"con\": logs to screen \"txt\": logs to plain text file \"md\": logs to markdown file","title":"GetLoggingLevel()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj : object ) -> None Add command line options to the argparser. Tip Optional override in a subclass Parameters: Name Type Description Default parserObj object Argparser object. required","title":"AddCommandLineOptions()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args : object ) -> None Retrieve Command line options from the argparser. Tip Optional override in a subclass Parameters: Name Type Description Default args object argparser args namespace containing command line options required","title":"RetrieveCommandLineOptions()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2InvocableSettingsInterface.GetSkippedDirectories","text":"GetSkippedDirectories () -> Tuple [ str ] Returns a tuple containing workspace-relative directories to be skipped. Tip Optional override in a subclass Returns: Type Description Tuple [ str ] directories to be skipped.","title":"GetSkippedDirectories()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable","text":"Base class for Edk2 based invocables. Edk2 means it has common features like workspace, packagespath, scopes, and other name value pairs Attributes: Name Type Description PlatformSettings Edk2InvocableSettingsInterface A settings class PlatformModule object The platform module Verbose bool CLI Argument to determine whether or not to have verbose Tip Checkout BaseAbstractInvocable Attributes to find any additional attributes that might exist. Warning This Invocable should only be subclassed if creating a new invocable","title":"Edk2Invocable"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.collect_python_pip_info","text":"collect_python_pip_info () Class method to collect all pip packages names and versions. Reports them to the global version_aggregator as well as print them to the screen.","title":"collect_python_pip_info()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetWorkspaceRoot","text":"GetWorkspaceRoot () -> os . PathLike Returns the absolute path to the workspace root. Note Workspace Root is platform specific and thus provided by the PlatformSettings Returns: Type Description os . PathLike absolute path to workspace root","title":"GetWorkspaceRoot()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetPackagesPath","text":"GetPackagesPath () -> Iterable [ os . PathLike ] Returns an iterable of packages path. Note PackagesPath is platform specific and thus provided by the PlatformSettings Returns: Type Description Iterable [ os . PathLike ] Packages path","title":"GetPackagesPath()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetActiveScopes","text":"GetActiveScopes () -> Tuple [ str ] Returns an iterable of Active scopes. Note Scopes are platform specific and thus provided by the PlatformSettings This function adds an os specific scope in addition to scopes provided by SettingsManager Returns: Type Description Tuple [ str ] active scopes","title":"GetActiveScopes()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetLoggingLevel","text":"GetLoggingLevel ( loggerType ) Get the logging level for a given logger type. Note Logging Level is platform specific and thus provided by the PlatformSettings Returns: Type Description logging . Level logging level","title":"GetLoggingLevel()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj ) Add command line options to the argparser. Note Optional Override to add functionality","title":"AddCommandLineOptions()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. Note Optional Override to add functionality","title":"RetrieveCommandLineOptions()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetSkippedDirectories","text":"GetSkippedDirectories () Returns a Tuple containing workspace-relative directories that should be skipped. Tip Override in a subclass to add invocable specific directories to skip Note Skipped Directories are platform specific and thus provided by the PlatformSettings Returns: Type Description Tuple [ str ] skipped directories as relative paths","title":"GetSkippedDirectories()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetSettingsClass","text":"GetSettingsClass () The required settings manager for the invocable. Note Required override to define Edk2InvocableSettingsInterface subclass specific to the invocable Returns: Type Description Edk2InvocableSettingsInterface Subclass of Edk2InvocableSettingsInterface","title":"GetSettingsClass()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.GetLoggingFolderRelativeToRoot","text":"GetLoggingFolderRelativeToRoot () Directory containing all logging files.","title":"GetLoggingFolderRelativeToRoot()"},{"location":"api/edk2_invocable/#edk2toolext.edk2_invocable.Edk2Invocable.ParseCommandLineOptions","text":"ParseCommandLineOptions () Parses command line options. Sets up argparser specifically to get PlatformSettingsManager instance. Then sets up second argparser and passes it to child class and to PlatformSettingsManager. Finally, parses all known args and then reads the unknown args in to build vars.","title":"ParseCommandLineOptions()"},{"location":"api/edk2_logging/","text":"edk2_logging \u00b6 Handles basic logging config for builds. Splits logs into a master log and per package log. Edk2LogFilter \u00b6 Subclass of logging.Filter. __init__ \u00b6 __init__ () Inits a filter. setVerbose \u00b6 setVerbose ( isVerbose = True ) Sets the filter verbosity. addSection \u00b6 addSection ( section ) Adds a section to the filter. filter \u00b6 filter ( record ) Adds a filter for a record if it doesn't already exist. clean_build_logs \u00b6 clean_build_logs ( ws , sub_directory = None ) Removes all build logs. get_section_level \u00b6 get_section_level () Returns SECTION. get_subsection_level \u00b6 get_subsection_level () Returns SUB_SECTION. get_progress_level \u00b6 get_progress_level () Returns PROGRESS. get_edk2_filter \u00b6 get_edk2_filter ( verbose = False ) Returns an edk2 filter. log_progress \u00b6 log_progress ( message ) Creates a logging message at the progress section level. setup_section_level \u00b6 setup_section_level () Sets up different sections to log to. setup_txt_logger \u00b6 setup_txt_logger ( directory , filename = \"log\" , logging_level = logging . INFO , formatter = None , logging_namespace = \"\" , isVerbose = False , ) Configures a text logger. setup_markdown_logger \u00b6 setup_markdown_logger ( directory , filename = \"log\" , logging_level = logging . INFO , formatter = None , logging_namespace = \"\" , isVerbose = False , ) Configures a markdown logger. setup_console_logging \u00b6 setup_console_logging ( logging_level = logging . INFO , formatter = None , logging_namespace = \"\" , isVerbose = False , use_azure_colors = False , use_color = True , ) Configures a console logger. stop_logging \u00b6 stop_logging ( loghandle , logging_namespace = '' ) Stops logging on a log handle. create_output_stream \u00b6 create_output_stream ( level = logging . INFO , logging_namespace = \"\" ) Creates an output stream to log to. remove_output_stream \u00b6 remove_output_stream ( handler , logging_namespace = '' ) Removes an output stream to log to. scan_compiler_output \u00b6 scan_compiler_output ( output_stream ) Scans the compiler for errors and warnings. Returns: Type Description list [ Tuple [ logging . Type , str ]] list of tuples containing the type of issue (Error, warning) and the description.","title":"Edk2 logging"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging","text":"Handles basic logging config for builds. Splits logs into a master log and per package log.","title":"edk2_logging"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.Edk2LogFilter","text":"Subclass of logging.Filter.","title":"Edk2LogFilter"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.Edk2LogFilter.__init__","text":"__init__ () Inits a filter.","title":"__init__()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.Edk2LogFilter.setVerbose","text":"setVerbose ( isVerbose = True ) Sets the filter verbosity.","title":"setVerbose()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.Edk2LogFilter.addSection","text":"addSection ( section ) Adds a section to the filter.","title":"addSection()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.Edk2LogFilter.filter","text":"filter ( record ) Adds a filter for a record if it doesn't already exist.","title":"filter()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.clean_build_logs","text":"clean_build_logs ( ws , sub_directory = None ) Removes all build logs.","title":"clean_build_logs()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.get_section_level","text":"get_section_level () Returns SECTION.","title":"get_section_level()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.get_subsection_level","text":"get_subsection_level () Returns SUB_SECTION.","title":"get_subsection_level()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.get_progress_level","text":"get_progress_level () Returns PROGRESS.","title":"get_progress_level()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.get_edk2_filter","text":"get_edk2_filter ( verbose = False ) Returns an edk2 filter.","title":"get_edk2_filter()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.log_progress","text":"log_progress ( message ) Creates a logging message at the progress section level.","title":"log_progress()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.setup_section_level","text":"setup_section_level () Sets up different sections to log to.","title":"setup_section_level()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.setup_txt_logger","text":"setup_txt_logger ( directory , filename = \"log\" , logging_level = logging . INFO , formatter = None , logging_namespace = \"\" , isVerbose = False , ) Configures a text logger.","title":"setup_txt_logger()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.setup_markdown_logger","text":"setup_markdown_logger ( directory , filename = \"log\" , logging_level = logging . INFO , formatter = None , logging_namespace = \"\" , isVerbose = False , ) Configures a markdown logger.","title":"setup_markdown_logger()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.setup_console_logging","text":"setup_console_logging ( logging_level = logging . INFO , formatter = None , logging_namespace = \"\" , isVerbose = False , use_azure_colors = False , use_color = True , ) Configures a console logger.","title":"setup_console_logging()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.stop_logging","text":"stop_logging ( loghandle , logging_namespace = '' ) Stops logging on a log handle.","title":"stop_logging()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.create_output_stream","text":"create_output_stream ( level = logging . INFO , logging_namespace = \"\" ) Creates an output stream to log to.","title":"create_output_stream()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.remove_output_stream","text":"remove_output_stream ( handler , logging_namespace = '' ) Removes an output stream to log to.","title":"remove_output_stream()"},{"location":"api/edk2_logging/#edk2toolext.edk2_logging.scan_compiler_output","text":"scan_compiler_output ( output_stream ) Scans the compiler for errors and warnings. Returns: Type Description list [ Tuple [ logging . Type , str ]] list of tuples containing the type of issue (Error, warning) and the description.","title":"scan_compiler_output()"},{"location":"api/environment/conf_mgmt/","text":"conf_mgmt \u00b6 Handle Edk2 Conf Management. Customized for edk2-pytool-extensions based build and support dynamic Visual studio support 2017++ ConfMgmt \u00b6 Handles Edk2 Conf Management. __init__ \u00b6 __init__ () Init an empty ConfMgmt object. populate_conf_dir \u00b6 populate_conf_dir ( conf_folder_path : str , override_conf : bool , conf_template_source_list : list , ) -> None Compare the conf dir files to the template files. Copy files if they are not present in the conf dir or the override parameter is set. Parameters: Name Type Description Default conf_folder_path str folder path to output conf location (absolute path) required override_conf bool boolean to indicate if templates files should replace conf files regardless of existence or version. required conf_template_source_list list priority list of folder path that might contain a \"Conf\" older with template files to use required","title":"Conf mgmt"},{"location":"api/environment/conf_mgmt/#edk2toolext.environment.conf_mgmt","text":"Handle Edk2 Conf Management. Customized for edk2-pytool-extensions based build and support dynamic Visual studio support 2017++","title":"conf_mgmt"},{"location":"api/environment/conf_mgmt/#edk2toolext.environment.conf_mgmt.ConfMgmt","text":"Handles Edk2 Conf Management.","title":"ConfMgmt"},{"location":"api/environment/conf_mgmt/#edk2toolext.environment.conf_mgmt.ConfMgmt.__init__","text":"__init__ () Init an empty ConfMgmt object.","title":"__init__()"},{"location":"api/environment/conf_mgmt/#edk2toolext.environment.conf_mgmt.ConfMgmt.populate_conf_dir","text":"populate_conf_dir ( conf_folder_path : str , override_conf : bool , conf_template_source_list : list , ) -> None Compare the conf dir files to the template files. Copy files if they are not present in the conf dir or the override parameter is set. Parameters: Name Type Description Default conf_folder_path str folder path to output conf location (absolute path) required override_conf bool boolean to indicate if templates files should replace conf files regardless of existence or version. required conf_template_source_list list priority list of folder path that might contain a \"Conf\" older with template files to use required","title":"populate_conf_dir()"},{"location":"api/environment/environment_descriptor_files/","text":"environment_descriptor_files \u00b6 This module contains code for working with the JSON environment descriptor files. It can parse the files, validate them, and return objects representing their contents. PathEnv \u00b6 Path env object that is created from the descriptor file. Attributes: Name Type Description scope string scope the path env is associated with flags List [ str ] flags associated with the path env var_name string ENV var to set with the object descriptor_location string location of the PathEnv published_path string location of the PathEnv __init__ \u00b6 __init__ ( descriptor ) Init with the descriptor information. DescriptorFile \u00b6 The base class for the different types of descriptor files. Attributes: Name Type Description file_path str descriptor file path descriptor_contents Dict Contents of the descriptor file __init__ \u00b6 __init__ ( file_path ) Loads the contents of the descriptor file and validates. Parameters: Name Type Description Default file_path str path to descriptor file required Raises: Type Description ValueError Missing specified value from descriptor file sanitize_string \u00b6 sanitize_string ( s ) Clean up a string \"value\" in the descriptor file. PathEnvDescriptor \u00b6 Descriptor File for a PATH ENV. __init__ \u00b6 __init__ ( file_path ) Inits the descriptor as a PathEnvDescriptor from the provided path. Loads the contents of the filepath into descriptor_contents Parameters: Name Type Description Default file_path str path to the yaml descriptor file required ExternDepDescriptor \u00b6 Descriptor File for a External Dependency. Attributes: Name Type Description descriptor_contents Dict Contents of the Descriptor yaml file file_path PathLike path to the descriptor file __init__ \u00b6 __init__ ( file_path ) Inits the descriptor as a ExternDepDescriptor from the provided path. Loads the contents of the filepath into descriptor_contents Parameters: Name Type Description Default file_path str path to the yaml descriptor file required PluginDescriptor \u00b6 Descriptor File for a Plugin. Attributes: Name Type Description descriptor_contents Dict Contents of the Descriptor yaml file file_path PathLike path to the descriptor file __init__ \u00b6 __init__ ( file_path ) Inits the descriptor as a PluginDescriptor from the provided path. Loads the contents of the filepath into descriptor_contents Parameters: Name Type Description Default file_path str path to the yaml descriptor file required","title":"Environment descriptor files"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files","text":"This module contains code for working with the JSON environment descriptor files. It can parse the files, validate them, and return objects representing their contents.","title":"environment_descriptor_files"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.PathEnv","text":"Path env object that is created from the descriptor file. Attributes: Name Type Description scope string scope the path env is associated with flags List [ str ] flags associated with the path env var_name string ENV var to set with the object descriptor_location string location of the PathEnv published_path string location of the PathEnv","title":"PathEnv"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.PathEnv.__init__","text":"__init__ ( descriptor ) Init with the descriptor information.","title":"__init__()"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.DescriptorFile","text":"The base class for the different types of descriptor files. Attributes: Name Type Description file_path str descriptor file path descriptor_contents Dict Contents of the descriptor file","title":"DescriptorFile"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.DescriptorFile.__init__","text":"__init__ ( file_path ) Loads the contents of the descriptor file and validates. Parameters: Name Type Description Default file_path str path to descriptor file required Raises: Type Description ValueError Missing specified value from descriptor file","title":"__init__()"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.DescriptorFile.sanitize_string","text":"sanitize_string ( s ) Clean up a string \"value\" in the descriptor file.","title":"sanitize_string()"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.PathEnvDescriptor","text":"Descriptor File for a PATH ENV.","title":"PathEnvDescriptor"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.PathEnvDescriptor.__init__","text":"__init__ ( file_path ) Inits the descriptor as a PathEnvDescriptor from the provided path. Loads the contents of the filepath into descriptor_contents Parameters: Name Type Description Default file_path str path to the yaml descriptor file required","title":"__init__()"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.ExternDepDescriptor","text":"Descriptor File for a External Dependency. Attributes: Name Type Description descriptor_contents Dict Contents of the Descriptor yaml file file_path PathLike path to the descriptor file","title":"ExternDepDescriptor"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.ExternDepDescriptor.__init__","text":"__init__ ( file_path ) Inits the descriptor as a ExternDepDescriptor from the provided path. Loads the contents of the filepath into descriptor_contents Parameters: Name Type Description Default file_path str path to the yaml descriptor file required","title":"__init__()"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.PluginDescriptor","text":"Descriptor File for a Plugin. Attributes: Name Type Description descriptor_contents Dict Contents of the Descriptor yaml file file_path PathLike path to the descriptor file","title":"PluginDescriptor"},{"location":"api/environment/environment_descriptor_files/#edk2toolext.environment.environment_descriptor_files.PluginDescriptor.__init__","text":"__init__ ( file_path ) Inits the descriptor as a PluginDescriptor from the provided path. Loads the contents of the filepath into descriptor_contents Parameters: Name Type Description Default file_path str path to the yaml descriptor file required","title":"__init__()"},{"location":"api/environment/external_dependency/","text":"external_dependency \u00b6 This module contains helper object for manipulating external dependencies. These manipulations include retrieving, validating, and cleaning external dependencies for the build environment. ExternalDependency \u00b6 Baseclass to allow downloading external dependencies during the update phase. Specific External dependency types (git, nuget, etc.) are subclassed from this class. Additional external dependency types may be created. Attributes: Name Type Description scope str Determines if descriptor is included on a particular build. type str Type of ext_dep. name str Name of ext_dep, used to name the folder the ext_dep will be unpacked in to source str Source to query for ext_dep. version str Version string to keep track of what version is currently installed. flags list [ str ] Flags dictating what actions should be taken once this dependency is resolved More info: (docs/feature_extdep/) var_name str Used with set_*_var flag. Determines name of var to be set. Tip The attributes are what must be described in the ext_dep yaml file! __init__ \u00b6 __init__ ( descriptor ) Inits a web dependency based off the provided descriptor. set_global_cache_path \u00b6 set_global_cache_path ( global_cache_path ) Sets the global cache path to locate already downloaded dependencies. Parameters: Name Type Description Default global_cache_path str directory of the global cache required compute_published_path \u00b6 compute_published_path () Determines the published path. clean \u00b6 clean () Removes the local directory for the external dependency. determine_cache_path \u00b6 determine_cache_path () Determines the cache path is global_cache_path is not none. fetch \u00b6 fetch () Fetches the dependency using internal state from the init. copy_from_global_cache \u00b6 copy_from_global_cache ( dest_path : str ) Copies the dependency from global cache if present. Parameters: Name Type Description Default dest_path str path to copy to required copy_to_global_cache \u00b6 copy_to_global_cache ( source_path : str ) Copies the dependency to global cache if present. Parameters: Name Type Description Default source_path str source to copy into global cache. required verify \u00b6 verify () Verifies the dependency was successfully downloaded. report_version \u00b6 report_version () Reports the version of the external dependency. update_state_file \u00b6 update_state_file () Updates the file representing the state of the dependency. ExtDepFactory \u00b6 ExtDepFactory ( descriptor ) External Dependency Factory capable of generating each type of dependency. Note Ensure all external dependencies are imported in this class to avoid errors.","title":"External dependency"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency","text":"This module contains helper object for manipulating external dependencies. These manipulations include retrieving, validating, and cleaning external dependencies for the build environment.","title":"external_dependency"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency","text":"Baseclass to allow downloading external dependencies during the update phase. Specific External dependency types (git, nuget, etc.) are subclassed from this class. Additional external dependency types may be created. Attributes: Name Type Description scope str Determines if descriptor is included on a particular build. type str Type of ext_dep. name str Name of ext_dep, used to name the folder the ext_dep will be unpacked in to source str Source to query for ext_dep. version str Version string to keep track of what version is currently installed. flags list [ str ] Flags dictating what actions should be taken once this dependency is resolved More info: (docs/feature_extdep/) var_name str Used with set_*_var flag. Determines name of var to be set. Tip The attributes are what must be described in the ext_dep yaml file!","title":"ExternalDependency"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.__init__","text":"__init__ ( descriptor ) Inits a web dependency based off the provided descriptor.","title":"__init__()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.set_global_cache_path","text":"set_global_cache_path ( global_cache_path ) Sets the global cache path to locate already downloaded dependencies. Parameters: Name Type Description Default global_cache_path str directory of the global cache required","title":"set_global_cache_path()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.compute_published_path","text":"compute_published_path () Determines the published path.","title":"compute_published_path()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.clean","text":"clean () Removes the local directory for the external dependency.","title":"clean()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.determine_cache_path","text":"determine_cache_path () Determines the cache path is global_cache_path is not none.","title":"determine_cache_path()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.fetch","text":"fetch () Fetches the dependency using internal state from the init.","title":"fetch()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.copy_from_global_cache","text":"copy_from_global_cache ( dest_path : str ) Copies the dependency from global cache if present. Parameters: Name Type Description Default dest_path str path to copy to required","title":"copy_from_global_cache()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.copy_to_global_cache","text":"copy_to_global_cache ( source_path : str ) Copies the dependency to global cache if present. Parameters: Name Type Description Default source_path str source to copy into global cache. required","title":"copy_to_global_cache()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.verify","text":"verify () Verifies the dependency was successfully downloaded.","title":"verify()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.report_version","text":"report_version () Reports the version of the external dependency.","title":"report_version()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExternalDependency.update_state_file","text":"update_state_file () Updates the file representing the state of the dependency.","title":"update_state_file()"},{"location":"api/environment/external_dependency/#edk2toolext.environment.external_dependency.ExtDepFactory","text":"ExtDepFactory ( descriptor ) External Dependency Factory capable of generating each type of dependency. Note Ensure all external dependencies are imported in this class to avoid errors.","title":"ExtDepFactory()"},{"location":"api/environment/multiple_workspace/","text":"multiple_workspace \u00b6 This file is required to make Python interpreter treat the directory as a containing package. File is slightly modified from Edk2 BaseTools/Source/Python/Common/MultipleWorkspace.py MultipleWorkspace \u00b6 This class manages multiple workspace behavior. Attributes: Name Type Description WORKSPACE str defined the current workspace PACKAGES_PATH str defined the other WORKSPACE convertPackagePath classmethod \u00b6 convertPackagePath ( Ws , Path ) Convert path to match workspace. Parameters: Name Type Description Default cls obj The class pointer required Ws str The current WORKSPACE required Path str Path to be converted to match workspace required Returns: Type Description str Converted path. setWs classmethod \u00b6 setWs ( Ws , PackagesPath = None ) Set WORKSPACE and PACKAGES_PATH environment. Parameters: Name Type Description Default cls obj The class pointer required Ws str initialize WORKSPACE variable required PackagesPath str initialize PackagesPath variable None join classmethod \u00b6 join ( Ws , p ) Rewrite os.path.join. Parameters: Name Type Description Default cls obj The class pointer required Ws str the current WORKSPACE required *p str path of the inf/dec/dsc/fdf/conf file () Returns: Type Description str absolute path of the specified file relpath classmethod \u00b6 relpath ( Path , Ws ) Rewrite os.path.relpath. Parameters: Name Type Description Default cls obj The class pointer required Path str path of the inf/dec/dsc/fdf/conf file required Ws str the current WORKSPACE required Returns: Type Description str the relative path of specified file getWs classmethod \u00b6 getWs ( Ws , Path ) Get valid workspace for the path. Parameters: Name Type Description Default cls obj The class pointer required Ws str the current WORKSPACE required Path str path of the inf/dec/dsc/fdf/conf file required Returns: Type Description str valid workspace relative to the specified file path handleWsMacro classmethod \u00b6 handleWsMacro ( PathStr ) Handle the $(WORKSPACE) tag. If current workspace is an invalid path relative to the tool, replace it. Parameters: Name Type Description Default cls obj The class pointer required Returns: Type Description Str Path string including the $(WORKSPACE) getPkgPath classmethod \u00b6 getPkgPath () Get all package paths. Parameters: Name Type Description Default cls obj class pointer required Returns: Type Description obj Packages Path","title":"Multiple workspace"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace","text":"This file is required to make Python interpreter treat the directory as a containing package. File is slightly modified from Edk2 BaseTools/Source/Python/Common/MultipleWorkspace.py","title":"multiple_workspace"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace","text":"This class manages multiple workspace behavior. Attributes: Name Type Description WORKSPACE str defined the current workspace PACKAGES_PATH str defined the other WORKSPACE","title":"MultipleWorkspace"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.convertPackagePath","text":"convertPackagePath ( Ws , Path ) Convert path to match workspace. Parameters: Name Type Description Default cls obj The class pointer required Ws str The current WORKSPACE required Path str Path to be converted to match workspace required Returns: Type Description str Converted path.","title":"convertPackagePath()"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.setWs","text":"setWs ( Ws , PackagesPath = None ) Set WORKSPACE and PACKAGES_PATH environment. Parameters: Name Type Description Default cls obj The class pointer required Ws str initialize WORKSPACE variable required PackagesPath str initialize PackagesPath variable None","title":"setWs()"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.join","text":"join ( Ws , p ) Rewrite os.path.join. Parameters: Name Type Description Default cls obj The class pointer required Ws str the current WORKSPACE required *p str path of the inf/dec/dsc/fdf/conf file () Returns: Type Description str absolute path of the specified file","title":"join()"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.relpath","text":"relpath ( Path , Ws ) Rewrite os.path.relpath. Parameters: Name Type Description Default cls obj The class pointer required Path str path of the inf/dec/dsc/fdf/conf file required Ws str the current WORKSPACE required Returns: Type Description str the relative path of specified file","title":"relpath()"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.getWs","text":"getWs ( Ws , Path ) Get valid workspace for the path. Parameters: Name Type Description Default cls obj The class pointer required Ws str the current WORKSPACE required Path str path of the inf/dec/dsc/fdf/conf file required Returns: Type Description str valid workspace relative to the specified file path","title":"getWs()"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.handleWsMacro","text":"handleWsMacro ( PathStr ) Handle the $(WORKSPACE) tag. If current workspace is an invalid path relative to the tool, replace it. Parameters: Name Type Description Default cls obj The class pointer required Returns: Type Description Str Path string including the $(WORKSPACE)","title":"handleWsMacro()"},{"location":"api/environment/multiple_workspace/#edk2toolext.environment.multiple_workspace.MultipleWorkspace.getPkgPath","text":"getPkgPath () Get all package paths. Parameters: Name Type Description Default cls obj class pointer required Returns: Type Description obj Packages Path","title":"getPkgPath()"},{"location":"api/environment/plugin_manager/","text":"plugin_manager \u00b6 This module contains code that supports Build Plugins. PluginDescriptor \u00b6 Plugin Descripter. Attributes: Name Type Description descripter(Dict) descriptor Obj obj Object Name str name attribute from descriptor Module obj module attribute from descriptor __init__ \u00b6 __init__ ( t ) Inits the Plugin descriptor with the Descriptor. __str__ \u00b6 __str__ () String representation of the plugin descriptor. PluginManager \u00b6 A class that manages all plugins in the environment. Attributes: Name Type Description Descriptors List [ PluginDescriptor ] list of plugin descriptors __init__ \u00b6 __init__ () Inits an empty plugin manager. SetListOfEnvironmentDescriptors \u00b6 SetListOfEnvironmentDescriptors ( newlist ) Passes a tuple of environment descriptor dictionaries to be loaded as plugins. GetPluginsOfClass \u00b6 GetPluginsOfClass ( classobj ) Return list of all plugins of a given class. GetAllPlugins \u00b6 GetAllPlugins () Return list of all plugins.","title":"Plugin manager"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager","text":"This module contains code that supports Build Plugins.","title":"plugin_manager"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginDescriptor","text":"Plugin Descripter. Attributes: Name Type Description descripter(Dict) descriptor Obj obj Object Name str name attribute from descriptor Module obj module attribute from descriptor","title":"PluginDescriptor"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginDescriptor.__init__","text":"__init__ ( t ) Inits the Plugin descriptor with the Descriptor.","title":"__init__()"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginDescriptor.__str__","text":"__str__ () String representation of the plugin descriptor.","title":"__str__()"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginManager","text":"A class that manages all plugins in the environment. Attributes: Name Type Description Descriptors List [ PluginDescriptor ] list of plugin descriptors","title":"PluginManager"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginManager.__init__","text":"__init__ () Inits an empty plugin manager.","title":"__init__()"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginManager.SetListOfEnvironmentDescriptors","text":"SetListOfEnvironmentDescriptors ( newlist ) Passes a tuple of environment descriptor dictionaries to be loaded as plugins.","title":"SetListOfEnvironmentDescriptors()"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginManager.GetPluginsOfClass","text":"GetPluginsOfClass ( classobj ) Return list of all plugins of a given class.","title":"GetPluginsOfClass()"},{"location":"api/environment/plugin_manager/#edk2toolext.environment.plugin_manager.PluginManager.GetAllPlugins","text":"GetAllPlugins () Return list of all plugins.","title":"GetAllPlugins()"},{"location":"api/environment/repo_resolver/","text":"repo_resolver \u00b6 This module supports git operations. resolve \u00b6 resolve ( file_system_path , dependency , force = False , ignore = False , update_ok = False , ) Resolves a particular repo. Parameters: Name Type Description Default file_system_path Pathlike path to repo required dependency Dict contains Path, Commit, Branch required force bool If it is OK to update the commit or branch False ignore bool If it is OK to ignore errors or not. False update_ok bool If it is OK to update the commit or branch False Raises: Type Description Exception An error resolving a repo and ignore=False resolve_all \u00b6 resolve_all ( workspace_path , dependencies , force = False , ignore = False , update_ok = False , omnicache_dir = None , ) Resolves all repos. Parameters: Name Type Description Default workspace_path Pathlike workspace root required dependencies List [ Dict ] Dict contains Path, Commit, Branch required force bool If it is OK to update the commit or branch False ignore bool If it is OK to ignore errors or not. False update_ok bool If it is OK to update the commit or branch False omnicache_dir None Raises: Type Description Exception An error resolving a repo and ignore=False get_details \u00b6 get_details ( abs_file_system_path ) Gets the Url, Branch, and Commit of a particular repo. Parameters: Name Type Description Default abs_file_system_path PathLike repo directory required Returns: Type Description Dict Url, Branch, Commit clear_folder \u00b6 clear_folder ( abs_file_system_path ) Cleans the folder. Parameters: Name Type Description Default abs_file_system_path PathLike Directory to delete. required clone_repo \u00b6 clone_repo ( abs_file_system_path , DepObj ) Clones the repo in the folder using the dependency object. Parameters: Name Type Description Default abs_file_system_path PathLike destination to clone required DepObj Dict dict containing Commit, Full, Branch, etc required Returns: Type Description Tuple [ PathLike , bool ] (destination, result) checkout \u00b6 checkout ( abs_file_system_path , dep , repo , update_ok = False , ignore_dep_state_mismatch = False , force = False , ) Checks out a commit or branch. Parameters: Name Type Description Default abs_file_system_path PathLike The path to the repo required dep Dict A dictionary containing a either a Commit or Branch, and also a Path required repo Repo A valid repo object required update_ok bool If it is OK to update the commit or branch False ignore_dep_state_mismatch bool Whether a mismatch will result in an exception or not. False force bool If it is OK to update the commit or branch False Raises: Type Description Exception dependency state mismatch if ignore_dep_state_mismatch = False Tip Either abs_file_system_path or repo is necessary. Not both.","title":"Repo resolver"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver","text":"This module supports git operations.","title":"repo_resolver"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver.resolve","text":"resolve ( file_system_path , dependency , force = False , ignore = False , update_ok = False , ) Resolves a particular repo. Parameters: Name Type Description Default file_system_path Pathlike path to repo required dependency Dict contains Path, Commit, Branch required force bool If it is OK to update the commit or branch False ignore bool If it is OK to ignore errors or not. False update_ok bool If it is OK to update the commit or branch False Raises: Type Description Exception An error resolving a repo and ignore=False","title":"resolve()"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver.resolve_all","text":"resolve_all ( workspace_path , dependencies , force = False , ignore = False , update_ok = False , omnicache_dir = None , ) Resolves all repos. Parameters: Name Type Description Default workspace_path Pathlike workspace root required dependencies List [ Dict ] Dict contains Path, Commit, Branch required force bool If it is OK to update the commit or branch False ignore bool If it is OK to ignore errors or not. False update_ok bool If it is OK to update the commit or branch False omnicache_dir None Raises: Type Description Exception An error resolving a repo and ignore=False","title":"resolve_all()"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver.get_details","text":"get_details ( abs_file_system_path ) Gets the Url, Branch, and Commit of a particular repo. Parameters: Name Type Description Default abs_file_system_path PathLike repo directory required Returns: Type Description Dict Url, Branch, Commit","title":"get_details()"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver.clear_folder","text":"clear_folder ( abs_file_system_path ) Cleans the folder. Parameters: Name Type Description Default abs_file_system_path PathLike Directory to delete. required","title":"clear_folder()"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver.clone_repo","text":"clone_repo ( abs_file_system_path , DepObj ) Clones the repo in the folder using the dependency object. Parameters: Name Type Description Default abs_file_system_path PathLike destination to clone required DepObj Dict dict containing Commit, Full, Branch, etc required Returns: Type Description Tuple [ PathLike , bool ] (destination, result)","title":"clone_repo()"},{"location":"api/environment/repo_resolver/#edk2toolext.environment.repo_resolver.checkout","text":"checkout ( abs_file_system_path , dep , repo , update_ok = False , ignore_dep_state_mismatch = False , force = False , ) Checks out a commit or branch. Parameters: Name Type Description Default abs_file_system_path PathLike The path to the repo required dep Dict A dictionary containing a either a Commit or Branch, and also a Path required repo Repo A valid repo object required update_ok bool If it is OK to update the commit or branch False ignore_dep_state_mismatch bool Whether a mismatch will result in an exception or not. False force bool If it is OK to update the commit or branch False Raises: Type Description Exception dependency state mismatch if ignore_dep_state_mismatch = False Tip Either abs_file_system_path or repo is necessary. Not both.","title":"checkout()"},{"location":"api/environment/self_describing_environment/","text":"self_describing_environment \u00b6 An environment capable of scanning the source tree. Scans the environment for files that describe the source and dependencies and then acts upon those files. self_describing_environment \u00b6 An environment capable of scanning the source tree. Scans the environment for files that describe the source and dependencies and then acts upon those files. __init__ \u00b6 __init__ ( workspace_path , scopes = (), skipped_dirs = ()) Inits an empty self describing environment. load_workspace \u00b6 load_workspace () Loads the workspace. update_simple_paths \u00b6 update_simple_paths ( env_object ) Updates simple paths. update_extdep_paths \u00b6 update_extdep_paths ( env_object ) Updates external dependency paths. report_extdep_version \u00b6 report_extdep_version ( env_object ) Reports the version of all external dependencies. update_extdeps \u00b6 update_extdeps ( env_object ) Updates external dependencies. clean_extdeps \u00b6 clean_extdeps ( env_object ) Cleans external dependencies. verify_extdeps \u00b6 verify_extdeps ( env_object ) Verifies external dependencies. DestroyEnvironment \u00b6 DestroyEnvironment () Destroys global environment state. BootstrapEnvironment \u00b6 BootstrapEnvironment ( workspace , scopes = (), skipped_dirs = () ) Performs a multistage bootstrap of the environment. Locate and load all environment description files Parse all PATH-related descriptor files Load modules that had dependencies Report versions into the version aggregator Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning if only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)' CleanEnvironment \u00b6 CleanEnvironment ( workspace , scopes = (), skipped_dirs = ()) Cleans all external dependencies based on environment. Environment is bootstrapped from provided arguments and all dependencies are cleaned from that. Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning If only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)' UpdateDependencies \u00b6 UpdateDependencies ( workspace , scopes = (), skipped_dirs = () ) Updates all external dependencies based on environment. Environment is bootstrapped from provided arguments and all dependencies are updated from that. Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning If only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)' VerifyEnvironment \u00b6 VerifyEnvironment ( workspace , scopes = (), skipped_dirs = () ) Verifies all external dependencies based on environment. Environment is bootstrapped from provided arguments and all dependencies are verified from that. Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning If only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)'","title":"Self describing environment"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment","text":"An environment capable of scanning the source tree. Scans the environment for files that describe the source and dependencies and then acts upon those files.","title":"self_describing_environment"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment","text":"An environment capable of scanning the source tree. Scans the environment for files that describe the source and dependencies and then acts upon those files.","title":"self_describing_environment"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.__init__","text":"__init__ ( workspace_path , scopes = (), skipped_dirs = ()) Inits an empty self describing environment.","title":"__init__()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.load_workspace","text":"load_workspace () Loads the workspace.","title":"load_workspace()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.update_simple_paths","text":"update_simple_paths ( env_object ) Updates simple paths.","title":"update_simple_paths()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.update_extdep_paths","text":"update_extdep_paths ( env_object ) Updates external dependency paths.","title":"update_extdep_paths()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.report_extdep_version","text":"report_extdep_version ( env_object ) Reports the version of all external dependencies.","title":"report_extdep_version()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.update_extdeps","text":"update_extdeps ( env_object ) Updates external dependencies.","title":"update_extdeps()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.clean_extdeps","text":"clean_extdeps ( env_object ) Cleans external dependencies.","title":"clean_extdeps()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.self_describing_environment.verify_extdeps","text":"verify_extdeps ( env_object ) Verifies external dependencies.","title":"verify_extdeps()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.DestroyEnvironment","text":"DestroyEnvironment () Destroys global environment state.","title":"DestroyEnvironment()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.BootstrapEnvironment","text":"BootstrapEnvironment ( workspace , scopes = (), skipped_dirs = () ) Performs a multistage bootstrap of the environment. Locate and load all environment description files Parse all PATH-related descriptor files Load modules that had dependencies Report versions into the version aggregator Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning if only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)'","title":"BootstrapEnvironment()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.CleanEnvironment","text":"CleanEnvironment ( workspace , scopes = (), skipped_dirs = ()) Cleans all external dependencies based on environment. Environment is bootstrapped from provided arguments and all dependencies are cleaned from that. Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning If only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)'","title":"CleanEnvironment()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.UpdateDependencies","text":"UpdateDependencies ( workspace , scopes = (), skipped_dirs = () ) Updates all external dependencies based on environment. Environment is bootstrapped from provided arguments and all dependencies are updated from that. Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning If only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)'","title":"UpdateDependencies()"},{"location":"api/environment/self_describing_environment/#edk2toolext.environment.self_describing_environment.VerifyEnvironment","text":"VerifyEnvironment ( workspace , scopes = (), skipped_dirs = () ) Verifies all external dependencies based on environment. Environment is bootstrapped from provided arguments and all dependencies are verified from that. Parameters: Name Type Description Default workspace str workspace root required scopes Tuple scopes being built against () skipped_dirs Tuple directories to ignore () Warning If only one scope or skipped_dir, the tuple should end with a comma example: '(myscope,)'","title":"VerifyEnvironment()"},{"location":"api/environment/shell_environment/","text":"shell_environment \u00b6 Code that helps manage and maintain the build environment. This management includes PATH, PYTHONPATH and ENV Variables. ShellEnvironment \u00b6 An active copy of the current OS environment. Allows for easy manipulation of the environment including taking screenshots (checkpoints) that are stored and can be accessed later. __init__ \u00b6 __init__ () Inits the local environment with the initial os environment. import_environment \u00b6 import_environment () Loads the local environment with os environment. export_environment \u00b6 export_environment () Exports enviornment to the OS. log_environment \u00b6 log_environment () Logs the current environment to the logger. checkpoint \u00b6 checkpoint () Creates a checkpoint in time. Checkpoint stores the following: 1. active_environment 2. active_path 3. active_pypath 4. active_buildvars restore_checkpoint \u00b6 restore_checkpoint ( index ) Restore a specific checkpoint. restore_initial_checkpoint \u00b6 restore_initial_checkpoint () Restore the initial checkpoint made. set_path \u00b6 set_path ( new_path ) Set the path. Parameters: Name Type Description Default new_path str path to override with required set_pypath \u00b6 set_pypath ( new_path ) Set the pypath. Parameters: Name Type Description Default new_path str path to override with required append_path \u00b6 append_path ( path_element ) Append to the end of path. if path_element already exists within path it will be removed from the current location and appended to the end Parameters: Name Type Description Default path_element str path element to append required insert_path \u00b6 insert_path ( path_element ) Insert at front of the path. if path_element already exists within path it will be removed from the current location and prepended to the front Parameters: Name Type Description Default path_element str path element to insert required append_pypath \u00b6 append_pypath ( path_element ) Append to the end of pypath. if path_element already exists within pypath it will be removed from the current location and appended to the end Parameters: Name Type Description Default path_element str path element to append required insert_pypath \u00b6 insert_pypath ( path_element ) Insert at front of the pypath. if path_element already exists within pypath it will be removed from the current location and prepended to the front Parameters: Name Type Description Default path_element str path element to insert required replace_path_element \u00b6 replace_path_element ( old_path_element , new_path_element ) Replaces the PATH element. Generates a new PATH by iterating through the old PATH and replacing old_path_element with new_path_element where it is found. Parameters: Name Type Description Default old_path_element str element to replace required new_path_element str element to replace with required replace_pypath_element \u00b6 replace_pypath_element ( old_pypath_element , new_pypath_element ) Replaces the PYPATH element. Generates a new PYPATH by iterating through the old PYPATH and replacing old_pypath_element with new_pypath_element where it is found. Parameters: Name Type Description Default old_pypath_element str element to replace required new_pypath_element str element to replace with required remove_path_element \u00b6 remove_path_element ( path_element ) Removes the PATH element. Generates a new PATH by iterating through the old PATH and removing path_element if it is found. Parameters: Name Type Description Default path_element str path element to remove required remove_pypath_element \u00b6 remove_pypath_element ( pypath_element ) Removes the PYPATH element. Generates a new PYPATH by iterating through the old PYPATH and removing pypath_element if it is found. Parameters: Name Type Description Default pypath_element str pypath element to remove required get_build_var \u00b6 get_build_var ( var_name ) Gets the build variable. Parameters: Name Type Description Default var_name str variable to get the value of required Returns: Type Description obj value associated with the var_name set_build_var \u00b6 set_build_var ( var_name , var_data ) Sets the build var. Parameters: Name Type Description Default var_name str variable to set the value for required var_data obj data to set required VarDict get_shell_var \u00b6 get_shell_var ( var_name ) Gets the shell variable. Parameters: Name Type Description Default var_name str variable to get the value of required Returns: Type Description obj value associated with the var name set_shell_var \u00b6 set_shell_var ( var_name , var_data ) Sets the shell variable. Parameters: Name Type Description Default var_name str variable to set the value for required var_data obj data to set required The variable is set both in the VarDict and in the OS GetEnvironment \u00b6 GetEnvironment () Returns the environment. Returns: Type Description ShellEnvironment Singleton class GetBuildVars \u00b6 GetBuildVars () The current checkpoint buildvar values. Returns: Type Description VarDict A special dictionary containing build vars CheckpointBuildVars \u00b6 CheckpointBuildVars () Creates a checkpoint [a screenshot in time] of all current build var values. RevertBuildVars \u00b6 RevertBuildVars () Reverts all build var values to the most recent checkpoint.","title":"Shell environment"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment","text":"Code that helps manage and maintain the build environment. This management includes PATH, PYTHONPATH and ENV Variables.","title":"shell_environment"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment","text":"An active copy of the current OS environment. Allows for easy manipulation of the environment including taking screenshots (checkpoints) that are stored and can be accessed later.","title":"ShellEnvironment"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.__init__","text":"__init__ () Inits the local environment with the initial os environment.","title":"__init__()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.import_environment","text":"import_environment () Loads the local environment with os environment.","title":"import_environment()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.export_environment","text":"export_environment () Exports enviornment to the OS.","title":"export_environment()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.log_environment","text":"log_environment () Logs the current environment to the logger.","title":"log_environment()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.checkpoint","text":"checkpoint () Creates a checkpoint in time. Checkpoint stores the following: 1. active_environment 2. active_path 3. active_pypath 4. active_buildvars","title":"checkpoint()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.restore_checkpoint","text":"restore_checkpoint ( index ) Restore a specific checkpoint.","title":"restore_checkpoint()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.restore_initial_checkpoint","text":"restore_initial_checkpoint () Restore the initial checkpoint made.","title":"restore_initial_checkpoint()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.set_path","text":"set_path ( new_path ) Set the path. Parameters: Name Type Description Default new_path str path to override with required","title":"set_path()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.set_pypath","text":"set_pypath ( new_path ) Set the pypath. Parameters: Name Type Description Default new_path str path to override with required","title":"set_pypath()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.append_path","text":"append_path ( path_element ) Append to the end of path. if path_element already exists within path it will be removed from the current location and appended to the end Parameters: Name Type Description Default path_element str path element to append required","title":"append_path()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.insert_path","text":"insert_path ( path_element ) Insert at front of the path. if path_element already exists within path it will be removed from the current location and prepended to the front Parameters: Name Type Description Default path_element str path element to insert required","title":"insert_path()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.append_pypath","text":"append_pypath ( path_element ) Append to the end of pypath. if path_element already exists within pypath it will be removed from the current location and appended to the end Parameters: Name Type Description Default path_element str path element to append required","title":"append_pypath()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.insert_pypath","text":"insert_pypath ( path_element ) Insert at front of the pypath. if path_element already exists within pypath it will be removed from the current location and prepended to the front Parameters: Name Type Description Default path_element str path element to insert required","title":"insert_pypath()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.replace_path_element","text":"replace_path_element ( old_path_element , new_path_element ) Replaces the PATH element. Generates a new PATH by iterating through the old PATH and replacing old_path_element with new_path_element where it is found. Parameters: Name Type Description Default old_path_element str element to replace required new_path_element str element to replace with required","title":"replace_path_element()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.replace_pypath_element","text":"replace_pypath_element ( old_pypath_element , new_pypath_element ) Replaces the PYPATH element. Generates a new PYPATH by iterating through the old PYPATH and replacing old_pypath_element with new_pypath_element where it is found. Parameters: Name Type Description Default old_pypath_element str element to replace required new_pypath_element str element to replace with required","title":"replace_pypath_element()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.remove_path_element","text":"remove_path_element ( path_element ) Removes the PATH element. Generates a new PATH by iterating through the old PATH and removing path_element if it is found. Parameters: Name Type Description Default path_element str path element to remove required","title":"remove_path_element()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.remove_pypath_element","text":"remove_pypath_element ( pypath_element ) Removes the PYPATH element. Generates a new PYPATH by iterating through the old PYPATH and removing pypath_element if it is found. Parameters: Name Type Description Default pypath_element str pypath element to remove required","title":"remove_pypath_element()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.get_build_var","text":"get_build_var ( var_name ) Gets the build variable. Parameters: Name Type Description Default var_name str variable to get the value of required Returns: Type Description obj value associated with the var_name","title":"get_build_var()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.set_build_var","text":"set_build_var ( var_name , var_data ) Sets the build var. Parameters: Name Type Description Default var_name str variable to set the value for required var_data obj data to set required VarDict","title":"set_build_var()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.get_shell_var","text":"get_shell_var ( var_name ) Gets the shell variable. Parameters: Name Type Description Default var_name str variable to get the value of required Returns: Type Description obj value associated with the var name","title":"get_shell_var()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.ShellEnvironment.set_shell_var","text":"set_shell_var ( var_name , var_data ) Sets the shell variable. Parameters: Name Type Description Default var_name str variable to set the value for required var_data obj data to set required The variable is set both in the VarDict and in the OS","title":"set_shell_var()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.GetEnvironment","text":"GetEnvironment () Returns the environment. Returns: Type Description ShellEnvironment Singleton class","title":"GetEnvironment()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.GetBuildVars","text":"GetBuildVars () The current checkpoint buildvar values. Returns: Type Description VarDict A special dictionary containing build vars","title":"GetBuildVars()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.CheckpointBuildVars","text":"CheckpointBuildVars () Creates a checkpoint [a screenshot in time] of all current build var values.","title":"CheckpointBuildVars()"},{"location":"api/environment/shell_environment/#edk2toolext.environment.shell_environment.RevertBuildVars","text":"RevertBuildVars () Reverts all build var values to the most recent checkpoint.","title":"RevertBuildVars()"},{"location":"api/environment/uefi_build/","text":"uefi_build \u00b6 Code that supports the Tianocore Edk2 build system. This class is designed to be subclassed by a platform to allow more extensive and custom behavior. UefiBuilder \u00b6 Object responsible for the full build process. The following steps are completed by the UefiBuilder and is overridable by the platform: PlatformPreBuild() UefiBuildPlugins that implement do_pre_build() Build() (should not be overridden) UefiBuildPlugins that implement do_post_build() PlatformFlashImage() Attributes: Name Type Description SkipPreBuild bool Skip Pre Build or not SkipPostBuild bool Skip Post Build or not SkipBuild bool Skip Build or not FlashImage bool Flash the image not Clean bool Clean the build directory or not Update Conf (bool Update the conf or not env VarDict Special dictionary containing build and env vars mws MultipleWorkspace multiple workspace manager ws str Workspace root dir pp str packagespath separated by os.pathsep Helper HelperFunctions object containing registered helper functions pm PluginManager The plugin manager __init__ \u00b6 __init__ () Inits an empty UefiBuilder. AddPlatformCommandLineOptions \u00b6 AddPlatformCommandLineOptions ( parserObj ) Adds command line options to the argparser. Parameters: Name Type Description Default parserObj argparser argparser object required RetrievePlatformCommandLineOptions \u00b6 RetrievePlatformCommandLineOptions ( args ) Retrieve command line options from the argparser. Parameters: Name Type Description Default args Namespace namespace containing gathered args from argparser required Go \u00b6 Go ( WorkSpace , PackagesPath , PInHelper , PInManager ) Core executable that performs all build steps. CleanTree \u00b6 CleanTree ( RemoveConfTemplateFilesToo = False ) Cleans the build directory. Parameters: Name Type Description Default RemoveConfTemplateFilesToo bool deletes conf files used for building makefiles False Build \u00b6 Build () Adds all arguments to the build command and runs it. PreBuild \u00b6 PreBuild () Performs internal PreBuild steps. This includes calling the platform overridable PlatformPreBuild() PostBuild \u00b6 PostBuild () Performs internal PostBuild steps. This includes calling the platform overridable PlatformPostBuild() . SetEnv \u00b6 SetEnv () Performs internal SetEnv steps. This includes platform overridable SetPlatformEnv() and `SetPlatformEnvAfterTarget(). FlashRomImage \u00b6 FlashRomImage () Executes platform overridable PlatformFlashImage() . PlatformPreBuild classmethod \u00b6 PlatformPreBuild () Perform Platform PreBuild Steps. Returns: Type Description int 0 on success, 1 on failure PlatformPostBuild classmethod \u00b6 PlatformPostBuild () Perform Platform PostBuild Steps. Returns: Type Description int 0 on success, 1 on failure SetPlatformEnv classmethod \u00b6 SetPlatformEnv () Set and read Platform Env variables. This is performed before platform files like the DSC and FDF have been parsed. Tip If a platform file (DSC, FDF, etc) relies on a variable set in the UefiBuilder , it must be set here, before the platform files have been parsed and values have been set. Returns: Type Description int 0 on success, 1 on failure SetPlatformEnvAfterTarget classmethod \u00b6 SetPlatformEnvAfterTarget () Set and read Platform Env variables after platform files have been parsed. Returns: Type Description int 0 on success, 1 on failure PlatformBuildRom classmethod \u00b6 PlatformBuildRom () Build the platform Rom. Tip Typically called by the platform in PlatformFlashImage. Not called automatically by the UefiBuilder . PlatformFlashImage classmethod \u00b6 PlatformFlashImage () Flashes the image to the system. Returns: Type Description int 0 on success, 1 on failure PlatformGatedBuildShouldHappen classmethod \u00b6 PlatformGatedBuildShouldHappen () Specifies if a gated build should happen. Returns: Type Description bool True if gated build should happen, else False ParseTargetFile \u00b6 ParseTargetFile () Parses the target.txt file and adds values as env settings. \"Sets them so they can be overriden. ParseToolsDefFile \u00b6 ParseToolsDefFile () Parses the tools_def.txt file and adds values as env settings. \"Sets them so they can be overriden. ParseDscFile \u00b6 ParseDscFile () Parses the active platform DSC file. This will get lots of variable info to be used in the build. This makes it so we don't have to define things twice. ParseFdfFile \u00b6 ParseFdfFile () Parses the active platform FDF file. This will get lots of variable info to be used in the build. This makes it so we don't have to define things twice the FDF file usually comes from the Active Platform DSC file so it needs to be parsed first. SetBasicDefaults \u00b6 SetBasicDefaults () Sets default values for numerous build control flow variables.","title":"Uefi build"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build","text":"Code that supports the Tianocore Edk2 build system. This class is designed to be subclassed by a platform to allow more extensive and custom behavior.","title":"uefi_build"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder","text":"Object responsible for the full build process. The following steps are completed by the UefiBuilder and is overridable by the platform: PlatformPreBuild() UefiBuildPlugins that implement do_pre_build() Build() (should not be overridden) UefiBuildPlugins that implement do_post_build() PlatformFlashImage() Attributes: Name Type Description SkipPreBuild bool Skip Pre Build or not SkipPostBuild bool Skip Post Build or not SkipBuild bool Skip Build or not FlashImage bool Flash the image not Clean bool Clean the build directory or not Update Conf (bool Update the conf or not env VarDict Special dictionary containing build and env vars mws MultipleWorkspace multiple workspace manager ws str Workspace root dir pp str packagespath separated by os.pathsep Helper HelperFunctions object containing registered helper functions pm PluginManager The plugin manager","title":"UefiBuilder"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.__init__","text":"__init__ () Inits an empty UefiBuilder.","title":"__init__()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.AddPlatformCommandLineOptions","text":"AddPlatformCommandLineOptions ( parserObj ) Adds command line options to the argparser. Parameters: Name Type Description Default parserObj argparser argparser object required","title":"AddPlatformCommandLineOptions()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.RetrievePlatformCommandLineOptions","text":"RetrievePlatformCommandLineOptions ( args ) Retrieve command line options from the argparser. Parameters: Name Type Description Default args Namespace namespace containing gathered args from argparser required","title":"RetrievePlatformCommandLineOptions()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.Go","text":"Go ( WorkSpace , PackagesPath , PInHelper , PInManager ) Core executable that performs all build steps.","title":"Go()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.CleanTree","text":"CleanTree ( RemoveConfTemplateFilesToo = False ) Cleans the build directory. Parameters: Name Type Description Default RemoveConfTemplateFilesToo bool deletes conf files used for building makefiles False","title":"CleanTree()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.Build","text":"Build () Adds all arguments to the build command and runs it.","title":"Build()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PreBuild","text":"PreBuild () Performs internal PreBuild steps. This includes calling the platform overridable PlatformPreBuild()","title":"PreBuild()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PostBuild","text":"PostBuild () Performs internal PostBuild steps. This includes calling the platform overridable PlatformPostBuild() .","title":"PostBuild()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.SetEnv","text":"SetEnv () Performs internal SetEnv steps. This includes platform overridable SetPlatformEnv() and `SetPlatformEnvAfterTarget().","title":"SetEnv()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.FlashRomImage","text":"FlashRomImage () Executes platform overridable PlatformFlashImage() .","title":"FlashRomImage()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PlatformPreBuild","text":"PlatformPreBuild () Perform Platform PreBuild Steps. Returns: Type Description int 0 on success, 1 on failure","title":"PlatformPreBuild()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PlatformPostBuild","text":"PlatformPostBuild () Perform Platform PostBuild Steps. Returns: Type Description int 0 on success, 1 on failure","title":"PlatformPostBuild()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.SetPlatformEnv","text":"SetPlatformEnv () Set and read Platform Env variables. This is performed before platform files like the DSC and FDF have been parsed. Tip If a platform file (DSC, FDF, etc) relies on a variable set in the UefiBuilder , it must be set here, before the platform files have been parsed and values have been set. Returns: Type Description int 0 on success, 1 on failure","title":"SetPlatformEnv()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.SetPlatformEnvAfterTarget","text":"SetPlatformEnvAfterTarget () Set and read Platform Env variables after platform files have been parsed. Returns: Type Description int 0 on success, 1 on failure","title":"SetPlatformEnvAfterTarget()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PlatformBuildRom","text":"PlatformBuildRom () Build the platform Rom. Tip Typically called by the platform in PlatformFlashImage. Not called automatically by the UefiBuilder .","title":"PlatformBuildRom()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PlatformFlashImage","text":"PlatformFlashImage () Flashes the image to the system. Returns: Type Description int 0 on success, 1 on failure","title":"PlatformFlashImage()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.PlatformGatedBuildShouldHappen","text":"PlatformGatedBuildShouldHappen () Specifies if a gated build should happen. Returns: Type Description bool True if gated build should happen, else False","title":"PlatformGatedBuildShouldHappen()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.ParseTargetFile","text":"ParseTargetFile () Parses the target.txt file and adds values as env settings. \"Sets them so they can be overriden.","title":"ParseTargetFile()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.ParseToolsDefFile","text":"ParseToolsDefFile () Parses the tools_def.txt file and adds values as env settings. \"Sets them so they can be overriden.","title":"ParseToolsDefFile()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.ParseDscFile","text":"ParseDscFile () Parses the active platform DSC file. This will get lots of variable info to be used in the build. This makes it so we don't have to define things twice.","title":"ParseDscFile()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.ParseFdfFile","text":"ParseFdfFile () Parses the active platform FDF file. This will get lots of variable info to be used in the build. This makes it so we don't have to define things twice the FDF file usually comes from the Active Platform DSC file so it needs to be parsed first.","title":"ParseFdfFile()"},{"location":"api/environment/uefi_build/#edk2toolext.environment.uefi_build.UefiBuilder.SetBasicDefaults","text":"SetBasicDefaults () Sets default values for numerous build control flow variables.","title":"SetBasicDefaults()"},{"location":"api/environment/var_dict/","text":"var_dict \u00b6 A special overridable dictionary. Stores most of the build configuration data and allows extensive config sharing for the build process, pre-build, and post-build. EnvEntry \u00b6 A single Environment Variable entry for VarDict. Attributes: Name Type Description Value obj The value to store in the dictionary Comment str A debug comment specifying where / how the value was set overridable bool If the value can be overwritten in the future __init__ \u00b6 __init__ ( value , comment , overridable = False ) Inits an entry with the specified values. PrintEntry \u00b6 PrintEntry ( f = None ) Prints the value. Parameters: Name Type Description Default f str a file to write to instead of the terminal. None SetValue \u00b6 SetValue ( value , comment , overridable = False ) Sets the value of the entry if it os overridable. Parameters: Name Type Description Default value obj value to set required comment str A debug comment specifying where / how the value was set required overridable bool If the value can be overwritten in the future False Warning Even if you set a value as overridable=False, another entity can call AllowOverride() and change the value anyway. AllowOverride \u00b6 AllowOverride () Allows the value to be overwritten in the future. GetValue \u00b6 GetValue () Returns the value. VarDict \u00b6 An overridable dictionary to store build configuration data. __init__ \u00b6 __init__ () Inits an empty VarDict. GetEntry \u00b6 GetEntry ( key ) Returns an entry in the Dstore Dict. __copy__ \u00b6 __copy__ () Copies data into a new VarDict. GetValue \u00b6 GetValue ( k , default = None ) Gets a value from the variable dictionary that was set during build. Note Values set in DSC, FDF, and CLI stored as strings Parameters: Name Type Description Default k str The key the value was stored as required default varied default value if key is not present None Returns: Type Description varied The value of the key, if present, else default value SetValue \u00b6 SetValue ( k , v , comment , overridable = False ) Sets an environment variable to be used throughout the build. Parameters: Name Type Description Default k str The key to store the value under required v varied The value to store required comment str A comment to show where / how the variable was stored. Useful for debugging required overridable bool Specifies if the variable is allowed to be override elsewhere in the build False Returns: Type Description bool If the variable was successfully stored or not AllowOverride \u00b6 AllowOverride ( k ) Forces the key/value pair to be overridable. Note: Even if overridable was specifically set to False, it still allows it. Parameters: Name Type Description Default k str The key the value was stored as required Returns: Type Description bool if the key existed or not GetBuildValue \u00b6 GetBuildValue ( key , BuildType = None ) Get a build var value for given key and buildtype. Tip Build vars are defined by vars that start with BLD_ BLD_*_ means all build types BLD_DEBUG_ means build of debug type BLD_RELEASE_ means build of release type etc Parameters: Name Type Description Default key str The key the value was stored as required BuildType str DEBUG/RELEASE None Returns: Type Description str The value of the key, if present, else None GetAllBuildKeyValues \u00b6 GetAllBuildKeyValues ( BuildType = None ) Gets a dictionary for all build vars. Tip Build vars are defined by vars that start with BLD_ BLD_*_ means all build types BLD_DEBUG_ means build of debug type BLD_RELEASE_ means build of release type etc Parameters: Name Type Description Default BuildType None Returns: Type Description dict all keys, values in the environment which are build keys GetAllNonBuildKeyValues \u00b6 GetAllNonBuildKeyValues () Returns a dict of non Build Key values. Return a copy of the dictionary of all keys, values in the environment which are not Build Keys. PrintAll \u00b6 PrintAll ( fp = None ) Prints all variables. If fp is not none, writes to a fp also Parameters: Name Type Description Default fp str file pointer to print to None","title":"Var dict"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict","text":"A special overridable dictionary. Stores most of the build configuration data and allows extensive config sharing for the build process, pre-build, and post-build.","title":"var_dict"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.EnvEntry","text":"A single Environment Variable entry for VarDict. Attributes: Name Type Description Value obj The value to store in the dictionary Comment str A debug comment specifying where / how the value was set overridable bool If the value can be overwritten in the future","title":"EnvEntry"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.EnvEntry.__init__","text":"__init__ ( value , comment , overridable = False ) Inits an entry with the specified values.","title":"__init__()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.EnvEntry.PrintEntry","text":"PrintEntry ( f = None ) Prints the value. Parameters: Name Type Description Default f str a file to write to instead of the terminal. None","title":"PrintEntry()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.EnvEntry.SetValue","text":"SetValue ( value , comment , overridable = False ) Sets the value of the entry if it os overridable. Parameters: Name Type Description Default value obj value to set required comment str A debug comment specifying where / how the value was set required overridable bool If the value can be overwritten in the future False Warning Even if you set a value as overridable=False, another entity can call AllowOverride() and change the value anyway.","title":"SetValue()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.EnvEntry.AllowOverride","text":"AllowOverride () Allows the value to be overwritten in the future.","title":"AllowOverride()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.EnvEntry.GetValue","text":"GetValue () Returns the value.","title":"GetValue()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict","text":"An overridable dictionary to store build configuration data.","title":"VarDict"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.__init__","text":"__init__ () Inits an empty VarDict.","title":"__init__()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.GetEntry","text":"GetEntry ( key ) Returns an entry in the Dstore Dict.","title":"GetEntry()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.__copy__","text":"__copy__ () Copies data into a new VarDict.","title":"__copy__()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.GetValue","text":"GetValue ( k , default = None ) Gets a value from the variable dictionary that was set during build. Note Values set in DSC, FDF, and CLI stored as strings Parameters: Name Type Description Default k str The key the value was stored as required default varied default value if key is not present None Returns: Type Description varied The value of the key, if present, else default value","title":"GetValue()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.SetValue","text":"SetValue ( k , v , comment , overridable = False ) Sets an environment variable to be used throughout the build. Parameters: Name Type Description Default k str The key to store the value under required v varied The value to store required comment str A comment to show where / how the variable was stored. Useful for debugging required overridable bool Specifies if the variable is allowed to be override elsewhere in the build False Returns: Type Description bool If the variable was successfully stored or not","title":"SetValue()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.AllowOverride","text":"AllowOverride ( k ) Forces the key/value pair to be overridable. Note: Even if overridable was specifically set to False, it still allows it. Parameters: Name Type Description Default k str The key the value was stored as required Returns: Type Description bool if the key existed or not","title":"AllowOverride()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.GetBuildValue","text":"GetBuildValue ( key , BuildType = None ) Get a build var value for given key and buildtype. Tip Build vars are defined by vars that start with BLD_ BLD_*_ means all build types BLD_DEBUG_ means build of debug type BLD_RELEASE_ means build of release type etc Parameters: Name Type Description Default key str The key the value was stored as required BuildType str DEBUG/RELEASE None Returns: Type Description str The value of the key, if present, else None","title":"GetBuildValue()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.GetAllBuildKeyValues","text":"GetAllBuildKeyValues ( BuildType = None ) Gets a dictionary for all build vars. Tip Build vars are defined by vars that start with BLD_ BLD_*_ means all build types BLD_DEBUG_ means build of debug type BLD_RELEASE_ means build of release type etc Parameters: Name Type Description Default BuildType None Returns: Type Description dict all keys, values in the environment which are build keys","title":"GetAllBuildKeyValues()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.GetAllNonBuildKeyValues","text":"GetAllNonBuildKeyValues () Returns a dict of non Build Key values. Return a copy of the dictionary of all keys, values in the environment which are not Build Keys.","title":"GetAllNonBuildKeyValues()"},{"location":"api/environment/var_dict/#edk2toolext.environment.var_dict.VarDict.PrintAll","text":"PrintAll ( fp = None ) Prints all variables. If fp is not none, writes to a fp also Parameters: Name Type Description Default fp str file pointer to print to None","title":"PrintAll()"},{"location":"api/environment/version_aggregator/","text":"version_aggregator \u00b6 Used to facilitate the collection of information. Used to facilitate the collection of information regarding the tools, binaries, submodule configuration used in a build. version_aggregator \u00b6 Used to facilitate the collection of information. Used to facilitate the collection of information regarding the tools, binaries, submodule configuration used in a build. __init__ \u00b6 __init__ () Inits an empty verion aggregator. ReportVersion \u00b6 ReportVersion ( key , value , versionType , path = None ) Report the version of something. Parameters: Name Type Description Default key str the name of what you are reporting. required value str The value of what you are reporting. required versionType str The method of categorizing what is being reported. See VersionTypes for details. required path str the associated path. None Print \u00b6 Print () Prints out the current information from the version aggregator. GetAggregatedVersionInformation \u00b6 GetAggregatedVersionInformation () Returns a copy of the aggregated information. Reset \u00b6 Reset () Resets all versions. VersionTypes \u00b6 Enumerator representing the different version types for recording. Attributes: Name Type Description COMMIT the commit hash of a repository. BINARY pre-packaged binary that is distributed with a version number. TOOL the version number of a tool that was used during the build process. INFO miscellaneous information. PIP a python pip package. GetVersionAggregator \u00b6 GetVersionAggregator () Returns a singleton instance of this class for global use. ResetVersionAggregator \u00b6 ResetVersionAggregator () Resets the version Aggregator singleton.","title":"Version aggregator"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator","text":"Used to facilitate the collection of information. Used to facilitate the collection of information regarding the tools, binaries, submodule configuration used in a build.","title":"version_aggregator"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.version_aggregator","text":"Used to facilitate the collection of information. Used to facilitate the collection of information regarding the tools, binaries, submodule configuration used in a build.","title":"version_aggregator"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.version_aggregator.__init__","text":"__init__ () Inits an empty verion aggregator.","title":"__init__()"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.version_aggregator.ReportVersion","text":"ReportVersion ( key , value , versionType , path = None ) Report the version of something. Parameters: Name Type Description Default key str the name of what you are reporting. required value str The value of what you are reporting. required versionType str The method of categorizing what is being reported. See VersionTypes for details. required path str the associated path. None","title":"ReportVersion()"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.version_aggregator.Print","text":"Print () Prints out the current information from the version aggregator.","title":"Print()"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.version_aggregator.GetAggregatedVersionInformation","text":"GetAggregatedVersionInformation () Returns a copy of the aggregated information.","title":"GetAggregatedVersionInformation()"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.version_aggregator.Reset","text":"Reset () Resets all versions.","title":"Reset()"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.VersionTypes","text":"Enumerator representing the different version types for recording. Attributes: Name Type Description COMMIT the commit hash of a repository. BINARY pre-packaged binary that is distributed with a version number. TOOL the version number of a tool that was used during the build process. INFO miscellaneous information. PIP a python pip package.","title":"VersionTypes"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.GetVersionAggregator","text":"GetVersionAggregator () Returns a singleton instance of this class for global use.","title":"GetVersionAggregator()"},{"location":"api/environment/version_aggregator/#edk2toolext.environment.version_aggregator.ResetVersionAggregator","text":"ResetVersionAggregator () Resets the version Aggregator singleton.","title":"ResetVersionAggregator()"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/","text":"az_cli_universal_dependency \u00b6 An ExternalDependency subclass able to download from an Azure feed. AzureCliUniversalDependency \u00b6 An ExternalDependency subclass able to download from an Azure feed. Attributes: Name Type Description feed str feed name version str semantic version source str url of organization (example: https://dev.azure.com/tianocore ) project str name str name of artifact file-filter str filter for folders and files. pat_var str shell_var name for PAT for this ext_dep Tip The attributes are what must be described in the ext_dep yaml file! VerifyToolDependencies classmethod \u00b6 VerifyToolDependencies () Verify any tool environment or dependencies requirements are met. Log to Version Aggregator the Tool Versions __init__ \u00b6 __init__ ( descriptor ) Inits a Azure CLI dependency based off the provided descriptior. __str__ \u00b6 __str__ () Return a string representation. fetch \u00b6 fetch () Fetches the dependency using internal state from the init. get_temp_dir \u00b6 get_temp_dir () Returns the temporary directory the Azure CLI feed is downloaded to. clean \u00b6 clean () Removes the temporary directory the NuGet package is downloaded to.","title":"Az cli universal dependency"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency","text":"An ExternalDependency subclass able to download from an Azure feed.","title":"az_cli_universal_dependency"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency","text":"An ExternalDependency subclass able to download from an Azure feed. Attributes: Name Type Description feed str feed name version str semantic version source str url of organization (example: https://dev.azure.com/tianocore ) project str name str name of artifact file-filter str filter for folders and files. pat_var str shell_var name for PAT for this ext_dep Tip The attributes are what must be described in the ext_dep yaml file!","title":"AzureCliUniversalDependency"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency.VerifyToolDependencies","text":"VerifyToolDependencies () Verify any tool environment or dependencies requirements are met. Log to Version Aggregator the Tool Versions","title":"VerifyToolDependencies()"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency.__init__","text":"__init__ ( descriptor ) Inits a Azure CLI dependency based off the provided descriptior.","title":"__init__()"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency.__str__","text":"__str__ () Return a string representation.","title":"__str__()"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency.fetch","text":"fetch () Fetches the dependency using internal state from the init.","title":"fetch()"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency.get_temp_dir","text":"get_temp_dir () Returns the temporary directory the Azure CLI feed is downloaded to.","title":"get_temp_dir()"},{"location":"api/environment/extdeptypes/az_cli_universal_dependency/#edk2toolext.environment.extdeptypes.az_cli_universal_dependency.AzureCliUniversalDependency.clean","text":"clean () Removes the temporary directory the NuGet package is downloaded to.","title":"clean()"},{"location":"api/environment/extdeptypes/git_dependency/","text":"git_dependency \u00b6 An ExternalDependency subclass able to clone from git. GitDependency \u00b6 An ExternalDependency subclass able to clone from git. Attributes: Name Type Description source str url for git clone version str commit from git repo url_creds_var str shell_var name for credential updating. Optional Tip The attributes are what must be described in the ext_dep yaml file! __init__ \u00b6 __init__ ( descriptor ) Inits a git dependency based off the provided descriptor. __str__ \u00b6 __str__ () Return a string representation. fetch \u00b6 fetch () Fetches the dependency using internal state from the init. clean \u00b6 clean () Removes the local clone of the repo. verify \u00b6 verify () Verifies the clone was successful. compute_published_path \u00b6 compute_published_path () Override to include the repository name in the published path.","title":"Git dependency"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency","text":"An ExternalDependency subclass able to clone from git.","title":"git_dependency"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency","text":"An ExternalDependency subclass able to clone from git. Attributes: Name Type Description source str url for git clone version str commit from git repo url_creds_var str shell_var name for credential updating. Optional Tip The attributes are what must be described in the ext_dep yaml file!","title":"GitDependency"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency.__init__","text":"__init__ ( descriptor ) Inits a git dependency based off the provided descriptor.","title":"__init__()"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency.__str__","text":"__str__ () Return a string representation.","title":"__str__()"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency.fetch","text":"fetch () Fetches the dependency using internal state from the init.","title":"fetch()"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency.clean","text":"clean () Removes the local clone of the repo.","title":"clean()"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency.verify","text":"verify () Verifies the clone was successful.","title":"verify()"},{"location":"api/environment/extdeptypes/git_dependency/#edk2toolext.environment.extdeptypes.git_dependency.GitDependency.compute_published_path","text":"compute_published_path () Override to include the repository name in the published path.","title":"compute_published_path()"},{"location":"api/environment/extdeptypes/nuget_dependency/","text":"nuget_dependency \u00b6 An ExternalDependency subclass able to download from NuGet. NugetDependency \u00b6 An ExternalDependency subclass able to download from NuGet. Attributes: Name Type Description source str Source of the nuget dependency. version str Version of the web dependency. Tip The attributes are what must be described in the ext_dep yaml file! __init__ \u00b6 __init__ ( descriptor ) Inits a nuget dependency based off the provided descriptor. GetNugetCmd classmethod \u00b6 GetNugetCmd () -> List [ str ] Appends mono to the command and resolves the full path of the exe for mono. Used to add nuget support on posix platforms. https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools Note Strings returned might not be pathlike given they may be quoted for use on the command line. Returns: Type Description list [\"nuget.exe\"] or [\"mono\", \"/PATH/TO/nuget.exe\"] None none was found normalize_version staticmethod \u00b6 normalize_version ( version , nuget_name = '' ) Normalizes the version as NuGet versioning diverges from Semantic Versioning. https://learn.microsoft.com/en-us/nuget/concepts/package-versioning#where-nugetversion-diverges-from-semantic-versioning These cases will be handled befpre a Semantic Version Compatible\" set of data is passed to the Semantic Version checker. __str__ \u00b6 __str__ () Return a string representation. fetch \u00b6 fetch () Fetches the dependency using internal state from the init. get_temp_dir \u00b6 get_temp_dir () Returns the temporary directory the NuGet package is downloaded to. clean \u00b6 clean () Removes the temporary directory the NuGet package is downloaded to.","title":"Nuget dependency"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency","text":"An ExternalDependency subclass able to download from NuGet.","title":"nuget_dependency"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency","text":"An ExternalDependency subclass able to download from NuGet. Attributes: Name Type Description source str Source of the nuget dependency. version str Version of the web dependency. Tip The attributes are what must be described in the ext_dep yaml file!","title":"NugetDependency"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.__init__","text":"__init__ ( descriptor ) Inits a nuget dependency based off the provided descriptor.","title":"__init__()"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.GetNugetCmd","text":"GetNugetCmd () -> List [ str ] Appends mono to the command and resolves the full path of the exe for mono. Used to add nuget support on posix platforms. https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools Note Strings returned might not be pathlike given they may be quoted for use on the command line. Returns: Type Description list [\"nuget.exe\"] or [\"mono\", \"/PATH/TO/nuget.exe\"] None none was found","title":"GetNugetCmd()"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.normalize_version","text":"normalize_version ( version , nuget_name = '' ) Normalizes the version as NuGet versioning diverges from Semantic Versioning. https://learn.microsoft.com/en-us/nuget/concepts/package-versioning#where-nugetversion-diverges-from-semantic-versioning These cases will be handled befpre a Semantic Version Compatible\" set of data is passed to the Semantic Version checker.","title":"normalize_version()"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.__str__","text":"__str__ () Return a string representation.","title":"__str__()"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.fetch","text":"fetch () Fetches the dependency using internal state from the init.","title":"fetch()"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.get_temp_dir","text":"get_temp_dir () Returns the temporary directory the NuGet package is downloaded to.","title":"get_temp_dir()"},{"location":"api/environment/extdeptypes/nuget_dependency/#edk2toolext.environment.extdeptypes.nuget_dependency.NugetDependency.clean","text":"clean () Removes the temporary directory the NuGet package is downloaded to.","title":"clean()"},{"location":"api/environment/extdeptypes/web_dependency/","text":"web_dependency \u00b6 An ExternalDependency subclass able to download from a url. WebDependency \u00b6 An ExternalDependency subclass able to download from a url. Able to download an uncrompressed, zip, or tar file from the web and can optionally compare the hash to a provided hash. Attributes: Name Type Description internal_path str Describes layout of what we're downloading. Include / at the beginning if the ext_dep is a directory. Item located at internal_path will unpacked into the ext_dep folder and this is what the path/shell vars will point to when compute_published_path is run. compression_type str Supports zip and tar. If the file isn't compressed, do not include this field. Optional sha256 str Hash of downloaded file to be checked against. Optional Tip The attributes are what must be described in the ext_dep yaml file! __init__ \u00b6 __init__ ( descriptor ) Inits a web dependency based off the provided descriptor. __str__ \u00b6 __str__ () Returns a string representation. linuxize_path staticmethod \u00b6 linuxize_path ( path ) Replaces windows style separators with linux style separators. Parameters: Name Type Description Default path str the path required unpack staticmethod \u00b6 unpack ( compressed_file_path , destination , internal_path , compression_type , ) Unpacks a compressed file to the specified location; zip or tar supported. Parameters: Name Type Description Default compressed_file_path str Name of compressed file to unpack. required destination str directory to unpacked into. required internal_path str internal structure of the compressed volume that you would like extracted. required compression_type str type of compression. tar and zip supported. required fetch \u00b6 fetch () Fetches the dependency using internal state from the init.","title":"Web dependency"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency","text":"An ExternalDependency subclass able to download from a url.","title":"web_dependency"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency.WebDependency","text":"An ExternalDependency subclass able to download from a url. Able to download an uncrompressed, zip, or tar file from the web and can optionally compare the hash to a provided hash. Attributes: Name Type Description internal_path str Describes layout of what we're downloading. Include / at the beginning if the ext_dep is a directory. Item located at internal_path will unpacked into the ext_dep folder and this is what the path/shell vars will point to when compute_published_path is run. compression_type str Supports zip and tar. If the file isn't compressed, do not include this field. Optional sha256 str Hash of downloaded file to be checked against. Optional Tip The attributes are what must be described in the ext_dep yaml file!","title":"WebDependency"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency.WebDependency.__init__","text":"__init__ ( descriptor ) Inits a web dependency based off the provided descriptor.","title":"__init__()"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency.WebDependency.__str__","text":"__str__ () Returns a string representation.","title":"__str__()"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency.WebDependency.linuxize_path","text":"linuxize_path ( path ) Replaces windows style separators with linux style separators. Parameters: Name Type Description Default path str the path required","title":"linuxize_path()"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency.WebDependency.unpack","text":"unpack ( compressed_file_path , destination , internal_path , compression_type , ) Unpacks a compressed file to the specified location; zip or tar supported. Parameters: Name Type Description Default compressed_file_path str Name of compressed file to unpack. required destination str directory to unpacked into. required internal_path str internal structure of the compressed volume that you would like extracted. required compression_type str type of compression. tar and zip supported. required","title":"unpack()"},{"location":"api/environment/extdeptypes/web_dependency/#edk2toolext.environment.extdeptypes.web_dependency.WebDependency.fetch","text":"fetch () Fetches the dependency using internal state from the init.","title":"fetch()"},{"location":"api/environment/plugintypes/ci_build_plugin/","text":"ci_build_plugin \u00b6 Plugin that supports adding tests or operations to the ci environment. ICiBuildPlugin \u00b6 Plugin that supports adding tests or operations to the ci environment. RunBuildPlugin \u00b6 RunBuildPlugin ( packagename , Edk2pathObj , pkgconfig , environment , PLM , PLMHelper , tc , output_stream , ) External function of plugin. This function is used to perform the task of the CiBuild Plugin Parameters: Name Type Description Default packagename str edk2 path to package (workspace/package path relative) required Edk2pathObj Edk2Path Edk2Path configured with workspace and package path required pkgconfig dict Package config required environment EnvConfig Environment config required PLM PluginManager Plugin manager instance required PLMHelper HelperFunctions Plugin helper object instace required tc obj test case that needs state configured for reporting by plugin required output_stream StringIO output stream from this plugin via logging required Returns: Type Description int 0 - number of errors found int 0 - passed successfully int -1 - skipped for missing prereq GetTestName \u00b6 GetTestName ( packagename : str , environment : object ) -> Tuple [ str , str ] Provides the test case and class name. Given the package name and configuration provide the caller the name of the test case and the class name. These are both used in logging and reporting test status. Parameters: Name Type Description Default packagename str Package Name required environment EnvDict Environment Dictionary configuration required Returns: Type Description Tuple [ str , str ] (test case name, test case base class name) RunsOnTargetList \u00b6 RunsOnTargetList () -> List [ str ] Returns a list of edk2 TARGETs that this plugin would like to run on. Known target values DEBUG, RELEASE, NOOPT, NO-TARGET Hint If the plugin is not Target specific it should return a list of one element of \"NO-TARGET\" WalkDirectoryForExtension \u00b6 WalkDirectoryForExtension ( extensionlist : List [ str ], directory : os . PathLike , ignorelist : List [ str ] = None , ) -> List [ os . PathLike ] Walks a file directory recursively for all items ending in certain extension. Parameters: Name Type Description Default extensionlist List [ str ] list of file extensions required directory PathLike absolute path to directory to start looking required ignorelist List [ str ] a list of case insensitive filenames to ignore (Optional) None Returns: Type Description List file paths to matching files","title":"Ci build plugin"},{"location":"api/environment/plugintypes/ci_build_plugin/#edk2toolext.environment.plugintypes.ci_build_plugin","text":"Plugin that supports adding tests or operations to the ci environment.","title":"ci_build_plugin"},{"location":"api/environment/plugintypes/ci_build_plugin/#edk2toolext.environment.plugintypes.ci_build_plugin.ICiBuildPlugin","text":"Plugin that supports adding tests or operations to the ci environment.","title":"ICiBuildPlugin"},{"location":"api/environment/plugintypes/ci_build_plugin/#edk2toolext.environment.plugintypes.ci_build_plugin.ICiBuildPlugin.RunBuildPlugin","text":"RunBuildPlugin ( packagename , Edk2pathObj , pkgconfig , environment , PLM , PLMHelper , tc , output_stream , ) External function of plugin. This function is used to perform the task of the CiBuild Plugin Parameters: Name Type Description Default packagename str edk2 path to package (workspace/package path relative) required Edk2pathObj Edk2Path Edk2Path configured with workspace and package path required pkgconfig dict Package config required environment EnvConfig Environment config required PLM PluginManager Plugin manager instance required PLMHelper HelperFunctions Plugin helper object instace required tc obj test case that needs state configured for reporting by plugin required output_stream StringIO output stream from this plugin via logging required Returns: Type Description int 0 - number of errors found int 0 - passed successfully int -1 - skipped for missing prereq","title":"RunBuildPlugin()"},{"location":"api/environment/plugintypes/ci_build_plugin/#edk2toolext.environment.plugintypes.ci_build_plugin.ICiBuildPlugin.GetTestName","text":"GetTestName ( packagename : str , environment : object ) -> Tuple [ str , str ] Provides the test case and class name. Given the package name and configuration provide the caller the name of the test case and the class name. These are both used in logging and reporting test status. Parameters: Name Type Description Default packagename str Package Name required environment EnvDict Environment Dictionary configuration required Returns: Type Description Tuple [ str , str ] (test case name, test case base class name)","title":"GetTestName()"},{"location":"api/environment/plugintypes/ci_build_plugin/#edk2toolext.environment.plugintypes.ci_build_plugin.ICiBuildPlugin.RunsOnTargetList","text":"RunsOnTargetList () -> List [ str ] Returns a list of edk2 TARGETs that this plugin would like to run on. Known target values DEBUG, RELEASE, NOOPT, NO-TARGET Hint If the plugin is not Target specific it should return a list of one element of \"NO-TARGET\"","title":"RunsOnTargetList()"},{"location":"api/environment/plugintypes/ci_build_plugin/#edk2toolext.environment.plugintypes.ci_build_plugin.ICiBuildPlugin.WalkDirectoryForExtension","text":"WalkDirectoryForExtension ( extensionlist : List [ str ], directory : os . PathLike , ignorelist : List [ str ] = None , ) -> List [ os . PathLike ] Walks a file directory recursively for all items ending in certain extension. Parameters: Name Type Description Default extensionlist List [ str ] list of file extensions required directory PathLike absolute path to directory to start looking required ignorelist List [ str ] a list of case insensitive filenames to ignore (Optional) None Returns: Type Description List file paths to matching files","title":"WalkDirectoryForExtension()"},{"location":"api/environment/plugintypes/dsc_processor_plugin/","text":"dsc_processor_plugin \u00b6 Plugin for parsing DSCs. IDscProcessorPlugin \u00b6 Plugin for parsing DSCs. do_transform \u00b6 do_transform ( dsc , thebuilder ) Does the transform on a DSC. Parameters: Name Type Description Default dsc obj the in-memory model of the DSC required thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int 0 or NonZero for success or failure get_level \u00b6 get_level ( thebuilder ) Gets the level that this transform operates at. Parameters: Name Type Description Default thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int the level","title":"Dsc processor plugin"},{"location":"api/environment/plugintypes/dsc_processor_plugin/#edk2toolext.environment.plugintypes.dsc_processor_plugin","text":"Plugin for parsing DSCs.","title":"dsc_processor_plugin"},{"location":"api/environment/plugintypes/dsc_processor_plugin/#edk2toolext.environment.plugintypes.dsc_processor_plugin.IDscProcessorPlugin","text":"Plugin for parsing DSCs.","title":"IDscProcessorPlugin"},{"location":"api/environment/plugintypes/dsc_processor_plugin/#edk2toolext.environment.plugintypes.dsc_processor_plugin.IDscProcessorPlugin.do_transform","text":"do_transform ( dsc , thebuilder ) Does the transform on a DSC. Parameters: Name Type Description Default dsc obj the in-memory model of the DSC required thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int 0 or NonZero for success or failure","title":"do_transform()"},{"location":"api/environment/plugintypes/dsc_processor_plugin/#edk2toolext.environment.plugintypes.dsc_processor_plugin.IDscProcessorPlugin.get_level","text":"get_level ( thebuilder ) Gets the level that this transform operates at. Parameters: Name Type Description Default thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int the level","title":"get_level()"},{"location":"api/environment/plugintypes/uefi_build_plugin/","text":"uefi_build_plugin \u00b6 Plugin that supports Pre and Post Build Steps. IUefiBuildPlugin \u00b6 Plugin that supports Pre and Post Build Steps. do_post_build \u00b6 do_post_build ( thebuilder ) Runs Post Build Plugin Operations. Parameters: Name Type Description Default thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int 0 or NonZero for success or failure do_pre_build \u00b6 do_pre_build ( thebuilder ) Runs Pre Build Plugin Operations. Parameters: Name Type Description Default thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int 0 or NonZero for success or failure","title":"Uefi build plugin"},{"location":"api/environment/plugintypes/uefi_build_plugin/#edk2toolext.environment.plugintypes.uefi_build_plugin","text":"Plugin that supports Pre and Post Build Steps.","title":"uefi_build_plugin"},{"location":"api/environment/plugintypes/uefi_build_plugin/#edk2toolext.environment.plugintypes.uefi_build_plugin.IUefiBuildPlugin","text":"Plugin that supports Pre and Post Build Steps.","title":"IUefiBuildPlugin"},{"location":"api/environment/plugintypes/uefi_build_plugin/#edk2toolext.environment.plugintypes.uefi_build_plugin.IUefiBuildPlugin.do_post_build","text":"do_post_build ( thebuilder ) Runs Post Build Plugin Operations. Parameters: Name Type Description Default thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int 0 or NonZero for success or failure","title":"do_post_build()"},{"location":"api/environment/plugintypes/uefi_build_plugin/#edk2toolext.environment.plugintypes.uefi_build_plugin.IUefiBuildPlugin.do_pre_build","text":"do_pre_build ( thebuilder ) Runs Pre Build Plugin Operations. Parameters: Name Type Description Default thebuilder UefiBuilder UefiBuild object for env information required Returns: Type Description int 0 or NonZero for success or failure","title":"do_pre_build()"},{"location":"api/environment/plugintypes/uefi_helper_plugin/","text":"uefi_helper_plugin \u00b6 Plugin that supports adding Extension or helper methods to the build environment. IUefiHelperPlugin \u00b6 The class that should be subclassed when creating a UEFI Helper Plugin. RegisterHelpers \u00b6 RegisterHelpers ( obj ) Allows a plugin to register its functions. Tip obj.Register() Args: obj (HelperFunctions): HelperFunctions object that allows functional registration HelperFunctions \u00b6 A class that contains all registed functions. Attributes: Name Type Description RegisteredFunctions(dict) registered functions __init__ \u00b6 __init__ () Initializes instance. DebugLogRegisteredFunctions \u00b6 DebugLogRegisteredFunctions () Logs all registered functions and their source path. Uses logging.debug to write all registered functions and their source path. Register \u00b6 Register ( name , function , filepath ) Registers a plugin. Plugins that want to register a helper function should call this routine for each function Parameters: Name Type Description Default name str name of the function required function func function being registered required filepath str filepath to this file required Tip os.path.abspath(__file__) HasFunction \u00b6 HasFunction ( name ) Returns if a function exists. Parameters: Name Type Description Default name str name of the function required Returns: Type Description bool if the function is registered or not. LoadFromPluginManager \u00b6 LoadFromPluginManager ( pm ) Load all IUefiHelperPlugins into the class. Uses the PluginManager class to get all IUefiHelperPlugins in the environment, then stores them all in a dict. Parameters: Name Type Description Default pm PluginManager class holding all plugins required Returns: Type Description int number of plugins that failed to be loaded.","title":"Uefi helper plugin"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin","text":"Plugin that supports adding Extension or helper methods to the build environment.","title":"uefi_helper_plugin"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.IUefiHelperPlugin","text":"The class that should be subclassed when creating a UEFI Helper Plugin.","title":"IUefiHelperPlugin"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.IUefiHelperPlugin.RegisterHelpers","text":"RegisterHelpers ( obj ) Allows a plugin to register its functions. Tip obj.Register() Args: obj (HelperFunctions): HelperFunctions object that allows functional registration","title":"RegisterHelpers()"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.HelperFunctions","text":"A class that contains all registed functions. Attributes: Name Type Description RegisteredFunctions(dict) registered functions","title":"HelperFunctions"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.HelperFunctions.__init__","text":"__init__ () Initializes instance.","title":"__init__()"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.HelperFunctions.DebugLogRegisteredFunctions","text":"DebugLogRegisteredFunctions () Logs all registered functions and their source path. Uses logging.debug to write all registered functions and their source path.","title":"DebugLogRegisteredFunctions()"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.HelperFunctions.Register","text":"Register ( name , function , filepath ) Registers a plugin. Plugins that want to register a helper function should call this routine for each function Parameters: Name Type Description Default name str name of the function required function func function being registered required filepath str filepath to this file required Tip os.path.abspath(__file__)","title":"Register()"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.HelperFunctions.HasFunction","text":"HasFunction ( name ) Returns if a function exists. Parameters: Name Type Description Default name str name of the function required Returns: Type Description bool if the function is registered or not.","title":"HasFunction()"},{"location":"api/environment/plugintypes/uefi_helper_plugin/#edk2toolext.environment.plugintypes.uefi_helper_plugin.HelperFunctions.LoadFromPluginManager","text":"LoadFromPluginManager ( pm ) Load all IUefiHelperPlugins into the class. Uses the PluginManager class to get all IUefiHelperPlugins in the environment, then stores them all in a dict. Parameters: Name Type Description Default pm PluginManager class holding all plugins required Returns: Type Description int number of plugins that failed to be loaded.","title":"LoadFromPluginManager()"},{"location":"api/invocables/edk2_ci_build/","text":"edk2_ci_build \u00b6 Code that supports CI/CD via the ci_build invocable. Contains a CIBuildSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2CiBuild invocable while allowing the invocable itself to remain platform agnostic. CiBuildSettingsManager \u00b6 Platform specific settings for Edk2CiBuild. Provide information necessary for stuart_ci_build.exe or edk2_ci_build.py to successfully execute. Example of Overriding CiBuildSettingsManager from edk2toolext.invocables.edk2_ci_build import CiBuildSettingsManager import yaml class CiManager ( CiBuildSettingsManager ): def GetDependencies ( self ): return { \"Path\" : \"/Common/MU\" , \"Url\" : \"https://github.com/Microsoft/mu_tiano_plus.git\" } GetName \u00b6 GetName () -> str Get the name of the repo, platform, or product being build by CI. Tip Required Override in a subclass Returns: Type Description str repo, platform, product GetPluginSettings \u00b6 GetPluginSettings () -> Dict [ str , Any ] Provide a dictionary of global settings for individual plugins. Tip Optional Override in a subclass Warning This sets the global plugin configurations. Edk2CiBuild automatically searches for, and loads, the package ci settings file if it exists. This file will override these settings. This file must be located at the base of the package named [Package].ci.yaml. Ex: EmbeddedPkg/EmbeddedPkg.ci.yaml. Returns: Type Description Dict [ str , Any ] plugin settings Edk2CiBuild \u00b6 Invocable supporting an iterative multi-package build and test process leveraging CI build plugins. GetSettingsClass \u00b6 GetSettingsClass () Returns the CiBuildSettingsManager class. Warning CiBuildSettingsManager must be subclassed in your platform settings file. GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Returns the filename (CI_BUILDLOG) of where the logs for the Edk2CiBuild invocable are stored in. Go \u00b6 Go () Executes the core functionality of the Edk2CiBuild invocable. merge_config staticmethod \u00b6 merge_config ( gbl_config , pkg_config , descriptor = {}) Merge two configurations. One global and one specificto the package to create the proper config for a plugin to execute. Returns: Type Description dict Dictionary of config settings main \u00b6 main () Entry point to invoke Edk2CiBuild.","title":"Edk2 ci build"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build","text":"Code that supports CI/CD via the ci_build invocable. Contains a CIBuildSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2CiBuild invocable while allowing the invocable itself to remain platform agnostic.","title":"edk2_ci_build"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.CiBuildSettingsManager","text":"Platform specific settings for Edk2CiBuild. Provide information necessary for stuart_ci_build.exe or edk2_ci_build.py to successfully execute. Example of Overriding CiBuildSettingsManager from edk2toolext.invocables.edk2_ci_build import CiBuildSettingsManager import yaml class CiManager ( CiBuildSettingsManager ): def GetDependencies ( self ): return { \"Path\" : \"/Common/MU\" , \"Url\" : \"https://github.com/Microsoft/mu_tiano_plus.git\" }","title":"CiBuildSettingsManager"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.CiBuildSettingsManager.GetName","text":"GetName () -> str Get the name of the repo, platform, or product being build by CI. Tip Required Override in a subclass Returns: Type Description str repo, platform, product","title":"GetName()"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.CiBuildSettingsManager.GetPluginSettings","text":"GetPluginSettings () -> Dict [ str , Any ] Provide a dictionary of global settings for individual plugins. Tip Optional Override in a subclass Warning This sets the global plugin configurations. Edk2CiBuild automatically searches for, and loads, the package ci settings file if it exists. This file will override these settings. This file must be located at the base of the package named [Package].ci.yaml. Ex: EmbeddedPkg/EmbeddedPkg.ci.yaml. Returns: Type Description Dict [ str , Any ] plugin settings","title":"GetPluginSettings()"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.Edk2CiBuild","text":"Invocable supporting an iterative multi-package build and test process leveraging CI build plugins.","title":"Edk2CiBuild"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.Edk2CiBuild.GetSettingsClass","text":"GetSettingsClass () Returns the CiBuildSettingsManager class. Warning CiBuildSettingsManager must be subclassed in your platform settings file.","title":"GetSettingsClass()"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.Edk2CiBuild.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Returns the filename (CI_BUILDLOG) of where the logs for the Edk2CiBuild invocable are stored in.","title":"GetLoggingFileName()"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.Edk2CiBuild.Go","text":"Go () Executes the core functionality of the Edk2CiBuild invocable.","title":"Go()"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.Edk2CiBuild.merge_config","text":"merge_config ( gbl_config , pkg_config , descriptor = {}) Merge two configurations. One global and one specificto the package to create the proper config for a plugin to execute. Returns: Type Description dict Dictionary of config settings","title":"merge_config()"},{"location":"api/invocables/edk2_ci_build/#edk2toolext.invocables.edk2_ci_build.main","text":"main () Entry point to invoke Edk2CiBuild.","title":"main()"},{"location":"api/invocables/edk2_ci_setup/","text":"edk2_ci_setup \u00b6 Code that supports CI/CD via the ci_setup invocable. Contains a CISetupSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2CiSetup invocable while allowing the invocable itself to remain platform agnostic. CiSetupSettingsManager \u00b6 Platform specific settings for Edk2CiSetup. Provide information necessary for stuart_ci_setup.exe or edk2_ci_setup.py to successfully execute. !!! example: \"Example of Overriding CiSetupSettingsManager\" from edk2toolext.invocables.edk2_ci_setup import CiSetupSettingsManager class CiManager ( CiSetupSettingsManager ): def GetDependencies ( self ): return { \"Path\" : \"/Common/MU\" , \"Url\" : \"https://github.com/Microsoft/mu_tiano_plus.git\" } GetDependencies \u00b6 GetDependencies () Get any Git Repository Dependendencies. This list of repositories will be resolved during the setup step. Tip Optional Override in subclass Tip Return an iterable of dictionary objects with the following fields { Pa t h : <required> Workspace rela t ive pa t h Url : <required> Url o f gi t repo Commi t : <op t io nal > Commi t t o checkou t o f repo Bra n ch : <op t io nal > Bra n ch t o checkou t (will checkou t mos t rece nt commi t i n bra n ch) Full : <op t io nal > Boolea n t o do shallow or Full checkou t . (de fault is False) Re feren cePa t h : <op t io nal > Workspace rela t ive pa t h t o gi t repo t o use as \"reference\" } Edk2CiBuildSetup \u00b6 Invocable supporting an iterative multi-package build and test process leveraging CI build plugins. Edk2CiBuildSetup sets up the necessary environment for Edk2CiBuild by preparing all necessary submodules. AddCommandLineOptions \u00b6 AddCommandLineOptions ( parser ) Adds command line arguments to Edk2CiBuild. RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. GetVerifyCheckRequired \u00b6 GetVerifyCheckRequired () Will not verify environment. GetSettingsClass \u00b6 GetSettingsClass () Returns the CiSetupSettingsManager class. Warning CiSetupSettingsManager must be subclassed in your platform settings file. GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Returns the filename (CISETUP) of where the logs for the Edk2CiBuild invocable are stored in. Go \u00b6 Go () Executes the core functionality of the Edk2CiSetup invocable. main \u00b6 main () Entry point invoke Edk2CiBuild.","title":"Edk2 ci setup"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup","text":"Code that supports CI/CD via the ci_setup invocable. Contains a CISetupSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2CiSetup invocable while allowing the invocable itself to remain platform agnostic.","title":"edk2_ci_setup"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.CiSetupSettingsManager","text":"Platform specific settings for Edk2CiSetup. Provide information necessary for stuart_ci_setup.exe or edk2_ci_setup.py to successfully execute. !!! example: \"Example of Overriding CiSetupSettingsManager\" from edk2toolext.invocables.edk2_ci_setup import CiSetupSettingsManager class CiManager ( CiSetupSettingsManager ): def GetDependencies ( self ): return { \"Path\" : \"/Common/MU\" , \"Url\" : \"https://github.com/Microsoft/mu_tiano_plus.git\" }","title":"CiSetupSettingsManager"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.CiSetupSettingsManager.GetDependencies","text":"GetDependencies () Get any Git Repository Dependendencies. This list of repositories will be resolved during the setup step. Tip Optional Override in subclass Tip Return an iterable of dictionary objects with the following fields { Pa t h : <required> Workspace rela t ive pa t h Url : <required> Url o f gi t repo Commi t : <op t io nal > Commi t t o checkou t o f repo Bra n ch : <op t io nal > Bra n ch t o checkou t (will checkou t mos t rece nt commi t i n bra n ch) Full : <op t io nal > Boolea n t o do shallow or Full checkou t . (de fault is False) Re feren cePa t h : <op t io nal > Workspace rela t ive pa t h t o gi t repo t o use as \"reference\" }","title":"GetDependencies()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup","text":"Invocable supporting an iterative multi-package build and test process leveraging CI build plugins. Edk2CiBuildSetup sets up the necessary environment for Edk2CiBuild by preparing all necessary submodules.","title":"Edk2CiBuildSetup"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup.AddCommandLineOptions","text":"AddCommandLineOptions ( parser ) Adds command line arguments to Edk2CiBuild.","title":"AddCommandLineOptions()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser.","title":"RetrieveCommandLineOptions()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup.GetVerifyCheckRequired","text":"GetVerifyCheckRequired () Will not verify environment.","title":"GetVerifyCheckRequired()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup.GetSettingsClass","text":"GetSettingsClass () Returns the CiSetupSettingsManager class. Warning CiSetupSettingsManager must be subclassed in your platform settings file.","title":"GetSettingsClass()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Returns the filename (CISETUP) of where the logs for the Edk2CiBuild invocable are stored in.","title":"GetLoggingFileName()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.Edk2CiBuildSetup.Go","text":"Go () Executes the core functionality of the Edk2CiSetup invocable.","title":"Go()"},{"location":"api/invocables/edk2_ci_setup/#edk2toolext.invocables.edk2_ci_setup.main","text":"main () Entry point invoke Edk2CiBuild.","title":"main()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/","text":"edk2_multipkg_aware_invocable \u00b6 An intermediate class that supports a multi-package aware invocable process. Provides two main classes, the MultiPkgAwareSettingsInterface and the Edk2MultiPkgAwareInvocable that act as an intermediate class that other invocables that require a multi-package aware invocable process. These classes should only be subclassed if a new invocable is being developed. Any Edk2MultiPkgAwareInvocable should be platform agnostic and work for any platform. Platform specific data is provided via the MultiPkgAwareSettingsInterface MultiPkgAwareSettingsInterface \u00b6 Settings to support Multi-Pkg functionality. This is an interface definition only to show which functions are required to be implemented and which functions can be implemented. Example of Overriding MultiPkgAwareSettingsInterface import os import logging import argparse from typing import Iterable , Tuple from edk2toolext.edk2_multipkg_aware_invocable import MultiPkgAwareSettingsInterface class NewInvocableSettingsManager ( MultiPkgAwareSettingsInterface ): def GetPackagesSupported ( self ): return ( \"PlatformPkg\" ,) def GetArchitecturesSupported ( self ): return ( \"IA32\" , \"X64\" ) def GetTargetsSupported ( self ): return ( \"TARGET\" , \"RELEASE\" ) def SetPackages ( self , list_of_requested_packages ): if len ( filter ( lambda pkg : pkg in self . GetPackagesSupported (), list_of_requested_packages )) != len ( list_of_requested_packages ): raise Exception ( \"Requested Packages contains unsupported Package\" ) else : self . pkgs = list_of_requested_packages def SetArchitectures ( self , list_of_requested_architectures ): if list_of_requested_architectures != self . GetPackagesSupported (): raise Exception ( \"Only Support IA32,X64 combination\" ) def SetTargets ( self , list_of_requested_targets ): if list_of_requested_targets != self . GetArchitecturesSupported (): raise Exception ( \"Only Support \" TARGET \", \" RELEASE combination \") Warning This interface should not be subclassed directly unless creating a new invocable type. Override these methods as a part of other subclasses invocable settings managers such as SetupSettingsManager, etc. GetPackagesSupported \u00b6 GetPackagesSupported () Returns an iterable of edk2 packages supported by this build. Tip Required Override in a subclass Returns: Type Description Iterable edk2 packages Note packages should be relative to workspace or package path GetArchitecturesSupported \u00b6 GetArchitecturesSupported () Returns an iterable of edk2 architectures supported by this build. Tip Required Override in a subclass Returns: Type Description Iterable architectures (X64, I32, etc.) GetTargetsSupported \u00b6 GetTargetsSupported () Returns an iterable of edk2 target tags supported by this build. Tip Required Override in a subclass Returns: Type Description Iterable targets (DEBUG, RELEASE, etc) SetPackages \u00b6 SetPackages ( list_of_requested_packages ) Confirms the requested package list is valid. Tip Optional Override in a subclass Parameters: Name Type Description Default list_of_requested_packages list [ str ] packages to be built required Raises: Type Description Exception A requested package is not supported SetArchitectures \u00b6 SetArchitectures ( list_of_requested_architectures ) Confirms the requested architecture list is valid. Tip Optional Override in a subclass Parameters: Name Type Description Default list_of_requested_architectures list [ str ] architectures to be built required Raises: Type Description Exception A requested architecture is not supported SetTargets \u00b6 SetTargets ( list_of_requested_target ) Confirms the requested target list is valid. Tip Optional Override in a subclass Parameters: Name Type Description Default list_of_requested_target list [ str ] targets to use required Raises: Type Description Exception A requested target is not supported Edk2MultiPkgAwareInvocable \u00b6 Base class for Multi-Pkg aware invocable. Attributes: Name Type Description requested_architecture_list list requested architectures to build requested_package_list list requested packages to build requested_target_list list requested targets to use Tip Checkout Edk2Invocable Attributes to find any additional attributes that might exist. Warning This invocable should only be subclassed if creating a new invocable __init__ \u00b6 __init__ () Initializes the Invocable. AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj ) Adds command line options to the argparser. RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser . InputParametersConfiguredCallback \u00b6 InputParametersConfiguredCallback () Initializes the environment once input parameters are collected.","title":"Edk2 multipkg aware invocable"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable","text":"An intermediate class that supports a multi-package aware invocable process. Provides two main classes, the MultiPkgAwareSettingsInterface and the Edk2MultiPkgAwareInvocable that act as an intermediate class that other invocables that require a multi-package aware invocable process. These classes should only be subclassed if a new invocable is being developed. Any Edk2MultiPkgAwareInvocable should be platform agnostic and work for any platform. Platform specific data is provided via the MultiPkgAwareSettingsInterface","title":"edk2_multipkg_aware_invocable"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface","text":"Settings to support Multi-Pkg functionality. This is an interface definition only to show which functions are required to be implemented and which functions can be implemented. Example of Overriding MultiPkgAwareSettingsInterface import os import logging import argparse from typing import Iterable , Tuple from edk2toolext.edk2_multipkg_aware_invocable import MultiPkgAwareSettingsInterface class NewInvocableSettingsManager ( MultiPkgAwareSettingsInterface ): def GetPackagesSupported ( self ): return ( \"PlatformPkg\" ,) def GetArchitecturesSupported ( self ): return ( \"IA32\" , \"X64\" ) def GetTargetsSupported ( self ): return ( \"TARGET\" , \"RELEASE\" ) def SetPackages ( self , list_of_requested_packages ): if len ( filter ( lambda pkg : pkg in self . GetPackagesSupported (), list_of_requested_packages )) != len ( list_of_requested_packages ): raise Exception ( \"Requested Packages contains unsupported Package\" ) else : self . pkgs = list_of_requested_packages def SetArchitectures ( self , list_of_requested_architectures ): if list_of_requested_architectures != self . GetPackagesSupported (): raise Exception ( \"Only Support IA32,X64 combination\" ) def SetTargets ( self , list_of_requested_targets ): if list_of_requested_targets != self . GetArchitecturesSupported (): raise Exception ( \"Only Support \" TARGET \", \" RELEASE combination \") Warning This interface should not be subclassed directly unless creating a new invocable type. Override these methods as a part of other subclasses invocable settings managers such as SetupSettingsManager, etc.","title":"MultiPkgAwareSettingsInterface"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface.GetPackagesSupported","text":"GetPackagesSupported () Returns an iterable of edk2 packages supported by this build. Tip Required Override in a subclass Returns: Type Description Iterable edk2 packages Note packages should be relative to workspace or package path","title":"GetPackagesSupported()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface.GetArchitecturesSupported","text":"GetArchitecturesSupported () Returns an iterable of edk2 architectures supported by this build. Tip Required Override in a subclass Returns: Type Description Iterable architectures (X64, I32, etc.)","title":"GetArchitecturesSupported()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface.GetTargetsSupported","text":"GetTargetsSupported () Returns an iterable of edk2 target tags supported by this build. Tip Required Override in a subclass Returns: Type Description Iterable targets (DEBUG, RELEASE, etc)","title":"GetTargetsSupported()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface.SetPackages","text":"SetPackages ( list_of_requested_packages ) Confirms the requested package list is valid. Tip Optional Override in a subclass Parameters: Name Type Description Default list_of_requested_packages list [ str ] packages to be built required Raises: Type Description Exception A requested package is not supported","title":"SetPackages()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface.SetArchitectures","text":"SetArchitectures ( list_of_requested_architectures ) Confirms the requested architecture list is valid. Tip Optional Override in a subclass Parameters: Name Type Description Default list_of_requested_architectures list [ str ] architectures to be built required Raises: Type Description Exception A requested architecture is not supported","title":"SetArchitectures()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.MultiPkgAwareSettingsInterface.SetTargets","text":"SetTargets ( list_of_requested_target ) Confirms the requested target list is valid. Tip Optional Override in a subclass Parameters: Name Type Description Default list_of_requested_target list [ str ] targets to use required Raises: Type Description Exception A requested target is not supported","title":"SetTargets()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.Edk2MultiPkgAwareInvocable","text":"Base class for Multi-Pkg aware invocable. Attributes: Name Type Description requested_architecture_list list requested architectures to build requested_package_list list requested packages to build requested_target_list list requested targets to use Tip Checkout Edk2Invocable Attributes to find any additional attributes that might exist. Warning This invocable should only be subclassed if creating a new invocable","title":"Edk2MultiPkgAwareInvocable"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.Edk2MultiPkgAwareInvocable.__init__","text":"__init__ () Initializes the Invocable.","title":"__init__()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.Edk2MultiPkgAwareInvocable.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj ) Adds command line options to the argparser.","title":"AddCommandLineOptions()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.Edk2MultiPkgAwareInvocable.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser .","title":"RetrieveCommandLineOptions()"},{"location":"api/invocables/edk2_multipkg_aware_invocable/#edk2toolext.invocables.edk2_multipkg_aware_invocable.Edk2MultiPkgAwareInvocable.InputParametersConfiguredCallback","text":"InputParametersConfiguredCallback () Initializes the environment once input parameters are collected.","title":"InputParametersConfiguredCallback()"},{"location":"api/invocables/edk2_platform_build/","text":"edk2_platform_build \u00b6 Invocable class that does a build. Contains a BuildSettingsManager that must be subclassed in a build settings file, along with a UefiBuilder subclass. This provides platform specific information to the Edk2PlatformBuild invocable while allowing the invocable itself to remain platform agnostic. BuildSettingsManager \u00b6 Platform specific settings for Edk2PlatformBuild. Provides information necessary for stuart_build.exe or edk2_platform_build.py to successfully execute. Example of Overriding BuildSettingsManager from edk2toolext.invocables.edk2_platform_build import BuildSettingsManager class PlatformManager ( BuildSettingsManager ): def GetName ( self ) -> str : return \"QemuQ35\" GetName \u00b6 GetName () -> str Get the name of the repo, platform, or product being build. Tip Optional Override in subclass Returns: Type Description str Name of the repo, platform, or product Edk2PlatformBuild \u00b6 Invocable that performs some environment setup,Imports UefiBuilder and calls go. AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj ) Adds command line options to the argparser. RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. GetSettingsClass \u00b6 GetSettingsClass () Returns the BuildSettingsManager class. Warning CiSetupSettingsManager must be subclassed in your platform settings file. GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Returns the filename of where the logs for the Edk2PlatformBuild invocable are stored in. Go \u00b6 Go () Executes the core functionality of the Edk2PlatformBuild invocable. main \u00b6 main () Entry point invoke Edk2PlatformBuild.","title":"Edk2 platform build"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build","text":"Invocable class that does a build. Contains a BuildSettingsManager that must be subclassed in a build settings file, along with a UefiBuilder subclass. This provides platform specific information to the Edk2PlatformBuild invocable while allowing the invocable itself to remain platform agnostic.","title":"edk2_platform_build"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.BuildSettingsManager","text":"Platform specific settings for Edk2PlatformBuild. Provides information necessary for stuart_build.exe or edk2_platform_build.py to successfully execute. Example of Overriding BuildSettingsManager from edk2toolext.invocables.edk2_platform_build import BuildSettingsManager class PlatformManager ( BuildSettingsManager ): def GetName ( self ) -> str : return \"QemuQ35\"","title":"BuildSettingsManager"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.BuildSettingsManager.GetName","text":"GetName () -> str Get the name of the repo, platform, or product being build. Tip Optional Override in subclass Returns: Type Description str Name of the repo, platform, or product","title":"GetName()"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.Edk2PlatformBuild","text":"Invocable that performs some environment setup,Imports UefiBuilder and calls go.","title":"Edk2PlatformBuild"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.Edk2PlatformBuild.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj ) Adds command line options to the argparser.","title":"AddCommandLineOptions()"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.Edk2PlatformBuild.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser.","title":"RetrieveCommandLineOptions()"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.Edk2PlatformBuild.GetSettingsClass","text":"GetSettingsClass () Returns the BuildSettingsManager class. Warning CiSetupSettingsManager must be subclassed in your platform settings file.","title":"GetSettingsClass()"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.Edk2PlatformBuild.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Returns the filename of where the logs for the Edk2PlatformBuild invocable are stored in.","title":"GetLoggingFileName()"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.Edk2PlatformBuild.Go","text":"Go () Executes the core functionality of the Edk2PlatformBuild invocable.","title":"Go()"},{"location":"api/invocables/edk2_platform_build/#edk2toolext.invocables.edk2_platform_build.main","text":"main () Entry point invoke Edk2PlatformBuild.","title":"main()"},{"location":"api/invocables/edk2_pr_eval/","text":"edk2_pr_eval \u00b6 Invocable that checks the diff between a branch and head. Identifies any packages that needs to be build. Contains a PrEvalSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2PrEval invocable while allowing the invocable itself to remain platform agnostic. PrEvalSettingsManager \u00b6 Platform specific Settings for Edk2PrEval. provide information necessary for stuart_pr_eval.exe or edk2_pr_eval.py to successfully execute. Example of Overriding PrEvalSettingsManager from edk2toolext.invocables.edk2_pr_eval import PrEvalSettingsManager class PrEvalManager ( PrEvalSettingsManager ): def FilterPackagesToTest ( self , changedFilesList : list , potentialPackagesList : list ) -> list : filtered_packages = [] for file in changedFilesList : for package in potentialPackagesList : if package . startswith ( potentialPackagesList ): filtered_packages . append ( package ) return list ( set ( filtered_packages )) def GetPlatformDscAndConfig ( self ) -> tuple : return None FilterPackagesToTest \u00b6 FilterPackagesToTest ( changedFilesList : list , potentialPackagesList : list ) -> list Filter potential packages to test based on changed files. Tip Optional Override in a subclass Parameters: Name Type Description Default changedFilesList list files changed in this PR required potentialPackagesList list packages from GetPackagesSupported() or from command line option -p, --pkg, --pkg-dir from Edk2MultiPkgAwareInvocable required Returns: Type Description list filtered packages to test Note Default implementation does zero filtering GetPlatformDscAndConfig \u00b6 GetPlatformDscAndConfig () -> tuple Provide a platform dsc and config. If a platform desires to provide its DSC then Policy 4 will evaluate if any of the changes will be built in the dsc. Tip Optional Override in a subclass Returns: Type Description tuple (workspace relative path to dsc file, input dictionary of dsc key value pairs) Edk2PrEval \u00b6 Invocable to determine what packages should be tested. Evaluate the changes and determine what packages of the supplied packages should be tested based on impact from the changes AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj ) Adds command line options to the argparser. RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. GetVerifyCheckRequired \u00b6 GetVerifyCheckRequired () Will not call self_describing_environment.VerifyEnvironment because it might not be set up yet. GetSettingsClass \u00b6 GetSettingsClass () Returns the PrEvalSettingsManager class. Warning PrEvalSettingsManager must be subclassed in your platform settings file. GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Returns the filename (PREVALLOG) of where the logs for the Edk2CiBuild invocable are stored in. Go \u00b6 Go () Executes the core functionality of the Edk2CiBuild invocable. get_packages_to_build \u00b6 get_packages_to_build ( possible_packages : list ) -> dict Returns a dictionary of packages to build. Parameters: Name Type Description Default possible_packages list list of possible packages required Returns: Type Description dict filtered packages to build main \u00b6 main () Entry point to invoke Edk2PrEval.","title":"Edk2 pr eval"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval","text":"Invocable that checks the diff between a branch and head. Identifies any packages that needs to be build. Contains a PrEvalSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2PrEval invocable while allowing the invocable itself to remain platform agnostic.","title":"edk2_pr_eval"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.PrEvalSettingsManager","text":"Platform specific Settings for Edk2PrEval. provide information necessary for stuart_pr_eval.exe or edk2_pr_eval.py to successfully execute. Example of Overriding PrEvalSettingsManager from edk2toolext.invocables.edk2_pr_eval import PrEvalSettingsManager class PrEvalManager ( PrEvalSettingsManager ): def FilterPackagesToTest ( self , changedFilesList : list , potentialPackagesList : list ) -> list : filtered_packages = [] for file in changedFilesList : for package in potentialPackagesList : if package . startswith ( potentialPackagesList ): filtered_packages . append ( package ) return list ( set ( filtered_packages )) def GetPlatformDscAndConfig ( self ) -> tuple : return None","title":"PrEvalSettingsManager"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.PrEvalSettingsManager.FilterPackagesToTest","text":"FilterPackagesToTest ( changedFilesList : list , potentialPackagesList : list ) -> list Filter potential packages to test based on changed files. Tip Optional Override in a subclass Parameters: Name Type Description Default changedFilesList list files changed in this PR required potentialPackagesList list packages from GetPackagesSupported() or from command line option -p, --pkg, --pkg-dir from Edk2MultiPkgAwareInvocable required Returns: Type Description list filtered packages to test Note Default implementation does zero filtering","title":"FilterPackagesToTest()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.PrEvalSettingsManager.GetPlatformDscAndConfig","text":"GetPlatformDscAndConfig () -> tuple Provide a platform dsc and config. If a platform desires to provide its DSC then Policy 4 will evaluate if any of the changes will be built in the dsc. Tip Optional Override in a subclass Returns: Type Description tuple (workspace relative path to dsc file, input dictionary of dsc key value pairs)","title":"GetPlatformDscAndConfig()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval","text":"Invocable to determine what packages should be tested. Evaluate the changes and determine what packages of the supplied packages should be tested based on impact from the changes","title":"Edk2PrEval"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj ) Adds command line options to the argparser.","title":"AddCommandLineOptions()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser.","title":"RetrieveCommandLineOptions()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.GetVerifyCheckRequired","text":"GetVerifyCheckRequired () Will not call self_describing_environment.VerifyEnvironment because it might not be set up yet.","title":"GetVerifyCheckRequired()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.GetSettingsClass","text":"GetSettingsClass () Returns the PrEvalSettingsManager class. Warning PrEvalSettingsManager must be subclassed in your platform settings file.","title":"GetSettingsClass()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Returns the filename (PREVALLOG) of where the logs for the Edk2CiBuild invocable are stored in.","title":"GetLoggingFileName()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.Go","text":"Go () Executes the core functionality of the Edk2CiBuild invocable.","title":"Go()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.Edk2PrEval.get_packages_to_build","text":"get_packages_to_build ( possible_packages : list ) -> dict Returns a dictionary of packages to build. Parameters: Name Type Description Default possible_packages list list of possible packages required Returns: Type Description dict filtered packages to build","title":"get_packages_to_build()"},{"location":"api/invocables/edk2_pr_eval/#edk2toolext.invocables.edk2_pr_eval.main","text":"main () Entry point to invoke Edk2PrEval.","title":"main()"},{"location":"api/invocables/edk2_setup/","text":"edk2_setup \u00b6 Code that updates required submodules. Contains a SetupSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2PlatformSetup invocable while allowing the invocable itself to remain platform agnostic. RequiredSubmodule \u00b6 A class containing information about a git submodule. __init__ \u00b6 __init__ ( path : str , recursive : bool = True ) Object to hold necessary information for resolving submodules. Parameters: Name Type Description Default path str workspace relative path to submodule that must be synchronized and updated required recursive bool if recursion should be used in this submodule True SetupSettingsManager \u00b6 Platform specific settings for Edk2PlatformSetup. Provides information necessary for stuart_setup.exe or edk2_setup.py to successfully execute for a given platform. Example of Overriding SetupSettingsManager from edk2toolext.invocables.edk2_setup import SetupSettingsManager , RequiredSubmodule class PlatformManager ( SetupSettingsManager ): def GetRequiredSubmodules ( self ) -> List [ RequiredSubmodule ]: return [ RequiredSubmodule ( 'Common/MU' , True )] GetRequiredSubmodules \u00b6 GetRequiredSubmodules () -> List [ RequiredSubmodule ] Provides a list of required git submodules. These submodules are those that must be setup for the platform to successfully build. Tip Optional Override in a subclass Returns: Type Description List [ RequiredSubmodule ] A list of required submodules, or an empty list Edk2PlatformSetup \u00b6 Invocable that updates git submodules listed in RequiredSubmodules. AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj ) Adds command line options to the argparser. RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. GetVerifyCheckRequired \u00b6 GetVerifyCheckRequired () Will not call self_describing_environment.VerifyEnvironment because it hasn't been set up yet. GetSettingsClass \u00b6 GetSettingsClass () Returns the SetupSettingsManager class. Warning SetupSettingsManager must be subclassed in your platform settings file. GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Returns the filename (SETUPLOG) of where the logs for the Edk2CiBuild invocable are stored in. Go \u00b6 Go () Executes the core functionality of the Edk2PlatformSetup invocable. main \u00b6 main () Entry point to invoke Edk2PlatformSetup.","title":"Edk2 setup"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup","text":"Code that updates required submodules. Contains a SetupSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2PlatformSetup invocable while allowing the invocable itself to remain platform agnostic.","title":"edk2_setup"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.RequiredSubmodule","text":"A class containing information about a git submodule.","title":"RequiredSubmodule"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.RequiredSubmodule.__init__","text":"__init__ ( path : str , recursive : bool = True ) Object to hold necessary information for resolving submodules. Parameters: Name Type Description Default path str workspace relative path to submodule that must be synchronized and updated required recursive bool if recursion should be used in this submodule True","title":"__init__()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.SetupSettingsManager","text":"Platform specific settings for Edk2PlatformSetup. Provides information necessary for stuart_setup.exe or edk2_setup.py to successfully execute for a given platform. Example of Overriding SetupSettingsManager from edk2toolext.invocables.edk2_setup import SetupSettingsManager , RequiredSubmodule class PlatformManager ( SetupSettingsManager ): def GetRequiredSubmodules ( self ) -> List [ RequiredSubmodule ]: return [ RequiredSubmodule ( 'Common/MU' , True )]","title":"SetupSettingsManager"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.SetupSettingsManager.GetRequiredSubmodules","text":"GetRequiredSubmodules () -> List [ RequiredSubmodule ] Provides a list of required git submodules. These submodules are those that must be setup for the platform to successfully build. Tip Optional Override in a subclass Returns: Type Description List [ RequiredSubmodule ] A list of required submodules, or an empty list","title":"GetRequiredSubmodules()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup","text":"Invocable that updates git submodules listed in RequiredSubmodules.","title":"Edk2PlatformSetup"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj ) Adds command line options to the argparser.","title":"AddCommandLineOptions()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser.","title":"RetrieveCommandLineOptions()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup.GetVerifyCheckRequired","text":"GetVerifyCheckRequired () Will not call self_describing_environment.VerifyEnvironment because it hasn't been set up yet.","title":"GetVerifyCheckRequired()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup.GetSettingsClass","text":"GetSettingsClass () Returns the SetupSettingsManager class. Warning SetupSettingsManager must be subclassed in your platform settings file.","title":"GetSettingsClass()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Returns the filename (SETUPLOG) of where the logs for the Edk2CiBuild invocable are stored in.","title":"GetLoggingFileName()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.Edk2PlatformSetup.Go","text":"Go () Executes the core functionality of the Edk2PlatformSetup invocable.","title":"Go()"},{"location":"api/invocables/edk2_setup/#edk2toolext.invocables.edk2_setup.main","text":"main () Entry point to invoke Edk2PlatformSetup.","title":"main()"},{"location":"api/invocables/edk2_update/","text":"edk2_update \u00b6 Updates external dependencies. Contains a UpdateSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2Update invocable while allowing the invocable itself to remain platform agnostic. UpdateSettingsManager \u00b6 Platform specific settings for Edk2Update. Provides information necessary for stuart_update.exe or edk2_update.py when updating the platform. Update settings manager has no additional APIs not already defined in it's super class, however The class should still be overwritten by the platform. Edk2Update \u00b6 Updates dependencies in workspace for active scopes. PerformUpdate \u00b6 PerformUpdate () Updates the dependencies. GetVerifyCheckRequired \u00b6 GetVerifyCheckRequired () Will not call self_describing_environment.VerifyEnvironment because ext_deps haven't been unpacked yet. GetSettingsClass \u00b6 GetSettingsClass () Returns the UpdateSettingsManager class. Warning UpdateSettingsManager must be subclassed in your platform settings file. GetLoggingFileName \u00b6 GetLoggingFileName ( loggerType ) Returns the filename (UPDATE_LOG) of where the logs for the Edk2CiBuild invocable are stored in. AddCommandLineOptions \u00b6 AddCommandLineOptions ( parserObj ) Adds command line options to the argparser. RetrieveCommandLineOptions \u00b6 RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser. Go \u00b6 Go () Executes the core functionality of the Edk2Update invocable. build_env_changed \u00b6 build_env_changed ( build_env , build_env_2 ) Return True if build_env has changed. main \u00b6 main () Entry point to invoke Edk2Update.","title":"Edk2 update"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update","text":"Updates external dependencies. Contains a UpdateSettingsManager that must be subclassed in a build settings file. This provides platform specific information to Edk2Update invocable while allowing the invocable itself to remain platform agnostic.","title":"edk2_update"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.UpdateSettingsManager","text":"Platform specific settings for Edk2Update. Provides information necessary for stuart_update.exe or edk2_update.py when updating the platform. Update settings manager has no additional APIs not already defined in it's super class, however The class should still be overwritten by the platform.","title":"UpdateSettingsManager"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update","text":"Updates dependencies in workspace for active scopes.","title":"Edk2Update"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.PerformUpdate","text":"PerformUpdate () Updates the dependencies.","title":"PerformUpdate()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.GetVerifyCheckRequired","text":"GetVerifyCheckRequired () Will not call self_describing_environment.VerifyEnvironment because ext_deps haven't been unpacked yet.","title":"GetVerifyCheckRequired()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.GetSettingsClass","text":"GetSettingsClass () Returns the UpdateSettingsManager class. Warning UpdateSettingsManager must be subclassed in your platform settings file.","title":"GetSettingsClass()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.GetLoggingFileName","text":"GetLoggingFileName ( loggerType ) Returns the filename (UPDATE_LOG) of where the logs for the Edk2CiBuild invocable are stored in.","title":"GetLoggingFileName()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.AddCommandLineOptions","text":"AddCommandLineOptions ( parserObj ) Adds command line options to the argparser.","title":"AddCommandLineOptions()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.RetrieveCommandLineOptions","text":"RetrieveCommandLineOptions ( args ) Retrieve command line options from the argparser.","title":"RetrieveCommandLineOptions()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.Edk2Update.Go","text":"Go () Executes the core functionality of the Edk2Update invocable.","title":"Go()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.build_env_changed","text":"build_env_changed ( build_env , build_env_2 ) Return True if build_env has changed.","title":"build_env_changed()"},{"location":"api/invocables/edk2_update/#edk2toolext.invocables.edk2_update.main","text":"main () Entry point to invoke Edk2Update.","title":"main()"},{"location":"features/creating_extdep/","text":"Making a new Ext Dep Type \u00b6 This will require a core code change in order to work! Please contact the maintainers to facilitate this process. 1) Make a new class \u00b6 This class needs to implement a few things... Required Functions \u00b6 These functions are not implemented by the base class. fetch \u00b6 If you wish your extdep type to be able to take advantage of the Stuart extdep cache, make sure to call super().fetch() before any type-specific code. If this returns True , a valid cache was found and the contents have been copied into the final destination. If a valid cache is not found and type-specific code must be used to fetch, make sure to call self.copy_to_global_cache(...) after successfully fetching so that the cache may be used on subsequent calls. Do this before populating the state file. Optional Functions \u00b6 These functions are implemented by the base class but you could overload them to add more functionality. I will describe the action of the base class here.\\ init \u00b6 __init__ sets up all the required fields from the descriptor object. If you are adding a field to the descriptor, just make sure to call super().__init__(descriptor) clean \u00b6 Clean will call shutil.rmtree(dir_path) twice and then give up. verify \u00b6 Verify is meant to return true if the state_file.json matches the ext_dep.json file. 2) Add your type to ExtDepFactory in edk2toolext.environment.external_dependency \u00b6 Adding your type here will be necessary in order for the ExtDepFactory to recognize your new type as valid.","title":"Creating Ext Deps"},{"location":"features/creating_extdep/#making-a-new-ext-dep-type","text":"This will require a core code change in order to work! Please contact the maintainers to facilitate this process.","title":"Making a new Ext Dep Type"},{"location":"features/creating_extdep/#1-make-a-new-class","text":"This class needs to implement a few things...","title":"1) Make a new class"},{"location":"features/creating_extdep/#required-functions","text":"These functions are not implemented by the base class.","title":"Required Functions"},{"location":"features/creating_extdep/#fetch","text":"If you wish your extdep type to be able to take advantage of the Stuart extdep cache, make sure to call super().fetch() before any type-specific code. If this returns True , a valid cache was found and the contents have been copied into the final destination. If a valid cache is not found and type-specific code must be used to fetch, make sure to call self.copy_to_global_cache(...) after successfully fetching so that the cache may be used on subsequent calls. Do this before populating the state file.","title":"fetch"},{"location":"features/creating_extdep/#optional-functions","text":"These functions are implemented by the base class but you could overload them to add more functionality. I will describe the action of the base class here.\\","title":"Optional Functions"},{"location":"features/creating_extdep/#init","text":"__init__ sets up all the required fields from the descriptor object. If you are adding a field to the descriptor, just make sure to call super().__init__(descriptor)","title":"init"},{"location":"features/creating_extdep/#clean","text":"Clean will call shutil.rmtree(dir_path) twice and then give up.","title":"clean"},{"location":"features/creating_extdep/#verify","text":"Verify is meant to return true if the state_file.json matches the ext_dep.json file.","title":"verify"},{"location":"features/creating_extdep/#2-add-your-type-to-extdepfactory-in-edk2toolextenvironmentexternal_dependency","text":"Adding your type here will be necessary in order for the ExtDepFactory to recognize your new type as valid.","title":"2) Add your type to ExtDepFactory in edk2toolext.environment.external_dependency"},{"location":"features/creating_invocable/","text":"Creating An Invocable \u00b6 Whether you spell it invocable or invocable, the idea of an Invocable is central to Stuart. If you're unfamiliar with what it is, refer to the \"Using\" document in the root docs folder or feature_invocable in the features folder. In a nutshell, an invocable is a small python script that gets the build environment setup for it. It gets a settings file (that the invocable defines the interface for) that provides information about what we are being invoked on. This guide references Project Mu, which is an open source fork of EDK2 that leverages edk2-pytools. This guide is written in the style of a tutorial. This is based on the real example of an invocable here . The problem statement \u00b6 One feature that Project Mu offers is that of a binary-packaged Crypto and Networking, known as SharedCrypto and SharedNetworking respectively. This allows your platform to skip the expensive step of compiling OpenSSL or other crypto libraries and instead use a known-good crypto library that is built from a known good source. For more information on SharedNetworking and SharedCrypto, go check it out here and here . Now, how are Shared Binaries built? Check out the code on github under NetworkPkg/SharedNetworking/DriverBuilder.py (it may move, this is where it was at time of writing), which is the invocable that powers the shared binaries. SharedNetworking in particular is a tricky problem because we want to build every architecture into an FV and package it into a NugetFeed. In a nutshell here's the flow we want: Acquire the dependencies we need (Crypto, OpenSSL, etc) Pull in any tooling that we require (mu_tools, nasm) Configure the environment for building with our tool chain Go through all the architectures we want to support and build them individually If all previous steps were successful, package it into a nuget package If given an API key, then publish to nuget Now a typical approach to this might be scripting through a batch script to invoke build.py, or invoking a stuart_build. This is a fine approach, particularly for a one off solution. But what if we change how nuget publishing is done? We need to update the batch script for both Crypto and Networking. Or perhaps we've thought of that and made a common script that our handy batch script invokes with the right parameters. We hope you can see that as time goes on, the situation spirals out of control as more parameters and scripts are added, fewer people will know how to work this or want to touch it. Eventually a bright talented engineer with a little more time than experience will declare that they will attempt to refactor this process. In a nutshell that is the problem that the invocable framework in general is trying to solve. Steps 1-3 are done for you. Steps 4-6+ should be trivial to implement in a setting agnostic way. So let's start. The settings class \u00b6 Each invocable has a definition for a settings class. We would recommend looking through a few of the invocables inside of Stuart as a reference. You may choose to subclass another settings file, such as MultiPkgAwareSettingsInterface but in this case, we won't. So let's start with some imports that we'll need along the way. We'll create a new file called DriverBuilder.py import os import logging from edk2toolext.environment import plugin_manager from edk2toolext.environment.plugintypes.uefi_helper_plugin import HelperFunctions from edk2toolext.edk2_invocable import Edk2Invocable from edk2toolext.environment import self_describing_environment from edk2toolext.environment import shell_environment from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext import edk2_logging One final import is needed that will seem a little strange. import DriverBuilder Stuart expects your invocable to be running in the python namespace that it is defined in. If you run your builder directly from the command-line, it will be running in __main__, which can cause problems. In a nutshell, you'll need to import the name of your file. We'll see where this is used at the end. Now the settings class! class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' raise NotImplementedError () def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' raise NotImplementedError () def GetName ( self ): ''' Get the name of the repo, platform, or product being build by CI ''' raise NotImplementedError () def AddCommandLineOptions ( self , parserObj ): ''' Implement in subclass to add command line options to the argparser ''' pass def RetrieveCommandLineOptions ( self , args ): ''' Implement in subclass to retrieve command line options from the argparser ''' pass def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return \"\" We've implemented a few methods that are needed to get the SDE off the ground. GetActiveScopes is needed to init the SDE. This causes different plugins to load or not GetWorkspaceRoot gets the folder that is the root of your workspace GetPackagePaths gets the folder locations that you will resolve EDK2 paths against GetName is the thing we are building, it will be used to name certain files like logs AddCommandLineOptions gives our settings the chance to set items in the parser object RetrieveCommandLineOptions gives us the chance to read the arguments from the command-line Now that we have our base methods, let's add one more to control the configurations we are going to build. class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' .... def GetConfigurations ( self ): ''' Gets the next configuration of this run This is a generator pattern - use yield ''' raise NotImplementedError () GetConfigurations is our way to get the configurations we want to build. We'll use a generator/iterator pattern here that we'll see later. We also need some methods to have callbacks into various stages of the process so that we can do nuget commands and prepare the nuget package. class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' .... def PreFirstBuildHook ( self ): ''' Called before the first build ''' return 0 def PostFinalBuildHook ( self , ret ): ''' Called after the final build with the summed return code ''' return 0 def PostBuildHook ( self , ret ): ''' Called after each build with the return code ''' return 0 def PreBuildHook ( self ): ''' Called before each build ''' return 0 These hooks are pretty self evident, but they'll be called at various point in the process. Now with our current file, we can define a settings file that implements the settings class. That doesn't really net us much. The invocable \u00b6 The invocable is actually the simplest part of this class Edk2BinaryBuild ( Edk2Invocable ): def GetLoggingLevel ( self , loggerType ): ''' Get the logging level for a given type base == lowest logging level supported con == Screen logging txt == plain text file logging md == markdown file logging ''' if ( loggerType == \"con\" ) and not self . Verbose : return logging . WARNING return logging . DEBUG def AddCommandLineOptions ( self , parser ): pass def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' pass def GetSettingsClass ( self ): return BinaryBuildSettingsManager def GetLoggingFileName ( self , loggerType ): return \"BINARY_BUILDLOG\" def Go ( self ): return 0 GetLoggingLevel we can get the logging level that we care about for the type of log we are creating AddCommandLineOption similar to previous settings manager class RetrieveCommandLineOptions similar to above GetSettingsClass the class that we want to look for GetLoggingFileName the name of the file we want to create for txt and markdown files. Go is the business logic of the invocable. Now let's implement an actual method to handle main and being called from the command-line or a pip link. def main (): Edk2BinaryBuild () . Invoke () if __name__ == \"__main__\" : DriverBuilder . main () # otherwise we're in __main__ context As you can see, we call ourselves via import rather than just directly calling main. This is a quirk/design flaw that might be revisited in the future, but in the meantime, this is a workaround. Now that we have a way to invoke this and execute our go, we can call if from the command-line. If we were to run this right now, we would see this as output (assuming you created an empty settings class). SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Summary PROGRESS - Success We can see that we're initializing the SDE, loading plugins and helpers, and starting the invocable. All for virtually free! Now let's start implementing the meat of the invocation. class Edk2BinaryBuild ( Edk2Invocable ): ... def Go ( self ): ret = 0 env = shell_environment . GetBuildVars () # set our environment with specific variables that we care about that EDK2 needs env . SetValue ( \"PRODUCT_NAME\" , self . PlatformSettings . GetName (), \"Platform Hard-coded\" ) env . SetValue ( \"BLD_*_BUILDID_STRING\" , \"201905\" , \"Current Version\" ) env . SetValue ( \"BUILDREPORTING\" , \"TRUE\" , \"Platform Hard-coded\" ) # make sure we always do a build report env . SetValue ( \"BUILDREPORT_TYPES\" , 'PCD DEPEX LIBRARY BUILD_FLAGS' , \"Platform Hard-coded\" ) # Run pre build hook ret = self . PlatformSettings . PreFirstBuildHook () # get workspace and package paths for ws = self . GetWorkspaceRoot () pp = self . PlatformSettings . GetPackagesPath () # run each configuration for config in self . PlatformSettings . GetConfigurations (): ret = self . PlatformSettings . PreBuildHook () # run pre build hook if ret != 0 : raise RuntimeError ( \"Failed prebuild hook\" ) edk2_logging . log_progress ( f \"--Running next configuration--\" ) logging . info ( config ) # log our configuration out to the log shell_environment . CheckpointBuildVars () # checkpoint our config env = shell_environment . GetBuildVars () # get our checkpointed variables # go through the item in the current configuration and apply to environment for key in config : env . SetValue ( key , config [ key ], \"provided by configuration\" ) # make sure to set this after in case the config did env . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"provided by driver_builder\" ) platformBuilder = UefiBuilder () # create our builder # run our builder and add to ret ret = platformBuilder . Go ( ws , os . pathsep . join ( pp ), self . helper , self . plugin_manager ) # call our post build hook ret = self . PlatformSettings . PostBuildHook ( ret ) # if we have a non zero return code, throw an error and call our final build hook if ret != 0 : self . PlatformSettings . PostFinalBuildHook ( ret ) # make sure to call our post final hook return ret shell_environment . RevertBuildVars () # revert our shell environment back to what it was # make sure to do our final build hook self . PlatformSettings . PostFinalBuildHook ( ret ) return ret The comments in the code are there to help you understand it. The basic process is: Setup the environment with your product strings and configuration for EDK2 Call prebuild hook Go through each of our configuration Checkpoint the environment Call prebuild hook Call UefiBuild Call PostBuild Revert checkpoint of environment Settings File \u00b6 Now here's the settings file for the invocable. In this example, you would have two settings file for SharedNetworking and SharedCrypto, but the one invocable. Here's what we will be importing: import os import logging from edk2toolext.invocables.edk2_ci_setup import CiSetupSettingsManager from edk2toolext.invocables.edk2_update import UpdateSettingsManager try : from DriverBuilder import BinaryBuildSettingsManager except Exception : class BinaryBuildSettingsManager : def __init__ (): raise RuntimeError ( \"You shouldn't be including this\" ) pass from edk2toollib.utility_functions import GetHostInfo One of the key features of settings class is that it can implement multiple settings managers, or you can have multiple classes in the file that implement that particular SettingsManager class. The invocable finds the first class in the file that implements that particular settings class that we care about. Now that we have our imports, we will create a SettingsManager class that implements CiSetupSettingsManager, UpdateSettingsManager, and BinaryBuildSettingsManager. # # ========================================================================== # PLATFORM BUILD ENVIRONMENT CONFIGURATION # class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . OUTPUT_DIR = os . path . join ( WORKSPACE_PATH , \"Build\" , \".NugetOutput\" ) self . ws = WORKSPACE_PATH pass def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' scopes = ( \"corebuild\" , \"sharednetworking_build\" , ) return scopes We have implemented GetActiveScopes and the init function. Let's implement the hooks. class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): ... def PreFirstBuildHook ( self ): output_dir = self . OUTPUT_DIR try : if os . path . exists ( output_dir ): logging . warning ( f \"Deleting { output_dir } \" ) shutil . rmtree ( output_dir , ignore_errors = True ) os . makedirs ( output_dir ) except : pass self . nuget_version = self . _GetNextVersion ( self . nuget_version ) return 0 def PostBuildHook ( self , ret ): if ret == 0 : ret = self . _CollectNuget () if ret != 0 : logging . error ( \"Error occurred in post build hook\" ) return ret def PostFinalBuildHook ( self , ret ): if ret != 0 : logging . error ( \"There was failure along the way aborting NUGET publish\" ) return self . _PublishNuget () Some of the functions such as _CollectNuget have been redacted for brevity. On PostBuild we collect the files into the nuget package. On PreBuild we figure out the next version of our nuget package and delete what we've previously collected. On the final build, we publish the nuget file. Now we will implement a few more pieces needed class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): ... def GetConfigurations ( self ): TARGETS = self . GetTargetsSupported () ARCHS = self . GetArchitecturesSupported () # combine options together for target in TARGETS : for arch in ARCHS : self . target = target self . arch = arch yield ({ \"TARGET\" : target , \"TARGET_ARCH\" : arch , \"ACTIVE_PLATFORM\" : \"NetworkPkg/SharedNetworking/SharedNetworkPkg.dsc\" }) We use a generator to yield the settings we want each configuration to be. We iterate through these in the invocable and apply them to the environment. Since you own the invocable, you can modify this as you see fit, which makes this very modular. Let's add in functions for the other SettingsManagers. class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): ... def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return self . pp def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return self . rr def GetName ( self ): return \"SharedNetworking\" def GetPackagesSupported ( self ): return \"NetworkPkg\" def GetArchitecturesSupported ( self ): return [ \"IA32\" , \"AARCH64\" , \"X64\" ] def GetTargetsSupported ( self ): return [ \"DEBUG\" , \"RELEASE\" ] def GetDependencies ( self ): return [] The methods implemented here are a mix of our own settings class and other invocables such as stuart_update or stuart_setup. Hopefully they're straightforward and easy to follow. Conclusion \u00b6 That brings us to the end of the tutorial, you should have a working invocable and a settings file (well with some methods missing). Here they are for easy copy and pasting: DriverBuilder.py \u00b6 # @file Edk2BinaryBuild.py # This module contains code that supports building of binary files # This is the main entry for the build and test process of binary builds ## # Copyright (c) Microsoft Corporation # # SPDX-License-Identifier: BSD-2-Clause-Patent ## import os import logging from edk2toolext.environment import plugin_manager from edk2toolext.environment.plugintypes.uefi_helper_plugin import HelperFunctions from edk2toolext.edk2_invocable import Edk2Invocable from edk2toolext.environment import self_describing_environment from edk2toolext.environment import shell_environment from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext import edk2_logging import DriverBuilder # this is a little weird class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' raise NotImplementedError () def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' raise NotImplementedError () def GetPackagesPath ( self ): pass def GetConfigurations ( self ): ''' Gets the next configuration of this run This is a generator pattern - use yield ''' raise NotImplementedError () def PreFirstBuildHook ( self ): ''' Called before the first build ''' return 0 def PostFinalBuildHook ( self , ret ): ''' Called after the final build with the summed return code ''' return 0 def PostBuildHook ( self , ret ): ''' Called after each build with the return code ''' return 0 def PreBuildHook ( self ): ''' Called before each build ''' return 0 def GetName ( self ): ''' Get the name of the repo, platform, or product being build by CI ''' raise NotImplementedError () def AddCommandLineOptions ( self , parserObj ): ''' Implement in subclass to add command line options to the argparser ''' pass def RetrieveCommandLineOptions ( self , args ): ''' Implement in subclass to retrieve command line options from the argparser ''' pass class Edk2BinaryBuild ( Edk2Invocable ): def GetLoggingLevel ( self , loggerType ): ''' Get the logging level for a given type base == lowest logging level supported con == Screen logging txt == plain text file logging md == markdown file logging ''' if ( loggerType == \"con\" ) and not self . Verbose : return logging . WARNING return logging . DEBUG def AddCommandLineOptions ( self , parser ): pass def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' pass def GetSettingsClass ( self ): return BinaryBuildSettingsManager def GetLoggingFileName ( self , loggerType ): return \"BINARY_BUILDLOG\" def Go ( self ): ret = 0 env = shell_environment . GetBuildVars () # set our environment with specific variables that we care about that EDK2 needs env . SetValue ( \"PRODUCT_NAME\" , self . PlatformSettings . GetName (), \"Platform Hardcoded\" ) env . SetValue ( \"BLD_*_BUILDID_STRING\" , \"201905\" , \"Current Version\" ) env . SetValue ( \"BUILDREPORTING\" , \"TRUE\" , \"Platform Hardcoded\" ) # make sure we always do a build report env . SetValue ( \"BUILDREPORT_TYPES\" , 'PCD DEPEX LIBRARY BUILD_FLAGS' , \"Platform Hardcoded\" ) # Run pre build hook ret = self . PlatformSettings . PreFirstBuildHook () # get workspace and package paths for ws = self . GetWorkspaceRoot () pp = self . PlatformSettings . GetPackagesPath () # run each configuration for config in self . PlatformSettings . GetConfigurations (): ret = self . PlatformSettings . PreBuildHook () # run pre build hook if ret != 0 : raise RuntimeError ( \"Failed prebuild hook\" ) edk2_logging . log_progress ( f \"--Running next configuration--\" ) logging . info ( config ) # log our configuration out to the log shell_environment . CheckpointBuildVars () # checkpoint our config env = shell_environment . GetBuildVars () # get our checkpointed variables # go through the item in the current configuration and apply to environment for key in config : env . SetValue ( key , config [ key ], \"provided by configuration\" ) # make sure to set this after in case the config did env . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"provided by driver_builder\" ) platformBuilder = UefiBuilder () # create our builder # run our builder and add to ret ret = platformBuilder . Go ( ws , os . pathsep . join ( pp ), self . helper , self . plugin_manager ) # call our post build hook ret = self . PlatformSettings . PostBuildHook ( ret ) # if we have a non zero return code, throw an error and call our final build hook if ret != 0 : self . PlatformSettings . PostFinalBuildHook ( ret ) # make sure to call our post final hook return ret shell_environment . RevertBuildVars () # revert our shell environment back to what it was # make sure to do our final build hook self . PlatformSettings . PostFinalBuildHook ( ret ) return ret def main (): Edk2BinaryBuild () . Invoke () if __name__ == \"__main__\" : DriverBuilder . main () # otherwise we're in __main__ context SharedNetworkingSettings \u00b6 ## # Script to Build Shared Crypto Driver # Copyright Microsoft Corporation, 2019 # # This is to build the SharedNetworking binaries for NuGet publishing ## import os import logging from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext.invocables.edk2_ci_setup import CiSetupSettingsManager from edk2toolext.invocables.edk2_update import UpdateSettingsManager try : from DriverBuilder_temp import BinaryBuildSettingsManager except Exception : class BinaryBuildSettingsManager : def __init__ (): raise RuntimeError ( \"You shouldn't be including this\" ) pass from edk2toollib.utility_functions import GetHostInfo # # ========================================================================== # PLATFORM BUILD ENVIRONMENT CONFIGURATION # class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . OUTPUT_DIR = os . path . join ( WORKSPACE_PATH , \"Build\" , \".NugetOutput\" ) self . ws = WORKSPACE_PATH self . pp = [ 'Common/MU_TIANO' , \"Silicon/Arm/MU_TIANO\" ] self . sp = SCRIPT_PATH self . nuget_version = None pass def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' scopes = ( \"corebuild\" , \"sharednetworking_build\" , ) return scopes def PreFirstBuildHook ( self ): output_dir = self . OUTPUT_DIR try : if os . path . exists ( output_dir ): logging . warning ( f \"Deleting { output_dir } \" ) shutil . rmtree ( output_dir , ignore_errors = True ) os . makedirs ( output_dir ) except : pass self . nuget_version = self . _GetNextVersion ( self . nuget_version ) return 0 def PostBuildHook ( self , ret ): if ret == 0 : ret = self . _CollectNuget () if ret != 0 : logging . error ( \"Error occurred in post build hook\" ) return ret def PostFinalBuildHook ( self , ret ): if ret != 0 : logging . error ( \"There was failure along the way aborting NUGET publish\" ) return self . _PublishNuget () def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return os . pathsep . join ( self . pp ) def GetName ( self ): return \"SharedNetworking\" def GetPackagesSupported ( self ): return \"NetworkPkg\" def GetArchitecturesSupported ( self ): return [ \"IA32\" , \"AARCH64\" , \"X64\" ] def GetTargetsSupported ( self ): return [ \"DEBUG\" , \"RELEASE\" ] def GetConfigurations ( self ): TARGETS = self . GetTargetsSupported () ARCHS = self . GetArchitecturesSupported () # combine options together for target in TARGETS : for arch in ARCHS : self . target = target self . arch = arch yield ({ \"TARGET\" : target , \"TARGET_ARCH\" : arch , \"ACTIVE_PLATFORM\" : \"NetworkPkg/SharedNetworking/SharedNetworkPkg.dsc\" }) def GetDependencies ( self ): return [] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' parserObj . add_argument ( '-d' , '--dump_version' , '--dump-version' , dest = 'dump_version' , type = bool , default = False , help = 'Should I dump nuget information?' ) parserObj . add_argument ( \"-nv\" , \"--nuget_version\" , \"--nuget-version\" , dest = \"nug_ver\" , type = str , default = None , help = \"Nuget Version for package\" ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' shell_environment . GetBuildVars () . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"Set default\" ) self . nuget_version = args . nug_ver self . should_dump_version = args . dump_version","title":"Creating Invocables"},{"location":"features/creating_invocable/#creating-an-invocable","text":"Whether you spell it invocable or invocable, the idea of an Invocable is central to Stuart. If you're unfamiliar with what it is, refer to the \"Using\" document in the root docs folder or feature_invocable in the features folder. In a nutshell, an invocable is a small python script that gets the build environment setup for it. It gets a settings file (that the invocable defines the interface for) that provides information about what we are being invoked on. This guide references Project Mu, which is an open source fork of EDK2 that leverages edk2-pytools. This guide is written in the style of a tutorial. This is based on the real example of an invocable here .","title":"Creating An Invocable"},{"location":"features/creating_invocable/#the-problem-statement","text":"One feature that Project Mu offers is that of a binary-packaged Crypto and Networking, known as SharedCrypto and SharedNetworking respectively. This allows your platform to skip the expensive step of compiling OpenSSL or other crypto libraries and instead use a known-good crypto library that is built from a known good source. For more information on SharedNetworking and SharedCrypto, go check it out here and here . Now, how are Shared Binaries built? Check out the code on github under NetworkPkg/SharedNetworking/DriverBuilder.py (it may move, this is where it was at time of writing), which is the invocable that powers the shared binaries. SharedNetworking in particular is a tricky problem because we want to build every architecture into an FV and package it into a NugetFeed. In a nutshell here's the flow we want: Acquire the dependencies we need (Crypto, OpenSSL, etc) Pull in any tooling that we require (mu_tools, nasm) Configure the environment for building with our tool chain Go through all the architectures we want to support and build them individually If all previous steps were successful, package it into a nuget package If given an API key, then publish to nuget Now a typical approach to this might be scripting through a batch script to invoke build.py, or invoking a stuart_build. This is a fine approach, particularly for a one off solution. But what if we change how nuget publishing is done? We need to update the batch script for both Crypto and Networking. Or perhaps we've thought of that and made a common script that our handy batch script invokes with the right parameters. We hope you can see that as time goes on, the situation spirals out of control as more parameters and scripts are added, fewer people will know how to work this or want to touch it. Eventually a bright talented engineer with a little more time than experience will declare that they will attempt to refactor this process. In a nutshell that is the problem that the invocable framework in general is trying to solve. Steps 1-3 are done for you. Steps 4-6+ should be trivial to implement in a setting agnostic way. So let's start.","title":"The problem statement"},{"location":"features/creating_invocable/#the-settings-class","text":"Each invocable has a definition for a settings class. We would recommend looking through a few of the invocables inside of Stuart as a reference. You may choose to subclass another settings file, such as MultiPkgAwareSettingsInterface but in this case, we won't. So let's start with some imports that we'll need along the way. We'll create a new file called DriverBuilder.py import os import logging from edk2toolext.environment import plugin_manager from edk2toolext.environment.plugintypes.uefi_helper_plugin import HelperFunctions from edk2toolext.edk2_invocable import Edk2Invocable from edk2toolext.environment import self_describing_environment from edk2toolext.environment import shell_environment from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext import edk2_logging One final import is needed that will seem a little strange. import DriverBuilder Stuart expects your invocable to be running in the python namespace that it is defined in. If you run your builder directly from the command-line, it will be running in __main__, which can cause problems. In a nutshell, you'll need to import the name of your file. We'll see where this is used at the end. Now the settings class! class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' raise NotImplementedError () def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' raise NotImplementedError () def GetName ( self ): ''' Get the name of the repo, platform, or product being build by CI ''' raise NotImplementedError () def AddCommandLineOptions ( self , parserObj ): ''' Implement in subclass to add command line options to the argparser ''' pass def RetrieveCommandLineOptions ( self , args ): ''' Implement in subclass to retrieve command line options from the argparser ''' pass def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return \"\" We've implemented a few methods that are needed to get the SDE off the ground. GetActiveScopes is needed to init the SDE. This causes different plugins to load or not GetWorkspaceRoot gets the folder that is the root of your workspace GetPackagePaths gets the folder locations that you will resolve EDK2 paths against GetName is the thing we are building, it will be used to name certain files like logs AddCommandLineOptions gives our settings the chance to set items in the parser object RetrieveCommandLineOptions gives us the chance to read the arguments from the command-line Now that we have our base methods, let's add one more to control the configurations we are going to build. class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' .... def GetConfigurations ( self ): ''' Gets the next configuration of this run This is a generator pattern - use yield ''' raise NotImplementedError () GetConfigurations is our way to get the configurations we want to build. We'll use a generator/iterator pattern here that we'll see later. We also need some methods to have callbacks into various stages of the process so that we can do nuget commands and prepare the nuget package. class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' .... def PreFirstBuildHook ( self ): ''' Called before the first build ''' return 0 def PostFinalBuildHook ( self , ret ): ''' Called after the final build with the summed return code ''' return 0 def PostBuildHook ( self , ret ): ''' Called after each build with the return code ''' return 0 def PreBuildHook ( self ): ''' Called before each build ''' return 0 These hooks are pretty self evident, but they'll be called at various point in the process. Now with our current file, we can define a settings file that implements the settings class. That doesn't really net us much.","title":"The settings class"},{"location":"features/creating_invocable/#the-invocable","text":"The invocable is actually the simplest part of this class Edk2BinaryBuild ( Edk2Invocable ): def GetLoggingLevel ( self , loggerType ): ''' Get the logging level for a given type base == lowest logging level supported con == Screen logging txt == plain text file logging md == markdown file logging ''' if ( loggerType == \"con\" ) and not self . Verbose : return logging . WARNING return logging . DEBUG def AddCommandLineOptions ( self , parser ): pass def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' pass def GetSettingsClass ( self ): return BinaryBuildSettingsManager def GetLoggingFileName ( self , loggerType ): return \"BINARY_BUILDLOG\" def Go ( self ): return 0 GetLoggingLevel we can get the logging level that we care about for the type of log we are creating AddCommandLineOption similar to previous settings manager class RetrieveCommandLineOptions similar to above GetSettingsClass the class that we want to look for GetLoggingFileName the name of the file we want to create for txt and markdown files. Go is the business logic of the invocable. Now let's implement an actual method to handle main and being called from the command-line or a pip link. def main (): Edk2BinaryBuild () . Invoke () if __name__ == \"__main__\" : DriverBuilder . main () # otherwise we're in __main__ context As you can see, we call ourselves via import rather than just directly calling main. This is a quirk/design flaw that might be revisited in the future, but in the meantime, this is a workaround. Now that we have a way to invoke this and execute our go, we can call if from the command-line. If we were to run this right now, we would see this as output (assuming you created an empty settings class). SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Summary PROGRESS - Success We can see that we're initializing the SDE, loading plugins and helpers, and starting the invocable. All for virtually free! Now let's start implementing the meat of the invocation. class Edk2BinaryBuild ( Edk2Invocable ): ... def Go ( self ): ret = 0 env = shell_environment . GetBuildVars () # set our environment with specific variables that we care about that EDK2 needs env . SetValue ( \"PRODUCT_NAME\" , self . PlatformSettings . GetName (), \"Platform Hard-coded\" ) env . SetValue ( \"BLD_*_BUILDID_STRING\" , \"201905\" , \"Current Version\" ) env . SetValue ( \"BUILDREPORTING\" , \"TRUE\" , \"Platform Hard-coded\" ) # make sure we always do a build report env . SetValue ( \"BUILDREPORT_TYPES\" , 'PCD DEPEX LIBRARY BUILD_FLAGS' , \"Platform Hard-coded\" ) # Run pre build hook ret = self . PlatformSettings . PreFirstBuildHook () # get workspace and package paths for ws = self . GetWorkspaceRoot () pp = self . PlatformSettings . GetPackagesPath () # run each configuration for config in self . PlatformSettings . GetConfigurations (): ret = self . PlatformSettings . PreBuildHook () # run pre build hook if ret != 0 : raise RuntimeError ( \"Failed prebuild hook\" ) edk2_logging . log_progress ( f \"--Running next configuration--\" ) logging . info ( config ) # log our configuration out to the log shell_environment . CheckpointBuildVars () # checkpoint our config env = shell_environment . GetBuildVars () # get our checkpointed variables # go through the item in the current configuration and apply to environment for key in config : env . SetValue ( key , config [ key ], \"provided by configuration\" ) # make sure to set this after in case the config did env . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"provided by driver_builder\" ) platformBuilder = UefiBuilder () # create our builder # run our builder and add to ret ret = platformBuilder . Go ( ws , os . pathsep . join ( pp ), self . helper , self . plugin_manager ) # call our post build hook ret = self . PlatformSettings . PostBuildHook ( ret ) # if we have a non zero return code, throw an error and call our final build hook if ret != 0 : self . PlatformSettings . PostFinalBuildHook ( ret ) # make sure to call our post final hook return ret shell_environment . RevertBuildVars () # revert our shell environment back to what it was # make sure to do our final build hook self . PlatformSettings . PostFinalBuildHook ( ret ) return ret The comments in the code are there to help you understand it. The basic process is: Setup the environment with your product strings and configuration for EDK2 Call prebuild hook Go through each of our configuration Checkpoint the environment Call prebuild hook Call UefiBuild Call PostBuild Revert checkpoint of environment","title":"The invocable"},{"location":"features/creating_invocable/#settings-file","text":"Now here's the settings file for the invocable. In this example, you would have two settings file for SharedNetworking and SharedCrypto, but the one invocable. Here's what we will be importing: import os import logging from edk2toolext.invocables.edk2_ci_setup import CiSetupSettingsManager from edk2toolext.invocables.edk2_update import UpdateSettingsManager try : from DriverBuilder import BinaryBuildSettingsManager except Exception : class BinaryBuildSettingsManager : def __init__ (): raise RuntimeError ( \"You shouldn't be including this\" ) pass from edk2toollib.utility_functions import GetHostInfo One of the key features of settings class is that it can implement multiple settings managers, or you can have multiple classes in the file that implement that particular SettingsManager class. The invocable finds the first class in the file that implements that particular settings class that we care about. Now that we have our imports, we will create a SettingsManager class that implements CiSetupSettingsManager, UpdateSettingsManager, and BinaryBuildSettingsManager. # # ========================================================================== # PLATFORM BUILD ENVIRONMENT CONFIGURATION # class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . OUTPUT_DIR = os . path . join ( WORKSPACE_PATH , \"Build\" , \".NugetOutput\" ) self . ws = WORKSPACE_PATH pass def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' scopes = ( \"corebuild\" , \"sharednetworking_build\" , ) return scopes We have implemented GetActiveScopes and the init function. Let's implement the hooks. class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): ... def PreFirstBuildHook ( self ): output_dir = self . OUTPUT_DIR try : if os . path . exists ( output_dir ): logging . warning ( f \"Deleting { output_dir } \" ) shutil . rmtree ( output_dir , ignore_errors = True ) os . makedirs ( output_dir ) except : pass self . nuget_version = self . _GetNextVersion ( self . nuget_version ) return 0 def PostBuildHook ( self , ret ): if ret == 0 : ret = self . _CollectNuget () if ret != 0 : logging . error ( \"Error occurred in post build hook\" ) return ret def PostFinalBuildHook ( self , ret ): if ret != 0 : logging . error ( \"There was failure along the way aborting NUGET publish\" ) return self . _PublishNuget () Some of the functions such as _CollectNuget have been redacted for brevity. On PostBuild we collect the files into the nuget package. On PreBuild we figure out the next version of our nuget package and delete what we've previously collected. On the final build, we publish the nuget file. Now we will implement a few more pieces needed class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): ... def GetConfigurations ( self ): TARGETS = self . GetTargetsSupported () ARCHS = self . GetArchitecturesSupported () # combine options together for target in TARGETS : for arch in ARCHS : self . target = target self . arch = arch yield ({ \"TARGET\" : target , \"TARGET_ARCH\" : arch , \"ACTIVE_PLATFORM\" : \"NetworkPkg/SharedNetworking/SharedNetworkPkg.dsc\" }) We use a generator to yield the settings we want each configuration to be. We iterate through these in the invocable and apply them to the environment. Since you own the invocable, you can modify this as you see fit, which makes this very modular. Let's add in functions for the other SettingsManagers. class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): ... def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return self . pp def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return self . rr def GetName ( self ): return \"SharedNetworking\" def GetPackagesSupported ( self ): return \"NetworkPkg\" def GetArchitecturesSupported ( self ): return [ \"IA32\" , \"AARCH64\" , \"X64\" ] def GetTargetsSupported ( self ): return [ \"DEBUG\" , \"RELEASE\" ] def GetDependencies ( self ): return [] The methods implemented here are a mix of our own settings class and other invocables such as stuart_update or stuart_setup. Hopefully they're straightforward and easy to follow.","title":"Settings File"},{"location":"features/creating_invocable/#conclusion","text":"That brings us to the end of the tutorial, you should have a working invocable and a settings file (well with some methods missing). Here they are for easy copy and pasting:","title":"Conclusion"},{"location":"features/creating_invocable/#driverbuilderpy","text":"# @file Edk2BinaryBuild.py # This module contains code that supports building of binary files # This is the main entry for the build and test process of binary builds ## # Copyright (c) Microsoft Corporation # # SPDX-License-Identifier: BSD-2-Clause-Patent ## import os import logging from edk2toolext.environment import plugin_manager from edk2toolext.environment.plugintypes.uefi_helper_plugin import HelperFunctions from edk2toolext.edk2_invocable import Edk2Invocable from edk2toolext.environment import self_describing_environment from edk2toolext.environment import shell_environment from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext import edk2_logging import DriverBuilder # this is a little weird class BinaryBuildSettingsManager (): ''' Platform settings will be accessed through this implementation. ''' def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' raise NotImplementedError () def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' raise NotImplementedError () def GetPackagesPath ( self ): pass def GetConfigurations ( self ): ''' Gets the next configuration of this run This is a generator pattern - use yield ''' raise NotImplementedError () def PreFirstBuildHook ( self ): ''' Called before the first build ''' return 0 def PostFinalBuildHook ( self , ret ): ''' Called after the final build with the summed return code ''' return 0 def PostBuildHook ( self , ret ): ''' Called after each build with the return code ''' return 0 def PreBuildHook ( self ): ''' Called before each build ''' return 0 def GetName ( self ): ''' Get the name of the repo, platform, or product being build by CI ''' raise NotImplementedError () def AddCommandLineOptions ( self , parserObj ): ''' Implement in subclass to add command line options to the argparser ''' pass def RetrieveCommandLineOptions ( self , args ): ''' Implement in subclass to retrieve command line options from the argparser ''' pass class Edk2BinaryBuild ( Edk2Invocable ): def GetLoggingLevel ( self , loggerType ): ''' Get the logging level for a given type base == lowest logging level supported con == Screen logging txt == plain text file logging md == markdown file logging ''' if ( loggerType == \"con\" ) and not self . Verbose : return logging . WARNING return logging . DEBUG def AddCommandLineOptions ( self , parser ): pass def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' pass def GetSettingsClass ( self ): return BinaryBuildSettingsManager def GetLoggingFileName ( self , loggerType ): return \"BINARY_BUILDLOG\" def Go ( self ): ret = 0 env = shell_environment . GetBuildVars () # set our environment with specific variables that we care about that EDK2 needs env . SetValue ( \"PRODUCT_NAME\" , self . PlatformSettings . GetName (), \"Platform Hardcoded\" ) env . SetValue ( \"BLD_*_BUILDID_STRING\" , \"201905\" , \"Current Version\" ) env . SetValue ( \"BUILDREPORTING\" , \"TRUE\" , \"Platform Hardcoded\" ) # make sure we always do a build report env . SetValue ( \"BUILDREPORT_TYPES\" , 'PCD DEPEX LIBRARY BUILD_FLAGS' , \"Platform Hardcoded\" ) # Run pre build hook ret = self . PlatformSettings . PreFirstBuildHook () # get workspace and package paths for ws = self . GetWorkspaceRoot () pp = self . PlatformSettings . GetPackagesPath () # run each configuration for config in self . PlatformSettings . GetConfigurations (): ret = self . PlatformSettings . PreBuildHook () # run pre build hook if ret != 0 : raise RuntimeError ( \"Failed prebuild hook\" ) edk2_logging . log_progress ( f \"--Running next configuration--\" ) logging . info ( config ) # log our configuration out to the log shell_environment . CheckpointBuildVars () # checkpoint our config env = shell_environment . GetBuildVars () # get our checkpointed variables # go through the item in the current configuration and apply to environment for key in config : env . SetValue ( key , config [ key ], \"provided by configuration\" ) # make sure to set this after in case the config did env . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"provided by driver_builder\" ) platformBuilder = UefiBuilder () # create our builder # run our builder and add to ret ret = platformBuilder . Go ( ws , os . pathsep . join ( pp ), self . helper , self . plugin_manager ) # call our post build hook ret = self . PlatformSettings . PostBuildHook ( ret ) # if we have a non zero return code, throw an error and call our final build hook if ret != 0 : self . PlatformSettings . PostFinalBuildHook ( ret ) # make sure to call our post final hook return ret shell_environment . RevertBuildVars () # revert our shell environment back to what it was # make sure to do our final build hook self . PlatformSettings . PostFinalBuildHook ( ret ) return ret def main (): Edk2BinaryBuild () . Invoke () if __name__ == \"__main__\" : DriverBuilder . main () # otherwise we're in __main__ context","title":"DriverBuilder.py"},{"location":"features/creating_invocable/#sharednetworkingsettings","text":"## # Script to Build Shared Crypto Driver # Copyright Microsoft Corporation, 2019 # # This is to build the SharedNetworking binaries for NuGet publishing ## import os import logging from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext.invocables.edk2_ci_setup import CiSetupSettingsManager from edk2toolext.invocables.edk2_update import UpdateSettingsManager try : from DriverBuilder_temp import BinaryBuildSettingsManager except Exception : class BinaryBuildSettingsManager : def __init__ (): raise RuntimeError ( \"You shouldn't be including this\" ) pass from edk2toollib.utility_functions import GetHostInfo # # ========================================================================== # PLATFORM BUILD ENVIRONMENT CONFIGURATION # class SettingsManager ( UpdateSettingsManager , CiSetupSettingsManager , BinaryBuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . OUTPUT_DIR = os . path . join ( WORKSPACE_PATH , \"Build\" , \".NugetOutput\" ) self . ws = WORKSPACE_PATH self . pp = [ 'Common/MU_TIANO' , \"Silicon/Arm/MU_TIANO\" ] self . sp = SCRIPT_PATH self . nuget_version = None pass def GetActiveScopes ( self ): ''' return tuple containing scopes that should be active for this process ''' scopes = ( \"corebuild\" , \"sharednetworking_build\" , ) return scopes def PreFirstBuildHook ( self ): output_dir = self . OUTPUT_DIR try : if os . path . exists ( output_dir ): logging . warning ( f \"Deleting { output_dir } \" ) shutil . rmtree ( output_dir , ignore_errors = True ) os . makedirs ( output_dir ) except : pass self . nuget_version = self . _GetNextVersion ( self . nuget_version ) return 0 def PostBuildHook ( self , ret ): if ret == 0 : ret = self . _CollectNuget () if ret != 0 : logging . error ( \"Error occurred in post build hook\" ) return ret def PostFinalBuildHook ( self , ret ): if ret != 0 : logging . error ( \"There was failure along the way aborting NUGET publish\" ) return self . _PublishNuget () def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return os . pathsep . join ( self . pp ) def GetName ( self ): return \"SharedNetworking\" def GetPackagesSupported ( self ): return \"NetworkPkg\" def GetArchitecturesSupported ( self ): return [ \"IA32\" , \"AARCH64\" , \"X64\" ] def GetTargetsSupported ( self ): return [ \"DEBUG\" , \"RELEASE\" ] def GetConfigurations ( self ): TARGETS = self . GetTargetsSupported () ARCHS = self . GetArchitecturesSupported () # combine options together for target in TARGETS : for arch in ARCHS : self . target = target self . arch = arch yield ({ \"TARGET\" : target , \"TARGET_ARCH\" : arch , \"ACTIVE_PLATFORM\" : \"NetworkPkg/SharedNetworking/SharedNetworkPkg.dsc\" }) def GetDependencies ( self ): return [] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' parserObj . add_argument ( '-d' , '--dump_version' , '--dump-version' , dest = 'dump_version' , type = bool , default = False , help = 'Should I dump nuget information?' ) parserObj . add_argument ( \"-nv\" , \"--nuget_version\" , \"--nuget-version\" , dest = \"nug_ver\" , type = str , default = None , help = \"Nuget Version for package\" ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' shell_environment . GetBuildVars () . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"Set default\" ) self . nuget_version = args . nug_ver self . should_dump_version = args . dump_version","title":"SharedNetworkingSettings"},{"location":"features/creating_plugins/","text":"Creating a Plugin \u00b6 Any file that ends in _plug_in is automatically included in the list of plugins. The only thing you need to do is to create a class and use it. You once you have a plugin manager set up: self . plugin_manager = plugin_manager . PluginManager () failedPlugins = self . plugin_manager . SetListOfEnvironmentDescriptors ( build_env . plugins ) All you need to do is find and run your plugin. # Get list of descriptors for ICiBuildPlugin type objects pluginList = self . plugin_manager . GetPluginsOfClass ( plugin_manager . ICiBuildPlugin ) # Descriptor.Obj is going to be a callable object of type ICiBuildPlugin for Descriptor in pluginList : rc = Descriptor . Obj . RunBuildPlugin ( ... ) Since you are creating and using a new plugin type, you can define the API to be whatever you want!","title":"Create a Plugin"},{"location":"features/creating_plugins/#creating-a-plugin","text":"Any file that ends in _plug_in is automatically included in the list of plugins. The only thing you need to do is to create a class and use it. You once you have a plugin manager set up: self . plugin_manager = plugin_manager . PluginManager () failedPlugins = self . plugin_manager . SetListOfEnvironmentDescriptors ( build_env . plugins ) All you need to do is find and run your plugin. # Get list of descriptors for ICiBuildPlugin type objects pluginList = self . plugin_manager . GetPluginsOfClass ( plugin_manager . ICiBuildPlugin ) # Descriptor.Obj is going to be a callable object of type ICiBuildPlugin for Descriptor in pluginList : rc = Descriptor . Obj . RunBuildPlugin ( ... ) Since you are creating and using a new plugin type, you can define the API to be whatever you want!","title":"Creating a Plugin"},{"location":"features/environment_variables/","text":"Pytool Extensions Environment Variables \u00b6 EDK2 Pytool Extensions have a few enviornment variables that can be set to alter how the utilities behave (mostly Stuart). To clarify, these are not variables that target how a project might CI or build, but they alter how the tools themselves behave when executing these functions. The general philosophy around when an environment variable is made available is: the output of the utility or process should be exactly the same whether the variable is provided or not, and regardless of the contents of the variable. They are only to be used to optimize or otherwise make working with the utilities more ergonomic. If this axiom does not hold true, it's likely that the setting should be a command line argument. OMNICACHE_PATH \u00b6 This variable, if present, will enable the Stuart tools that clone or update Git repositories to use the local Omnicache rather than having to fetch everything from the server. This can greatly improve the performance of CI processes that have to clone many dependencies. For more info, see the Omnicache docs . STUART_EXTDEP_CACHE_PATH \u00b6 This is similar to the Omnicache, but for binary dependencies and tools. If present, will enable Stuart to both populate and query the local cache for dependencies like Nuget and Web dependencies. After the initial fetch, this can greatly improve the performance of calling stuart_update and make it far easier to switch between multiple branches or scopes where dependencies may change. For more info, see the External Dependencies docs . EDK_BUILD_CMD \u00b6 If present, the absolute path to an application to use for the edk build process will be invoked instead of build . This is primarily used to allow a tool to wrap around build . EDK_BUILD_PARAMS \u00b6 If present, these parameters will be passed to the build command. This is primarily used to pair wrapper-specific parameters with the wrapper passed in EDK_BUILD_CMD .","title":"Environment Variables"},{"location":"features/environment_variables/#pytool-extensions-environment-variables","text":"EDK2 Pytool Extensions have a few enviornment variables that can be set to alter how the utilities behave (mostly Stuart). To clarify, these are not variables that target how a project might CI or build, but they alter how the tools themselves behave when executing these functions. The general philosophy around when an environment variable is made available is: the output of the utility or process should be exactly the same whether the variable is provided or not, and regardless of the contents of the variable. They are only to be used to optimize or otherwise make working with the utilities more ergonomic. If this axiom does not hold true, it's likely that the setting should be a command line argument.","title":"Pytool Extensions Environment Variables"},{"location":"features/environment_variables/#omnicache_path","text":"This variable, if present, will enable the Stuart tools that clone or update Git repositories to use the local Omnicache rather than having to fetch everything from the server. This can greatly improve the performance of CI processes that have to clone many dependencies. For more info, see the Omnicache docs .","title":"OMNICACHE_PATH"},{"location":"features/environment_variables/#stuart_extdep_cache_path","text":"This is similar to the Omnicache, but for binary dependencies and tools. If present, will enable Stuart to both populate and query the local cache for dependencies like Nuget and Web dependencies. After the initial fetch, this can greatly improve the performance of calling stuart_update and make it far easier to switch between multiple branches or scopes where dependencies may change. For more info, see the External Dependencies docs .","title":"STUART_EXTDEP_CACHE_PATH"},{"location":"features/environment_variables/#edk_build_cmd","text":"If present, the absolute path to an application to use for the edk build process will be invoked instead of build . This is primarily used to allow a tool to wrap around build .","title":"EDK_BUILD_CMD"},{"location":"features/environment_variables/#edk_build_params","text":"If present, these parameters will be passed to the build command. This is primarily used to pair wrapper-specific parameters with the wrapper passed in EDK_BUILD_CMD .","title":"EDK_BUILD_PARAMS"},{"location":"features/extdep/","text":"External Dependencies \u00b6 Overview \u00b6 External dependencies are a way within the build environment to describe external dependencies and have Stuart fetch them when doing the stuart_update operation. Stuart will also verify the ext_dep state when doing a build to ensure the environment is in the required state prior to building. Ext_deps have solved three major issues. Binaries causing bloat of git repositories Conditional inclusion of a dependency (only for certain usages) Reproducibility and tracking of dependencies Why \u00b6 Git Bloat \u00b6 Best practices advise against checking in binaries to git repositories as the overall size of git repos will balloon quickly causing slow clones and slow operations. Building firmware often requires custom tools, firmware blobs, or other binaries and it is critical these are maintained and versioned with the repository. Package management tools can solve the hosting of these binaries but edk2 has no built in tool to track them, extract them, etc. Ext_deps provide that mechanism. Conditional Inclusion (scopes) \u00b6 Ext_deps leverage the environment scope concept so that a repository can carry ext_deps that are only used in some conditions. Scopes are a string that an invocable tool uses to indicate what ext_deps should be used. These scopes are loosely based on functionality. Reproducibility and Tracking \u00b6 Ext_deps are common infrastructure so that all external dependencies can be handled consistently. Versions are added to the version report so that for any given operation (like build) a complete list of what was used is available. This makes tracking versions consistent and \"free\". Ext_deps when fetched will update their state. If the repository is updated to include a new ext_dep version the tool will be told the environment state is not valid and can then enforce that the user updates their environment. Examples of Usage \u00b6 Here are a few examples where ext_deps have been found useful: An ext_dep describing a test repository that is only needed when running unit tests. By leveraging scopes this ext_dep is only fetched when the unittest scope is active. Similar to the unit test dependency, support for CI builds often require unique dependencies. When doing a CI build of a core repository it might have critical dependencies that need to be fetched but when the core repository is included within a platform repository as a dependency, then the core would defer to the platform as to how to include the dependency. An ext_dep describing the compiler toolchain. This ext_dep is only needed when a builder is using that toolchain for that target type. An ext_dep describing some platform binary. This is only needed when building that given platform and since git is not optimized to handle binaries this saves a lot of unnecessary bloat in the repository. Supported Types \u00b6 NuGet Dependency \u00b6 Nuget dependency is used to fetch files from a nuget feed. This feed can be either unauthenticated or authenticated. Support is done by using the nuget command line tool. When the ext_dep type is set to nuget the descriptor will be interpreted as a nuget dependency. Nuget has a few nice features such as caching, authentication, versioning, and is platform and language agnostic. This package has a version of the NuGet.exe binary or a user can configure their environment to use a defined version by setting NUGET_PATH to the folder containing the NuGet.exe that should be used. Web Dependency \u00b6 Web dependency is used to describe a dependency on an asset that can be downloaded via a URL and a web request. It will download whatever is located at the source URL and can support single files, compressed files, and folders. When the ext_dep type is set to web the ext_dep will be interpreted as a web dependency. Git Dependency \u00b6 Git dependency is used to describe a dependency on a git repository. This repository will be cloned to the ext_dep location and the version will be checked out. For this ext_dep descriptor the type is git . A git dependency should be treated as read-only because the verify and clean phase will do destructive operations where local changes would be destroyed. Azure Universal Packages Dependency (az-universal) \u00b6 Azure Universal packages are yet another package management solution. These packages are supported by Azure DevOps server and use the cross platform Azure CLI tool to retrieve the content. To use this ext_dep type the development environment must have the Azure CLI tool available and the devops extension. Since anonymous feeds are not supported your environment must already be authenticated or you must define a system environment variable that will hold a DevOps PAT with package read authorization. More information: Azure Command-Line Interface: https://docs.microsoft.com/en-us/cli/azure/ Azure DevOps Extension: https://github.com/Azure/azure-devops-cli-extension Universal Packages Information: https://docs.microsoft.com/en-us/azure/devops/artifacts/quickstarts/universal-packages?view=azure-devops Developer Note \u00b6 To create a new Dependency type it requires a new subclass of the ExternalDependency class. The subclass needs to have a type field and then factory method in ExternalDependency.py needs to be updated to create new instances of the new type. Local Caching \u00b6 In some cases (e.g. a CI server), it is necessary to set up and tear down multiple repos and/or branches, and this can severely impact the network time to fetch all new dependencies. While Nuget has it's own caching system, this does not scale to the other dependency types. To address this, Stuart provides the STUART_EXTDEP_CACHE_PATH environment variable. If this variable is set, and points to a valid directory on the local filesystem, it will be populated with a copy of any extdep that is fetched by Stuart during the process of a build. This cache will be checked prior to invoking any type-specific extdep fetch operation. If the extdep already exists in the cache, it will be copied from the local cache into its final destination. This cache will keep unique entries for versions and sources. In other words, multiple versions of the same extdep from the same source will be cached independently, but the same version from multiple sources will also be cached independently. This is to prevent possible cache corruption when consuming external code that may have a name collision. A note on NuGet on Linux \u00b6 If you're using Linux (whether through WSL or natively), you'll need to add the proper sources to your relevant package manager for mono. As of time of writing, the Ubuntu mono packages are out of date. You can follow the instructions here: https://www.mono-project.com/download/stable/#download-lin Here are the instructions (as of time of writing): sudo apt install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update sudo apt upgrade ( if mono is already installed ) - or - sudo apt install mono-devel If you're running a different kind of package manager, or on a system without a package manager, visit the link above for instructions on your platform. If you're on a system that NuGet natively supports (currently only Windows) you won't need to install Mono. How external dependencies work \u00b6 Ext_deps are found by the SDE (self-describing environment). If you have any questions about that, go review the document for that. Once the ext_dep is found it can be interacted with depending on use case/tool. Objects created with the data from ext_dep descriptors and are subclassed according to the \"type\" field in the descriptor. These objects contain the code for fetching, validating, updating, and cleaning dependency objects and metadata. When referenced from the SDE itself, they can also update paths and other build/shell vars in the build environment. How to create/use an ext_dep \u00b6 An ext_dep is defined by a json file that ends in_ext_dep.json It must follow the schema outlined below. It will be unpacked in a new folder in the same directory as the .json file in a folder named {name}_extdep. We strongly recommend adding any folder that ends in _extdep to your repositories .gitignore. It would look like this: *_extdep/ Ext_Dep Example json file { \"scope\" : \"cibuild\" , \"type\" : \"nuget\" , \"name\" : \"iasl\" , \"source\" : \"https://api.nuget.org/v3/index.json\" , \"version\" : \"20190215.0.0\" , \"flags\" : [ \"set_path\" , \"host_specific\" ] } If you wish to create a new ext_dep type other then those mentioned in Supported Types , See Creating an Extdep Type The base schema \u00b6 Required \u00b6 scope: (required) (string) - name of scope when this ext_dep should be evaluated type: (required) (string from list of known types) - See above for types name: This is the name of the ext_dep and will be part of the path where the ext_dep is unpacked source: see per type version: see per type flags: Optional conditions that can be applied. Can be empty list Optional \u00b6 id: (string) - Identifier allowing override feature - Must be unique override_id: (string) - Identifier of the ext_dep this should replace (allows for changing an ext_dep in another source by id) var_name: TODO error_msg: an optional message that will disabled to the user if this ext_dep fails to fetch Nuget Type Schema differences \u00b6 source: This should be the nuget feed URL version: nuget version. Generally xx.yy.zz For this type there are zero additional ext_dep fields. Web Type Schema differences \u00b6 source: url to download version: only used for folder naming For this type there are three additional ext_dep fields: internal_path (required) \u00b6 This describes the internal structure of whatever we are downloading. If you are just downloading a file, include the name you would like the file to be. If you are downloading a directory, indicate so with a / before the path. The folder the path points to will have it's contents copied into the final name_ext_dep folder. compression_type (optional) \u00b6 Including this field is indicating that the file being downloaded is compressed and that you would like the contents of internal_path to be extracted. If you have a compressed file and would not like it to be decompressed, omit this field. Currently tar and zip files are supported. If the file is not compressed, omit this field. sha256 (optional) \u00b6 If desired, you can provide the hash of your file. This hash will be checked against what is being downloaded to ensure it is valid. It is strongly recommended to use this to ensure the contents are as expected. Git Type Schema Differences \u00b6 source: url of git repo version: commit hash to checkout Experimental Option: url_creds_var \u00b6 If this field is found in the descriptor file when initializing this extdep, the string value listed will be checked against the environment's shell_vars. If a matching var is found, this string in the shell_var will be prepended to the URL host for the source URL. NOTE: This is intended for server builds and may be subject to change as we figure out how it fits into build flows. Also note that any credentials passed may end up in build logs and other server-side artifacts. Use with caution! Example: { \"scope\" : \"global\" , \"type\" : \"git\" , \"name\" : \"ExampleRepo\" , \"source\" : \"http://example.com/path/to/repo.git\" , \"version\" : \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\" , \"url_creds_var\" : \"my_url_creds\" , \"flags\" : [] } # Populate shell var. env . set_shell_var ( 'my_url_creds' , 'my_user:my_pass' ) # URL cloned by the GitDependency object will look like... final_url = 'http://my_user:my_pass@example.com/path/to/repo.git' Azure Universal Packages Type Schema Differences \u00b6 source: url of dev ops organization (example: https://dev.azure.com/tianocore ) version: semantic version (Major.Minor.Patch) For this type there are three additional ext_dep fields: feed \u00b6 Name of the Azure DevOps feed project (optional) \u00b6 Name of the project for project scoped feeds. If not defined it will be treated as an organizational scoped feed. name \u00b6 Name of the artifact file-filter (optional) \u00b6 Filter for folders and files to download. Azure Universal packages supports only partial downloads. See https://docs.microsoft.com/en-us/azure/devops/artifacts/quickstarts/universal-packages?view=azure-devops#download-specific-files for more details. pat_var (optional but suggested) \u00b6 OS shell variable that contains a personal access token (PAT) for this ext_dep. Universal packages do not support anonymous access therefore the developer needs to authenticate using az login or define a PAT. The PAT needs to have Packaging - Read access. Example: { \"scope\" : \"global\" , \"type\" : \"az-universal\" , \"name\" : \"hello-world-file\" , \"source\" : \"https://dev.azure.com/tianocore\" , \"project\" : \"edk2-pytool-extensions\" , \"version\" : \"1.0.0\" , \"feed\" : \"ext_dep_unit_test_feed\" , \"pat_var\" : \"PAT_FOR_UNIVERSAL_ORG_TIANOCORE\" , \"flags\" : [] } The Flags \u00b6 There are specific flags that do different things. Flags are defined by the SDE and cannot be modified without updating the pip module. More information on the flags can be found in the SDE documentation.","title":"Ext Deps"},{"location":"features/extdep/#external-dependencies","text":"","title":"External Dependencies"},{"location":"features/extdep/#overview","text":"External dependencies are a way within the build environment to describe external dependencies and have Stuart fetch them when doing the stuart_update operation. Stuart will also verify the ext_dep state when doing a build to ensure the environment is in the required state prior to building. Ext_deps have solved three major issues. Binaries causing bloat of git repositories Conditional inclusion of a dependency (only for certain usages) Reproducibility and tracking of dependencies","title":"Overview"},{"location":"features/extdep/#why","text":"","title":"Why"},{"location":"features/extdep/#git-bloat","text":"Best practices advise against checking in binaries to git repositories as the overall size of git repos will balloon quickly causing slow clones and slow operations. Building firmware often requires custom tools, firmware blobs, or other binaries and it is critical these are maintained and versioned with the repository. Package management tools can solve the hosting of these binaries but edk2 has no built in tool to track them, extract them, etc. Ext_deps provide that mechanism.","title":"Git Bloat"},{"location":"features/extdep/#conditional-inclusion-scopes","text":"Ext_deps leverage the environment scope concept so that a repository can carry ext_deps that are only used in some conditions. Scopes are a string that an invocable tool uses to indicate what ext_deps should be used. These scopes are loosely based on functionality.","title":"Conditional Inclusion (scopes)"},{"location":"features/extdep/#reproducibility-and-tracking","text":"Ext_deps are common infrastructure so that all external dependencies can be handled consistently. Versions are added to the version report so that for any given operation (like build) a complete list of what was used is available. This makes tracking versions consistent and \"free\". Ext_deps when fetched will update their state. If the repository is updated to include a new ext_dep version the tool will be told the environment state is not valid and can then enforce that the user updates their environment.","title":"Reproducibility and Tracking"},{"location":"features/extdep/#examples-of-usage","text":"Here are a few examples where ext_deps have been found useful: An ext_dep describing a test repository that is only needed when running unit tests. By leveraging scopes this ext_dep is only fetched when the unittest scope is active. Similar to the unit test dependency, support for CI builds often require unique dependencies. When doing a CI build of a core repository it might have critical dependencies that need to be fetched but when the core repository is included within a platform repository as a dependency, then the core would defer to the platform as to how to include the dependency. An ext_dep describing the compiler toolchain. This ext_dep is only needed when a builder is using that toolchain for that target type. An ext_dep describing some platform binary. This is only needed when building that given platform and since git is not optimized to handle binaries this saves a lot of unnecessary bloat in the repository.","title":"Examples of Usage"},{"location":"features/extdep/#supported-types","text":"","title":"Supported Types"},{"location":"features/extdep/#nuget-dependency","text":"Nuget dependency is used to fetch files from a nuget feed. This feed can be either unauthenticated or authenticated. Support is done by using the nuget command line tool. When the ext_dep type is set to nuget the descriptor will be interpreted as a nuget dependency. Nuget has a few nice features such as caching, authentication, versioning, and is platform and language agnostic. This package has a version of the NuGet.exe binary or a user can configure their environment to use a defined version by setting NUGET_PATH to the folder containing the NuGet.exe that should be used.","title":"NuGet Dependency"},{"location":"features/extdep/#web-dependency","text":"Web dependency is used to describe a dependency on an asset that can be downloaded via a URL and a web request. It will download whatever is located at the source URL and can support single files, compressed files, and folders. When the ext_dep type is set to web the ext_dep will be interpreted as a web dependency.","title":"Web Dependency"},{"location":"features/extdep/#git-dependency","text":"Git dependency is used to describe a dependency on a git repository. This repository will be cloned to the ext_dep location and the version will be checked out. For this ext_dep descriptor the type is git . A git dependency should be treated as read-only because the verify and clean phase will do destructive operations where local changes would be destroyed.","title":"Git Dependency"},{"location":"features/extdep/#azure-universal-packages-dependency-az-universal","text":"Azure Universal packages are yet another package management solution. These packages are supported by Azure DevOps server and use the cross platform Azure CLI tool to retrieve the content. To use this ext_dep type the development environment must have the Azure CLI tool available and the devops extension. Since anonymous feeds are not supported your environment must already be authenticated or you must define a system environment variable that will hold a DevOps PAT with package read authorization. More information: Azure Command-Line Interface: https://docs.microsoft.com/en-us/cli/azure/ Azure DevOps Extension: https://github.com/Azure/azure-devops-cli-extension Universal Packages Information: https://docs.microsoft.com/en-us/azure/devops/artifacts/quickstarts/universal-packages?view=azure-devops","title":"Azure Universal Packages Dependency (az-universal)"},{"location":"features/extdep/#developer-note","text":"To create a new Dependency type it requires a new subclass of the ExternalDependency class. The subclass needs to have a type field and then factory method in ExternalDependency.py needs to be updated to create new instances of the new type.","title":"Developer Note"},{"location":"features/extdep/#local-caching","text":"In some cases (e.g. a CI server), it is necessary to set up and tear down multiple repos and/or branches, and this can severely impact the network time to fetch all new dependencies. While Nuget has it's own caching system, this does not scale to the other dependency types. To address this, Stuart provides the STUART_EXTDEP_CACHE_PATH environment variable. If this variable is set, and points to a valid directory on the local filesystem, it will be populated with a copy of any extdep that is fetched by Stuart during the process of a build. This cache will be checked prior to invoking any type-specific extdep fetch operation. If the extdep already exists in the cache, it will be copied from the local cache into its final destination. This cache will keep unique entries for versions and sources. In other words, multiple versions of the same extdep from the same source will be cached independently, but the same version from multiple sources will also be cached independently. This is to prevent possible cache corruption when consuming external code that may have a name collision.","title":"Local Caching"},{"location":"features/extdep/#a-note-on-nuget-on-linux","text":"If you're using Linux (whether through WSL or natively), you'll need to add the proper sources to your relevant package manager for mono. As of time of writing, the Ubuntu mono packages are out of date. You can follow the instructions here: https://www.mono-project.com/download/stable/#download-lin Here are the instructions (as of time of writing): sudo apt install gnupg ca-certificates sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list sudo apt update sudo apt upgrade ( if mono is already installed ) - or - sudo apt install mono-devel If you're running a different kind of package manager, or on a system without a package manager, visit the link above for instructions on your platform. If you're on a system that NuGet natively supports (currently only Windows) you won't need to install Mono.","title":"A note on NuGet on Linux"},{"location":"features/extdep/#how-external-dependencies-work","text":"Ext_deps are found by the SDE (self-describing environment). If you have any questions about that, go review the document for that. Once the ext_dep is found it can be interacted with depending on use case/tool. Objects created with the data from ext_dep descriptors and are subclassed according to the \"type\" field in the descriptor. These objects contain the code for fetching, validating, updating, and cleaning dependency objects and metadata. When referenced from the SDE itself, they can also update paths and other build/shell vars in the build environment.","title":"How external dependencies work"},{"location":"features/extdep/#how-to-createuse-an-ext_dep","text":"An ext_dep is defined by a json file that ends in_ext_dep.json It must follow the schema outlined below. It will be unpacked in a new folder in the same directory as the .json file in a folder named {name}_extdep. We strongly recommend adding any folder that ends in _extdep to your repositories .gitignore. It would look like this: *_extdep/ Ext_Dep Example json file { \"scope\" : \"cibuild\" , \"type\" : \"nuget\" , \"name\" : \"iasl\" , \"source\" : \"https://api.nuget.org/v3/index.json\" , \"version\" : \"20190215.0.0\" , \"flags\" : [ \"set_path\" , \"host_specific\" ] } If you wish to create a new ext_dep type other then those mentioned in Supported Types , See Creating an Extdep Type","title":"How to create/use an ext_dep"},{"location":"features/extdep/#the-base-schema","text":"","title":"The base schema"},{"location":"features/extdep/#required","text":"scope: (required) (string) - name of scope when this ext_dep should be evaluated type: (required) (string from list of known types) - See above for types name: This is the name of the ext_dep and will be part of the path where the ext_dep is unpacked source: see per type version: see per type flags: Optional conditions that can be applied. Can be empty list","title":"Required"},{"location":"features/extdep/#optional","text":"id: (string) - Identifier allowing override feature - Must be unique override_id: (string) - Identifier of the ext_dep this should replace (allows for changing an ext_dep in another source by id) var_name: TODO error_msg: an optional message that will disabled to the user if this ext_dep fails to fetch","title":"Optional"},{"location":"features/extdep/#nuget-type-schema-differences","text":"source: This should be the nuget feed URL version: nuget version. Generally xx.yy.zz For this type there are zero additional ext_dep fields.","title":"Nuget Type Schema differences"},{"location":"features/extdep/#web-type-schema-differences","text":"source: url to download version: only used for folder naming For this type there are three additional ext_dep fields:","title":"Web Type Schema differences"},{"location":"features/extdep/#internal_path-required","text":"This describes the internal structure of whatever we are downloading. If you are just downloading a file, include the name you would like the file to be. If you are downloading a directory, indicate so with a / before the path. The folder the path points to will have it's contents copied into the final name_ext_dep folder.","title":"internal_path (required)"},{"location":"features/extdep/#compression_type-optional","text":"Including this field is indicating that the file being downloaded is compressed and that you would like the contents of internal_path to be extracted. If you have a compressed file and would not like it to be decompressed, omit this field. Currently tar and zip files are supported. If the file is not compressed, omit this field.","title":"compression_type (optional)"},{"location":"features/extdep/#sha256-optional","text":"If desired, you can provide the hash of your file. This hash will be checked against what is being downloaded to ensure it is valid. It is strongly recommended to use this to ensure the contents are as expected.","title":"sha256 (optional)"},{"location":"features/extdep/#git-type-schema-differences","text":"source: url of git repo version: commit hash to checkout","title":"Git Type Schema Differences"},{"location":"features/extdep/#experimental-option-url_creds_var","text":"If this field is found in the descriptor file when initializing this extdep, the string value listed will be checked against the environment's shell_vars. If a matching var is found, this string in the shell_var will be prepended to the URL host for the source URL. NOTE: This is intended for server builds and may be subject to change as we figure out how it fits into build flows. Also note that any credentials passed may end up in build logs and other server-side artifacts. Use with caution! Example: { \"scope\" : \"global\" , \"type\" : \"git\" , \"name\" : \"ExampleRepo\" , \"source\" : \"http://example.com/path/to/repo.git\" , \"version\" : \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\" , \"url_creds_var\" : \"my_url_creds\" , \"flags\" : [] } # Populate shell var. env . set_shell_var ( 'my_url_creds' , 'my_user:my_pass' ) # URL cloned by the GitDependency object will look like... final_url = 'http://my_user:my_pass@example.com/path/to/repo.git'","title":"Experimental Option: url_creds_var"},{"location":"features/extdep/#azure-universal-packages-type-schema-differences","text":"source: url of dev ops organization (example: https://dev.azure.com/tianocore ) version: semantic version (Major.Minor.Patch) For this type there are three additional ext_dep fields:","title":"Azure Universal Packages Type Schema Differences"},{"location":"features/extdep/#feed","text":"Name of the Azure DevOps feed","title":"feed"},{"location":"features/extdep/#project-optional","text":"Name of the project for project scoped feeds. If not defined it will be treated as an organizational scoped feed.","title":"project (optional)"},{"location":"features/extdep/#name","text":"Name of the artifact","title":"name"},{"location":"features/extdep/#file-filter-optional","text":"Filter for folders and files to download. Azure Universal packages supports only partial downloads. See https://docs.microsoft.com/en-us/azure/devops/artifacts/quickstarts/universal-packages?view=azure-devops#download-specific-files for more details.","title":"file-filter (optional)"},{"location":"features/extdep/#pat_var-optional-but-suggested","text":"OS shell variable that contains a personal access token (PAT) for this ext_dep. Universal packages do not support anonymous access therefore the developer needs to authenticate using az login or define a PAT. The PAT needs to have Packaging - Read access. Example: { \"scope\" : \"global\" , \"type\" : \"az-universal\" , \"name\" : \"hello-world-file\" , \"source\" : \"https://dev.azure.com/tianocore\" , \"project\" : \"edk2-pytool-extensions\" , \"version\" : \"1.0.0\" , \"feed\" : \"ext_dep_unit_test_feed\" , \"pat_var\" : \"PAT_FOR_UNIVERSAL_ORG_TIANOCORE\" , \"flags\" : [] }","title":"pat_var (optional but suggested)"},{"location":"features/extdep/#the-flags","text":"There are specific flags that do different things. Flags are defined by the SDE and cannot be modified without updating the pip module. More information on the flags can be found in the SDE documentation.","title":"The Flags"},{"location":"features/invocable/","text":"Invocables \u00b6 Invocables exist as a way to setup the EDK2 environment in a consistent way such that any script could be run in the context of a UEFI environment. The base_abstract_invocable describes the necessities of the EDK2 environment, to be provided by the user however they wish. Built on top of that, edk2_invocable is an attempt to do as much parsing and setup for the user as possible to minimize the requirements of individual invocable scripts. To kick off a script, just Invoke(). base_abstract_invocable \u00b6 example: Sample_InvocableHelloWorld.py provided functions \u00b6 Invoke \u00b6 Main function. Parses command line options, configures logging, bootstraps environment, loads plugins, and finally calls Go. ConfigureLogging \u00b6 Sets up logging using information from GetWorkspaceRoot, GetLoggingLevel, GetLoggingFileName, and GetLoggingFolderRelativeToRoot. abstract functions \u00b6 ParseCommandLineOptions is your opportunity to use argparser or look at sys.argv before kicking off setup. If the environment isn't meant to be verifiable (maybe this script involves setting up or unpacking the environment), GetVerifyCheckRequired can return False to bypass that step. After that, GetWorkspaceRoot and GetActiveScopes is used to get the necessary information about the environment and set everything up. Go will be called after all that setup. Note: logging before ConfigureLogging gets called causes logging to be setup twice (once implicitly by calling it early and then again by ConfigureLogging) and you will see duplicate messages in your console. To avoid this, do not log in ParseCommandLineOptions, GetLoggingLevel, GetWorkspaceRoot, GetLoggingFolderRelativeToRoot, or GetLoggingFileName. If you must have output, use print() or log another way. edk2_invocable \u00b6 Example: edk2toolext\\invocables\\edk2_update.py Basically just base_abstract_invocable + settings parsing. functions \u00b6 ParseCommandLineOptions \u00b6 This is implemented for the user. It requires a Python settings file be provided. After importing the settings file, another argparser is created, which is passed to the invoking script and to the settings file. Additionally, key value pairs in the format KEY=VALUE will be read into the build environment, accessible by calling shell_environment.GetBuildVars().GetValue(KEY) . For example, to skip loading the compiler plugin, pass CompilerPlugin=skip as an extra argument when calling your script. GetSettingsClass \u00b6 This must provide a Python class that edk2_invocable can expect to find instantiated by your settings script. multi inheritance \u00b6 Example: NXP In Python it is allowed and it will be helpful for you as long as you don't try to get too creative with it. GetActiveScopes, GetWorkspaceRoot, AddCommandLineOptions, RetrieveCommandLineOptions are required to be in each Settings class. Using a platform as an example, PlatformSetup, Update, and PlatformBuild all require settings classes, but they can all be provided by the same implementation with multi-inherence. The caveat is that you will not know which parent class is invoking you. If that is required, it will be necessary to break that settings class out into it's own class. It is also worth noting that multiple classes can live in the same file and the correct one will still be located by the loading logic. In the PlatformBuild scenario, it is even possible to have UefiBuilder, UpdateSettingsManager, SetupSettingsManager, and BuildSettingsManager all in one class.","title":"Invocables"},{"location":"features/invocable/#invocables","text":"Invocables exist as a way to setup the EDK2 environment in a consistent way such that any script could be run in the context of a UEFI environment. The base_abstract_invocable describes the necessities of the EDK2 environment, to be provided by the user however they wish. Built on top of that, edk2_invocable is an attempt to do as much parsing and setup for the user as possible to minimize the requirements of individual invocable scripts. To kick off a script, just Invoke().","title":"Invocables"},{"location":"features/invocable/#base_abstract_invocable","text":"example: Sample_InvocableHelloWorld.py","title":"base_abstract_invocable"},{"location":"features/invocable/#provided-functions","text":"","title":"provided functions"},{"location":"features/invocable/#invoke","text":"Main function. Parses command line options, configures logging, bootstraps environment, loads plugins, and finally calls Go.","title":"Invoke"},{"location":"features/invocable/#configurelogging","text":"Sets up logging using information from GetWorkspaceRoot, GetLoggingLevel, GetLoggingFileName, and GetLoggingFolderRelativeToRoot.","title":"ConfigureLogging"},{"location":"features/invocable/#abstract-functions","text":"ParseCommandLineOptions is your opportunity to use argparser or look at sys.argv before kicking off setup. If the environment isn't meant to be verifiable (maybe this script involves setting up or unpacking the environment), GetVerifyCheckRequired can return False to bypass that step. After that, GetWorkspaceRoot and GetActiveScopes is used to get the necessary information about the environment and set everything up. Go will be called after all that setup. Note: logging before ConfigureLogging gets called causes logging to be setup twice (once implicitly by calling it early and then again by ConfigureLogging) and you will see duplicate messages in your console. To avoid this, do not log in ParseCommandLineOptions, GetLoggingLevel, GetWorkspaceRoot, GetLoggingFolderRelativeToRoot, or GetLoggingFileName. If you must have output, use print() or log another way.","title":"abstract functions"},{"location":"features/invocable/#edk2_invocable","text":"Example: edk2toolext\\invocables\\edk2_update.py Basically just base_abstract_invocable + settings parsing.","title":"edk2_invocable"},{"location":"features/invocable/#functions","text":"","title":"functions"},{"location":"features/invocable/#parsecommandlineoptions","text":"This is implemented for the user. It requires a Python settings file be provided. After importing the settings file, another argparser is created, which is passed to the invoking script and to the settings file. Additionally, key value pairs in the format KEY=VALUE will be read into the build environment, accessible by calling shell_environment.GetBuildVars().GetValue(KEY) . For example, to skip loading the compiler plugin, pass CompilerPlugin=skip as an extra argument when calling your script.","title":"ParseCommandLineOptions"},{"location":"features/invocable/#getsettingsclass","text":"This must provide a Python class that edk2_invocable can expect to find instantiated by your settings script.","title":"GetSettingsClass"},{"location":"features/invocable/#multi-inheritance","text":"Example: NXP In Python it is allowed and it will be helpful for you as long as you don't try to get too creative with it. GetActiveScopes, GetWorkspaceRoot, AddCommandLineOptions, RetrieveCommandLineOptions are required to be in each Settings class. Using a platform as an example, PlatformSetup, Update, and PlatformBuild all require settings classes, but they can all be provided by the same implementation with multi-inherence. The caveat is that you will not know which parent class is invoking you. If that is required, it will be necessary to break that settings class out into it's own class. It is also worth noting that multiple classes can live in the same file and the correct one will still be located by the loading logic. In the PlatformBuild scenario, it is even possible to have UefiBuilder, UpdateSettingsManager, SetupSettingsManager, and BuildSettingsManager all in one class.","title":"multi inheritance"},{"location":"features/logging/","text":"edk2 logging \u00b6 edk2_logging is a collection of utilities to manage logging. There are four different ways to create handlers. setup_txt_logger - a handler that outputs a txt file setup_markdown_logger - a handler that outputs a markdown file with an output file setup_console_logging - a handler that logs to the console with optional colors create_output_stream - a handler that has an in-memory stream that you can later read from setup_logging is a helper function that creates 1-3 of the handlers. The output_stream is used for plugins in mu_build so they can keep track of compiler output General Practice \u00b6 All modules that are not PlatformBuilder or stuart_ci_build should request a named logger like this: logging . getLogger ( \"Git\" ) Modules that are not the root module get downgraded a level (ie. critical -> warning)","title":"Logging"},{"location":"features/logging/#edk2-logging","text":"edk2_logging is a collection of utilities to manage logging. There are four different ways to create handlers. setup_txt_logger - a handler that outputs a txt file setup_markdown_logger - a handler that outputs a markdown file with an output file setup_console_logging - a handler that logs to the console with optional colors create_output_stream - a handler that has an in-memory stream that you can later read from setup_logging is a helper function that creates 1-3 of the handlers. The output_stream is used for plugins in mu_build so they can keep track of compiler output","title":"edk2 logging"},{"location":"features/logging/#general-practice","text":"All modules that are not PlatformBuilder or stuart_ci_build should request a named logger like this: logging . getLogger ( \"Git\" ) Modules that are not the root module get downgraded a level (ie. critical -> warning)","title":"General Practice"},{"location":"features/plugin_manager/","text":"Plugin Manager \u00b6 The Genesis \u00b6 Plugins are similar to external dependencies, in that they are defined by a Json file and they are discovered by the SDE. If you wish to learn more about the SDE, please go read the document about the self describing environment. They are defined by the EnvironmentDescriptorFiles which also describe external dependencies and path descriptors. Types of plugins \u00b6 Types of plugins are defined by the class they inherit from UefiBuildPlugin Contains two methods, Pre and Post Build. These methods are called on Pre and Post Build steps in UefiBuild (not CiBuild). There is no guarantee on ordering between different plugins (Pre will always come before Post). Post is will not run if there is a critical error in the build process. The idea here is to allow for custom, self-contained build functionality to be added without required UEFI build changes or inline code modifications. DscProcessorPlugin (in-progress) This is a plugin type that can apply transformations to the active DSC that will then be used to build the system. This is not production ready and not enabled in any builds currently. UefiHelperPlugin This is a helper plugin that publishes a function that can be used by other parts of the system. An example of this would be the Capsule signing system. This really is less about plugin design and more about keeping the UEFI build and platform builder python files minimal and getting the desired code reuse. CiBuildPlugin A plugin that runs during the main stage of CiBuild. The build step is actually a plugin so as ordering is not guaranteed so you don't have any assurance that the build is successful or that the build has started How it works \u00b6 You might be asking yourself how does the sausage get made. In the name of sating curiosity, here it is. The SDE discovers the plugin .json environment descriptors in the file system tree. Once they're discovered, they're passed to the Plugin Manager which loads each of them and puts them into the appropriate structure. Once they're in there, they are requested by UefiBuild or CiBuild and dispatched. Helper functions are requested from the plugin_manager and then executed. Writing your own \u00b6 See Creating a Plugin For IUefiBuildPlugin type the plugin will simply be called during the pre and post build steps after the platform builder object runs its step. The UefiBuilder object will be passed during the call and therefore the environment dictionary is available within the plugin. These plugins should be authored to be independent and the platform build or UEFI build should not have any dependency on the plugin. The plugin can depend on variables within the environment dictionary but should be otherwise independent / isolated code. For IUefiHelperPlugin type the plugin will simply register functions with the helper object so that other parts of the platform build can use the functions. It is acceptable for platform build to know/need the helper functions but it is not acceptable for UEFI build super class to depend upon it. I expect most of these plugins will be at a layer lower than the UDK as this is really to isolate business unit logic while still allowing code reuse. Look at the HelperFunctions object to see how a plugin registers its functions. For ICiBuildPlugin type the plugin will be allowed to verify it's configuration and be called by the CiBuild system. It will have the current state of the build and access to the environment. CiBuild checkpoints the environment prior to calling out to each plugin, so the environment can be dirtied by the plugin. As an example of a Ci Build Plugin, we will look at one of the plugins we use, Character Encoding Check CiBuildPlugin. This runs as part of the CI build. The schema \u00b6 From EDK2/.pytool/Plugin/CharEncodingCheck https://github.com/tianocore/edk2/blob/master/.pytool/Plugin/CharEncodingCheck/CharEncodingCheck_plug_in.yaml { \"scope\" : \"cibuild\" , \"name\" : \"Char Encoding Check Test\" , \"module\" : \"CharEncodingCheck\" } Scope: See the SDE doc about scopes Name: This is the name of the plugin and will be part of the path where the nuget is unpacked Module: the python file to load The Python \u00b6 File is from: ci\\plugin\\CharEncodingCheck\\CharEncodingCheck.py It's important that the filename matches the Module name in the yaml file. import os import logging from edk2toolext.plugins.CiBuildPlugin import ICiBuildPlugin class CharEncodingCheck ( ICiBuildPlugin ): def GetTestName ( self , packagename , environment ): return ( \"CiBuild CharEncodingCheck \" + packagename , \"CiBuild.CharEncodingCheck.\" + packagename ) # - package is the edk2 path to package. This means workspace/package path relative. # - edk2path object configured with workspace and packages path # - any additional command line args # - RepositoryConfig Object (dict) for the build # - PkgConfig Object (dict) for the pkg # - EnvConfig Object # - Plugin Manager Instance # - Plugin Helper Obj Instance # - test-case Object used for tracking test results # - output_stream the StringIO output stream from this plugin def RunBuildPlugin ( self , packagename , Edk2pathObj , args , repoconfig , pkgconfig , environment , PLM , PLMHelper , tc , output_stream = None ): overall_status = 0 files_tested = 0 if overall_status is not 0 : tc . SetFailed ( \"CharEncoding {0} Failed. Errors {1} \" . format ( packagename , overall_status ), \"CHAR_ENCODING_CHECK_FAILED\" ) else : tc . SetSuccess () return overall_status Some things to notice are the class that this is inheriting from: ICiBuildPlugin. There is also this idea of the tc, which is the test unit class. You can set this particular CiBuild step as failed, skipped, or successful. Logging standard out or error out gets placed in the JUnit report that is later picked up by the CI system. Using a plugin \u00b6 Using plugins is straightforward but it exact usage depends on what type of plugin you use. For the IUefiBuildPlugin (pre/post build) and ICiBuildPlugin type there is nothing the UEFI build must do besides make sure the plugin is in your workspace and scoped to an active scope. For Helper plugins basically the UEFI builder Helper member will contain the registered functions as methods on the object. Therefore calling any function is as simple as using self.Helper.[your func name here]. It is by design that the parameters and calling contract are not defined. It is expected that the caller and plugin know about each other and are really just using the plugin system to make inclusion and code sharing easy. Skipping a plugin \u00b6 If you want to skip a plugin, set it in the environment before the environment is initialized. For example, it can be a part of your SettingsManager: class Settings ( CiBuildSettingsManager , CiSetupSettingsManager , UpdateSettingsManager ): def __init__ ( self ): plugin_skip_list = [ \"DependencyCheck\" , \"CompilerPlugin\" ] env = shell_environment . GetBuildVars () for plugin in plugin_skip_list : # KEY: Plugin name in all caps # VALUE: \"skip\" env . SetValue ( plugin . upper (), \"skip\" , \"set from settings file\" )","title":"Plugins"},{"location":"features/plugin_manager/#plugin-manager","text":"","title":"Plugin Manager"},{"location":"features/plugin_manager/#the-genesis","text":"Plugins are similar to external dependencies, in that they are defined by a Json file and they are discovered by the SDE. If you wish to learn more about the SDE, please go read the document about the self describing environment. They are defined by the EnvironmentDescriptorFiles which also describe external dependencies and path descriptors.","title":"The Genesis"},{"location":"features/plugin_manager/#types-of-plugins","text":"Types of plugins are defined by the class they inherit from UefiBuildPlugin Contains two methods, Pre and Post Build. These methods are called on Pre and Post Build steps in UefiBuild (not CiBuild). There is no guarantee on ordering between different plugins (Pre will always come before Post). Post is will not run if there is a critical error in the build process. The idea here is to allow for custom, self-contained build functionality to be added without required UEFI build changes or inline code modifications. DscProcessorPlugin (in-progress) This is a plugin type that can apply transformations to the active DSC that will then be used to build the system. This is not production ready and not enabled in any builds currently. UefiHelperPlugin This is a helper plugin that publishes a function that can be used by other parts of the system. An example of this would be the Capsule signing system. This really is less about plugin design and more about keeping the UEFI build and platform builder python files minimal and getting the desired code reuse. CiBuildPlugin A plugin that runs during the main stage of CiBuild. The build step is actually a plugin so as ordering is not guaranteed so you don't have any assurance that the build is successful or that the build has started","title":"Types of plugins"},{"location":"features/plugin_manager/#how-it-works","text":"You might be asking yourself how does the sausage get made. In the name of sating curiosity, here it is. The SDE discovers the plugin .json environment descriptors in the file system tree. Once they're discovered, they're passed to the Plugin Manager which loads each of them and puts them into the appropriate structure. Once they're in there, they are requested by UefiBuild or CiBuild and dispatched. Helper functions are requested from the plugin_manager and then executed.","title":"How it works"},{"location":"features/plugin_manager/#writing-your-own","text":"See Creating a Plugin For IUefiBuildPlugin type the plugin will simply be called during the pre and post build steps after the platform builder object runs its step. The UefiBuilder object will be passed during the call and therefore the environment dictionary is available within the plugin. These plugins should be authored to be independent and the platform build or UEFI build should not have any dependency on the plugin. The plugin can depend on variables within the environment dictionary but should be otherwise independent / isolated code. For IUefiHelperPlugin type the plugin will simply register functions with the helper object so that other parts of the platform build can use the functions. It is acceptable for platform build to know/need the helper functions but it is not acceptable for UEFI build super class to depend upon it. I expect most of these plugins will be at a layer lower than the UDK as this is really to isolate business unit logic while still allowing code reuse. Look at the HelperFunctions object to see how a plugin registers its functions. For ICiBuildPlugin type the plugin will be allowed to verify it's configuration and be called by the CiBuild system. It will have the current state of the build and access to the environment. CiBuild checkpoints the environment prior to calling out to each plugin, so the environment can be dirtied by the plugin. As an example of a Ci Build Plugin, we will look at one of the plugins we use, Character Encoding Check CiBuildPlugin. This runs as part of the CI build.","title":"Writing your own"},{"location":"features/plugin_manager/#the-schema","text":"From EDK2/.pytool/Plugin/CharEncodingCheck https://github.com/tianocore/edk2/blob/master/.pytool/Plugin/CharEncodingCheck/CharEncodingCheck_plug_in.yaml { \"scope\" : \"cibuild\" , \"name\" : \"Char Encoding Check Test\" , \"module\" : \"CharEncodingCheck\" } Scope: See the SDE doc about scopes Name: This is the name of the plugin and will be part of the path where the nuget is unpacked Module: the python file to load","title":"The schema"},{"location":"features/plugin_manager/#the-python","text":"File is from: ci\\plugin\\CharEncodingCheck\\CharEncodingCheck.py It's important that the filename matches the Module name in the yaml file. import os import logging from edk2toolext.plugins.CiBuildPlugin import ICiBuildPlugin class CharEncodingCheck ( ICiBuildPlugin ): def GetTestName ( self , packagename , environment ): return ( \"CiBuild CharEncodingCheck \" + packagename , \"CiBuild.CharEncodingCheck.\" + packagename ) # - package is the edk2 path to package. This means workspace/package path relative. # - edk2path object configured with workspace and packages path # - any additional command line args # - RepositoryConfig Object (dict) for the build # - PkgConfig Object (dict) for the pkg # - EnvConfig Object # - Plugin Manager Instance # - Plugin Helper Obj Instance # - test-case Object used for tracking test results # - output_stream the StringIO output stream from this plugin def RunBuildPlugin ( self , packagename , Edk2pathObj , args , repoconfig , pkgconfig , environment , PLM , PLMHelper , tc , output_stream = None ): overall_status = 0 files_tested = 0 if overall_status is not 0 : tc . SetFailed ( \"CharEncoding {0} Failed. Errors {1} \" . format ( packagename , overall_status ), \"CHAR_ENCODING_CHECK_FAILED\" ) else : tc . SetSuccess () return overall_status Some things to notice are the class that this is inheriting from: ICiBuildPlugin. There is also this idea of the tc, which is the test unit class. You can set this particular CiBuild step as failed, skipped, or successful. Logging standard out or error out gets placed in the JUnit report that is later picked up by the CI system.","title":"The Python"},{"location":"features/plugin_manager/#using-a-plugin","text":"Using plugins is straightforward but it exact usage depends on what type of plugin you use. For the IUefiBuildPlugin (pre/post build) and ICiBuildPlugin type there is nothing the UEFI build must do besides make sure the plugin is in your workspace and scoped to an active scope. For Helper plugins basically the UEFI builder Helper member will contain the registered functions as methods on the object. Therefore calling any function is as simple as using self.Helper.[your func name here]. It is by design that the parameters and calling contract are not defined. It is expected that the caller and plugin know about each other and are really just using the plugin system to make inclusion and code sharing easy.","title":"Using a plugin"},{"location":"features/plugin_manager/#skipping-a-plugin","text":"If you want to skip a plugin, set it in the environment before the environment is initialized. For example, it can be a part of your SettingsManager: class Settings ( CiBuildSettingsManager , CiSetupSettingsManager , UpdateSettingsManager ): def __init__ ( self ): plugin_skip_list = [ \"DependencyCheck\" , \"CompilerPlugin\" ] env = shell_environment . GetBuildVars () for plugin in plugin_skip_list : # KEY: Plugin name in all caps # VALUE: \"skip\" env . SetValue ( plugin . upper (), \"skip\" , \"set from settings file\" )","title":"Skipping a plugin"},{"location":"features/sde/","text":"The Self Describing Environment and You \u00b6 The Genesis \u00b6 Previous to stuart, a simple wrapper around the EDK2 build system was developed. As it grew, the centralized systems that have been in place to this point have gotten more and more brittle. Previously, the paths to critical files and build tools have been hard-coded into the primary build scripts (such as PlatformBuild.py). If code was to be added or moved, all build scripts for all projects had to be updated to find the new code and consume it. Furthermore, the old build system required that all binaries, executables, artifacts, and other miscellaneous files be carried in the source tree somewhere. Since moving to Git, this cost has become increasingly burdensome to the point where some of the larger repositories are almost unwieldy. The new Self Describing Environment system, along with the new Plugin behavior, aims to remedy some of these problems, while preserving flexibility and agility for further project growth. What is it \u00b6 The Self-Describing Environment is assembled by a combination of scripts and descriptor files. The scripts locate the descriptor files and configure the environment in a number of different ways (eg. PATH, PYTHONPATH, Shell Variables, Build Variables, external dependencies, etc.). Currently, there are two kinds of descriptor files that can be found in the Core UEFI tree: Path Environment descriptors (path_env) and External Dependency descriptors (ext_dep). Both of these files are simple JSON files containing fields that are used to configure the SDE. They have some overlapping features, but are used for very different purposes. Many of these features have their own documentation, and you are encouraged to go check them out. path_env Descriptors \u00b6 The path_env descriptor is used, primarily, to update the path. This way the build system can locate required tools and scripts. It can also update build vars that can be referenced from the Settings Manager or Uefi Builder to locate things like binary artifacts that will be included in certain build steps (eg. OPROM binaries). The path_env descriptor works by taking the path containing the descriptor and applying it to the environment as specified by the fields of the descriptor. For example, if there were a path_env file located at \"\\MyBuild\\SubDir\\Tools\\my_sample_path_env.json\" and the descriptor flags included \"set_path\", \"\\MyBuild\\SubDir\\Tools\" would be added to the environment path. path_env descriptors are located by the environment configuration scripts by searching the Workspace for files ending in \"*_path_env.json\". It does not matter what the first part of the file is called, so long as the end is correct. By convention, the first part of the file name should be descriptive enough to differentiate a given descriptor from another descriptor, should it show up in a \"find in files\" list or something. The following path_env fields are required: scope Identifies which build environments this descriptor contributes to, and what level of precedence it should take within that environment. flags We'll see that flags are common to both path_env and ext_dep descriptors, but they are required for path_env (and only optional for ext_dep). This is because it doesn't make any sense to create a path_env descriptor without specifying what part of the environment should be updated. Currently supported flags are: host_specific Allows a nuget package to specify that the contents of the package are organized by host OS or architecture. The SDE will determine what folder is relevant for the host OS and product being built and add that to the path. set_path Adds the NuGet unpacked folder to the front of PATH set_pypath Adds the NuGet unpacked folder to the front of PYTHONPATH. Also adds it to sys.path. set_build_var Sets a build variable with the key being the name of the ext_dep and the value being the path of the nuget unpacked folder If you include this attribute you must include a var_name (a var that exists internally to the build system that is retrieved with with env.GetValue()) set_shell_var Sets a shell variable with the key being the name of the ext_dep and the value being the path of the nuget unpacked folder If you include this attribute you must include a var_name (a var that exists in the command-line environment via \"set\" or \"os.environ\" or \"env\") include_separator Includes a path separated at the end of the path we set in variables The following path_env fields are optional or conditional: var_name If either the \"set_shell_var\" or \"set_build_var\" are in the flags, this field will be required. It defines the name of the var being set. id Part of the Override System, this field defines the name that this file will be referred to as by any override_id fields. It is an error for there to be multiple files with the same id in the same set of scopes. The SDE will throw an exception in this case. You are welcome to have the same id if they're on separate scopes that won't overlap. override_id This file will override any descriptor files. Override can apply to any type of descriptor (a path env can override an ext_dep for example). If two descriptors override the same file, this is considered an error and the SDE will throw an exception. The Belly of the Beast \u00b6 self_describing_environment.py \u00b6 This is the proverbial \"heart of the beast\". It contains most of the business logic for locating, compiling, sorting, filtering, and assembling the SDE files and the environment itself. There are class methods and helper functions to do things like: Locate all the relevant files in the workspace. Sort the files lexically and by scope. Filter the files based on overrides. Assemble the environment (eg. PATH, PYTHONPATH, vars, etc.). Validate all dependencies. Update all dependencies. Many of these routines will leverage logic specific to individual sub-modules (Python, not Git), but the collective logic is located here. EnvironmentDescriptorFiles.py \u00b6 This module contains business logic and validation code for dealing with the descriptor files as JSON objects. It contains code (and error checking) for loading the files, reading their contents into a standard internal representation, and running a limited set of sanitization and validation functions to identify any mistakes as early as possible and provide as much information as possible. For convenience, this module also contains the class code for PathEnv descriptor objects, but that's because the class code is so small felt silly to create another file. ExternalDependencies.py \u00b6 This module contains code for managing external dependencies. ExternalDependency objects are created with the data from ext_dep descriptors and are subclassed according to the \"type\" field in the descriptor. Currently, the only valid subclass is \"nuget\". These objects contain the code for fetching, validating, updating, and cleaning dependency objects and metadata. When referenced from the SDE itself, they can also update paths and other build/shell vars in the build environment. Taming the SDE \u00b6 Understanding Scope \u00b6 A critical concept in the SDE system is that of \"scope\". Each project can define its own scope, and scope is integral to the distributed and shared nature of the SDE. Project scopes are linearly hierarchical and can have an arbitrary number of entries. Only descriptors matching one or more of the scope entries will be included in the SDE during initialization. Furthermore, higher scopes will take precedence when setting paths and assigning values to vars. An example project scope might be: (\"my_platform\", \"tablet_family\", \"silicon_reference\") In this example, \"my_platform\" is the highest priority in the scope. Any descriptor files found in the entire workspace that have this scope will not only be included in the SDE, they will take precedence over any of the lesser scopes. \"tablet_family\" and \"silicon_reference\" scopes will also be used, in that order. Additionally, all projects inherit the \"global\" scope, but it takes the lowest precedence. Setting Up for Platform Builds \u00b6 Since the SDE knows how to fetch its own dependencies, and since all these dependencies are described by the code tree itself, stuart can now perform the minimal steps to enable building any given platform, including: Synchronizing all required submodules. Downloading all source (and only the source actually used by the platform). Configuring all paths. Downloading all binaries. NOTE: stuart_setup should only be required once per build machine, per platform being built. It is not necessary to run it regularly. Only when setting up a new personal workstation or starting to work with a platform that you haven't used yet. The stuart_setup feature does not actually build the platform. The stuart_setup feature will NOT change branches in any submodule that already exists locally, or that has local changes. This is to prevent accidental loss of work. If you would like the script to try making changes even in these cases, use the \"--FORCE\" argument. The stuart_setup feature does not yet install dev singing certs. Those steps must still be performed manually. Updating \u00b6 Prior to any build, the SDE will attempt to validate the external dependencies that currently exist on the local machine against the versions that are specified in the code. If the code is updated (perhaps by a pull request to the branch you're working on), it is possible that the dependencies will have to be refreshed. If this is the case, you will see a message prompting you to do so when you run stuart_build to build your platform. To perform this update, simply run the stuart_update . Any dependencies that match their current versions will be skipped and only out-of-date dependencies will be refreshed. Setting Up for CI Build \u00b6 Stuart CI Build works on a similar mechanism to stuart_build and expects to be have things setup and updated. Git Modules are monitored and handled via the repo_resolver framework, which has more logic to it, and doesn't handle submodules. stuart_ci_setup handles python defined git modules to clone into the code tree. Building \u00b6 Building can be done with stuart_build or stuart_ci_build . Note that the current state of the SDE is always printed in the DEBUG level of the build log.","title":"Self Describing Environment"},{"location":"features/sde/#the-self-describing-environment-and-you","text":"","title":"The Self Describing Environment and You"},{"location":"features/sde/#the-genesis","text":"Previous to stuart, a simple wrapper around the EDK2 build system was developed. As it grew, the centralized systems that have been in place to this point have gotten more and more brittle. Previously, the paths to critical files and build tools have been hard-coded into the primary build scripts (such as PlatformBuild.py). If code was to be added or moved, all build scripts for all projects had to be updated to find the new code and consume it. Furthermore, the old build system required that all binaries, executables, artifacts, and other miscellaneous files be carried in the source tree somewhere. Since moving to Git, this cost has become increasingly burdensome to the point where some of the larger repositories are almost unwieldy. The new Self Describing Environment system, along with the new Plugin behavior, aims to remedy some of these problems, while preserving flexibility and agility for further project growth.","title":"The Genesis"},{"location":"features/sde/#what-is-it","text":"The Self-Describing Environment is assembled by a combination of scripts and descriptor files. The scripts locate the descriptor files and configure the environment in a number of different ways (eg. PATH, PYTHONPATH, Shell Variables, Build Variables, external dependencies, etc.). Currently, there are two kinds of descriptor files that can be found in the Core UEFI tree: Path Environment descriptors (path_env) and External Dependency descriptors (ext_dep). Both of these files are simple JSON files containing fields that are used to configure the SDE. They have some overlapping features, but are used for very different purposes. Many of these features have their own documentation, and you are encouraged to go check them out.","title":"What is it"},{"location":"features/sde/#path_env-descriptors","text":"The path_env descriptor is used, primarily, to update the path. This way the build system can locate required tools and scripts. It can also update build vars that can be referenced from the Settings Manager or Uefi Builder to locate things like binary artifacts that will be included in certain build steps (eg. OPROM binaries). The path_env descriptor works by taking the path containing the descriptor and applying it to the environment as specified by the fields of the descriptor. For example, if there were a path_env file located at \"\\MyBuild\\SubDir\\Tools\\my_sample_path_env.json\" and the descriptor flags included \"set_path\", \"\\MyBuild\\SubDir\\Tools\" would be added to the environment path. path_env descriptors are located by the environment configuration scripts by searching the Workspace for files ending in \"*_path_env.json\". It does not matter what the first part of the file is called, so long as the end is correct. By convention, the first part of the file name should be descriptive enough to differentiate a given descriptor from another descriptor, should it show up in a \"find in files\" list or something. The following path_env fields are required: scope Identifies which build environments this descriptor contributes to, and what level of precedence it should take within that environment. flags We'll see that flags are common to both path_env and ext_dep descriptors, but they are required for path_env (and only optional for ext_dep). This is because it doesn't make any sense to create a path_env descriptor without specifying what part of the environment should be updated. Currently supported flags are: host_specific Allows a nuget package to specify that the contents of the package are organized by host OS or architecture. The SDE will determine what folder is relevant for the host OS and product being built and add that to the path. set_path Adds the NuGet unpacked folder to the front of PATH set_pypath Adds the NuGet unpacked folder to the front of PYTHONPATH. Also adds it to sys.path. set_build_var Sets a build variable with the key being the name of the ext_dep and the value being the path of the nuget unpacked folder If you include this attribute you must include a var_name (a var that exists internally to the build system that is retrieved with with env.GetValue()) set_shell_var Sets a shell variable with the key being the name of the ext_dep and the value being the path of the nuget unpacked folder If you include this attribute you must include a var_name (a var that exists in the command-line environment via \"set\" or \"os.environ\" or \"env\") include_separator Includes a path separated at the end of the path we set in variables The following path_env fields are optional or conditional: var_name If either the \"set_shell_var\" or \"set_build_var\" are in the flags, this field will be required. It defines the name of the var being set. id Part of the Override System, this field defines the name that this file will be referred to as by any override_id fields. It is an error for there to be multiple files with the same id in the same set of scopes. The SDE will throw an exception in this case. You are welcome to have the same id if they're on separate scopes that won't overlap. override_id This file will override any descriptor files. Override can apply to any type of descriptor (a path env can override an ext_dep for example). If two descriptors override the same file, this is considered an error and the SDE will throw an exception.","title":"path_env Descriptors"},{"location":"features/sde/#the-belly-of-the-beast","text":"","title":"The Belly of the Beast"},{"location":"features/sde/#self_describing_environmentpy","text":"This is the proverbial \"heart of the beast\". It contains most of the business logic for locating, compiling, sorting, filtering, and assembling the SDE files and the environment itself. There are class methods and helper functions to do things like: Locate all the relevant files in the workspace. Sort the files lexically and by scope. Filter the files based on overrides. Assemble the environment (eg. PATH, PYTHONPATH, vars, etc.). Validate all dependencies. Update all dependencies. Many of these routines will leverage logic specific to individual sub-modules (Python, not Git), but the collective logic is located here.","title":"self_describing_environment.py"},{"location":"features/sde/#environmentdescriptorfilespy","text":"This module contains business logic and validation code for dealing with the descriptor files as JSON objects. It contains code (and error checking) for loading the files, reading their contents into a standard internal representation, and running a limited set of sanitization and validation functions to identify any mistakes as early as possible and provide as much information as possible. For convenience, this module also contains the class code for PathEnv descriptor objects, but that's because the class code is so small felt silly to create another file.","title":"EnvironmentDescriptorFiles.py"},{"location":"features/sde/#externaldependenciespy","text":"This module contains code for managing external dependencies. ExternalDependency objects are created with the data from ext_dep descriptors and are subclassed according to the \"type\" field in the descriptor. Currently, the only valid subclass is \"nuget\". These objects contain the code for fetching, validating, updating, and cleaning dependency objects and metadata. When referenced from the SDE itself, they can also update paths and other build/shell vars in the build environment.","title":"ExternalDependencies.py"},{"location":"features/sde/#taming-the-sde","text":"","title":"Taming the SDE"},{"location":"features/sde/#understanding-scope","text":"A critical concept in the SDE system is that of \"scope\". Each project can define its own scope, and scope is integral to the distributed and shared nature of the SDE. Project scopes are linearly hierarchical and can have an arbitrary number of entries. Only descriptors matching one or more of the scope entries will be included in the SDE during initialization. Furthermore, higher scopes will take precedence when setting paths and assigning values to vars. An example project scope might be: (\"my_platform\", \"tablet_family\", \"silicon_reference\") In this example, \"my_platform\" is the highest priority in the scope. Any descriptor files found in the entire workspace that have this scope will not only be included in the SDE, they will take precedence over any of the lesser scopes. \"tablet_family\" and \"silicon_reference\" scopes will also be used, in that order. Additionally, all projects inherit the \"global\" scope, but it takes the lowest precedence.","title":"Understanding Scope"},{"location":"features/sde/#setting-up-for-platform-builds","text":"Since the SDE knows how to fetch its own dependencies, and since all these dependencies are described by the code tree itself, stuart can now perform the minimal steps to enable building any given platform, including: Synchronizing all required submodules. Downloading all source (and only the source actually used by the platform). Configuring all paths. Downloading all binaries. NOTE: stuart_setup should only be required once per build machine, per platform being built. It is not necessary to run it regularly. Only when setting up a new personal workstation or starting to work with a platform that you haven't used yet. The stuart_setup feature does not actually build the platform. The stuart_setup feature will NOT change branches in any submodule that already exists locally, or that has local changes. This is to prevent accidental loss of work. If you would like the script to try making changes even in these cases, use the \"--FORCE\" argument. The stuart_setup feature does not yet install dev singing certs. Those steps must still be performed manually.","title":"Setting Up for Platform Builds"},{"location":"features/sde/#updating","text":"Prior to any build, the SDE will attempt to validate the external dependencies that currently exist on the local machine against the versions that are specified in the code. If the code is updated (perhaps by a pull request to the branch you're working on), it is possible that the dependencies will have to be refreshed. If this is the case, you will see a message prompting you to do so when you run stuart_build to build your platform. To perform this update, simply run the stuart_update . Any dependencies that match their current versions will be skipped and only out-of-date dependencies will be refreshed.","title":"Updating"},{"location":"features/sde/#setting-up-for-ci-build","text":"Stuart CI Build works on a similar mechanism to stuart_build and expects to be have things setup and updated. Git Modules are monitored and handled via the repo_resolver framework, which has more logic to it, and doesn't handle submodules. stuart_ci_setup handles python defined git modules to clone into the code tree.","title":"Setting Up for CI Build"},{"location":"features/sde/#building","text":"Building can be done with stuart_build or stuart_ci_build . Note that the current state of the SDE is always printed in the DEBUG level of the build log.","title":"Building"},{"location":"features/settings_manager/","text":"Settings manager \u00b6 Each edk2 invocable has an abstract definition of a Settings Manager class that provides needed information such as scope, repositories, command-line options, and other things. This allows scopes to be dynamic but in a standardized way. Below is a sample implementation of a settings manager for your reference. This is an implementation of both UpdateSettingsManager and SetupSettingsManager using multiple inheritance. You can see that they add their own command line argument --production that is used to toggle the use of the production scope. For any given invocable, you can pass -h or --help to show a list of available command line options. If you call -c <path> --help this list will also include command line options provided from the settings file you provided. These examples are for building a platform, which needs instances of UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager , and UefiBuilder . The instances can be grouped together in a single class, or separated into different classes. Examples \u00b6 All settings grouped together \u00b6 class SettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . PRODUCTION_SCOPE = ( 'production' , ) self . BASE_SCOPE = ( 'imxfamily' , 'imx8' ) self . production = None def GetProjectScope ( self ): ''' get scope ''' SCOPE = self . BASE_SCOPE if self . production : SCOPE += self . PRODUCTION_SCOPE return SCOPE def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . WORKSPACE_PATH def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return [ RequiredSubmodule ( 'MU_BASECORE' ), RequiredSubmodule ( 'Silicon/ARM/NXP' ), RequiredSubmodule ( 'Common/MU' ), RequiredSubmodule ( 'Common/MU_TIANO' ), RequiredSubmodule ( 'Common/MU_OEM_SAMPLE' ), RequiredSubmodule ( 'Silicon/ARM/MU_TIANO' ) ] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' parserObj . add_argument ( '--production' , dest = \"production\" , action = 'store_true' , default = False ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' self . production = args . production #-------------------------------------------------------------------------------------------------------- # Subclass the UEFI builder and add platform specific functionality. # class PlatformBuilder ( UefiBuilder ): def SetPlatformEnv ( self ): return 0 def SetPlatformEnvAfterTarget ( self ): return 0 def PlatformPostBuild ( self ): return 0 def PlatformPreBuild ( self ): return 0 def PlatformGatedBuildShouldHappen ( self ): return False def ComputeVersionValue ( self ): return 0 def ValidateVersionValue ( self ): return 0 def PlatformFlashImage ( self ): raise Exception ( \"Flashing not supported\" ) Build Settings grouped with UefiBuilder , other settings separate \u00b6 class SettingsManager ( UpdateSettingsManager , SetupSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . PRODUCTION_SCOPE = ( 'production' , ) self . BASE_SCOPE = ( 'imxfamily' , 'imx8' ) self . production = None def GetProjectScope ( self ): ''' get scope ''' SCOPE = self . BASE_SCOPE if self . production : SCOPE += self . PRODUCTION_SCOPE return SCOPE def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . WORKSPACE_PATH def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return [ RequiredSubmodule ( 'MU_BASECORE' ), RequiredSubmodule ( 'Silicon/ARM/NXP' ), RequiredSubmodule ( 'Common/MU' ), RequiredSubmodule ( 'Common/MU_TIANO' ), RequiredSubmodule ( 'Common/MU_OEM_SAMPLE' ), RequiredSubmodule ( 'Silicon/ARM/MU_TIANO' )] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' parserObj . add_argument ( '--production' , dest = \"production\" , action = 'store_true' , default = False ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' self . production = args . production class PlatformBuilder ( UefiBuilder , BuildSettingsManager ): def __init__ ( self ): UefiBuilder . __init__ ( self ) SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . PRODUCTION_SCOPE = ( 'production' , ) self . BASE_SCOPE = ( 'imxfamily' , 'imx8' ) MODULE_PKGS = [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] self . MODULE_PKG_PATHS = os . pathsep . join ( os . path . join ( self . WORKSPACE_PATH , pkg_name ) for pkg_name in MODULE_PKGS ) self . production = None def GetProjectScope ( self ): ''' return tuple containing scopes that should be active for this process ''' SCOPE = self . BASE_SCOPE if self . production : SCOPE += self . PRODUCTION_SCOPE return SCOPE def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . WORKSPACE_PATH def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' UefiBuilder . AddCommandLineOptions ( self , parserObj ) parserObj . add_argument ( '--production' , dest = \"production\" , action = 'store_true' , default = False ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' UefiBuilder . RetrieveCommandLineOptions ( self , args ) self . production = args . production A note on multi-inheritance \u00b6 If you implement several classes, you might wonder how the system knows which AddCommandLineOptions to call when it's doing update vs setup? The answer is that it doesn't. It's a classic case of the diamond problem and python's answer for this is the MRO. Currently, our advice is to not call super into the settings classes in this package. You can call super to your classes that you have implemented that subclass pytool settings classes.","title":"Settings Manager"},{"location":"features/settings_manager/#settings-manager","text":"Each edk2 invocable has an abstract definition of a Settings Manager class that provides needed information such as scope, repositories, command-line options, and other things. This allows scopes to be dynamic but in a standardized way. Below is a sample implementation of a settings manager for your reference. This is an implementation of both UpdateSettingsManager and SetupSettingsManager using multiple inheritance. You can see that they add their own command line argument --production that is used to toggle the use of the production scope. For any given invocable, you can pass -h or --help to show a list of available command line options. If you call -c <path> --help this list will also include command line options provided from the settings file you provided. These examples are for building a platform, which needs instances of UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager , and UefiBuilder . The instances can be grouped together in a single class, or separated into different classes.","title":"Settings manager"},{"location":"features/settings_manager/#examples","text":"","title":"Examples"},{"location":"features/settings_manager/#all-settings-grouped-together","text":"class SettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . PRODUCTION_SCOPE = ( 'production' , ) self . BASE_SCOPE = ( 'imxfamily' , 'imx8' ) self . production = None def GetProjectScope ( self ): ''' get scope ''' SCOPE = self . BASE_SCOPE if self . production : SCOPE += self . PRODUCTION_SCOPE return SCOPE def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . WORKSPACE_PATH def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return [ RequiredSubmodule ( 'MU_BASECORE' ), RequiredSubmodule ( 'Silicon/ARM/NXP' ), RequiredSubmodule ( 'Common/MU' ), RequiredSubmodule ( 'Common/MU_TIANO' ), RequiredSubmodule ( 'Common/MU_OEM_SAMPLE' ), RequiredSubmodule ( 'Silicon/ARM/MU_TIANO' ) ] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' parserObj . add_argument ( '--production' , dest = \"production\" , action = 'store_true' , default = False ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' self . production = args . production #-------------------------------------------------------------------------------------------------------- # Subclass the UEFI builder and add platform specific functionality. # class PlatformBuilder ( UefiBuilder ): def SetPlatformEnv ( self ): return 0 def SetPlatformEnvAfterTarget ( self ): return 0 def PlatformPostBuild ( self ): return 0 def PlatformPreBuild ( self ): return 0 def PlatformGatedBuildShouldHappen ( self ): return False def ComputeVersionValue ( self ): return 0 def ValidateVersionValue ( self ): return 0 def PlatformFlashImage ( self ): raise Exception ( \"Flashing not supported\" )","title":"All settings grouped together"},{"location":"features/settings_manager/#build-settings-grouped-with-uefibuilder-other-settings-separate","text":"class SettingsManager ( UpdateSettingsManager , SetupSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . PRODUCTION_SCOPE = ( 'production' , ) self . BASE_SCOPE = ( 'imxfamily' , 'imx8' ) self . production = None def GetProjectScope ( self ): ''' get scope ''' SCOPE = self . BASE_SCOPE if self . production : SCOPE += self . PRODUCTION_SCOPE return SCOPE def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . WORKSPACE_PATH def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return [ RequiredSubmodule ( 'MU_BASECORE' ), RequiredSubmodule ( 'Silicon/ARM/NXP' ), RequiredSubmodule ( 'Common/MU' ), RequiredSubmodule ( 'Common/MU_TIANO' ), RequiredSubmodule ( 'Common/MU_OEM_SAMPLE' ), RequiredSubmodule ( 'Silicon/ARM/MU_TIANO' )] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' parserObj . add_argument ( '--production' , dest = \"production\" , action = 'store_true' , default = False ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' self . production = args . production class PlatformBuilder ( UefiBuilder , BuildSettingsManager ): def __init__ ( self ): UefiBuilder . __init__ ( self ) SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . WORKSPACE_PATH = os . path . dirname ( os . path . dirname ( SCRIPT_PATH )) self . PRODUCTION_SCOPE = ( 'production' , ) self . BASE_SCOPE = ( 'imxfamily' , 'imx8' ) MODULE_PKGS = [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] self . MODULE_PKG_PATHS = os . pathsep . join ( os . path . join ( self . WORKSPACE_PATH , pkg_name ) for pkg_name in MODULE_PKGS ) self . production = None def GetProjectScope ( self ): ''' return tuple containing scopes that should be active for this process ''' SCOPE = self . BASE_SCOPE if self . production : SCOPE += self . PRODUCTION_SCOPE return SCOPE def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . WORKSPACE_PATH def GetPackagesPath ( self ): ''' Return a list of workspace relative paths that should be mapped as edk2 PackagesPath ''' return [ 'MU_BASECORE' , 'Silicon/ARM/NXP' , 'Common/MU' , 'Common/MU_TIANO' , 'Common/MU_OEM_SAMPLE' , 'Silicon/ARM/MU_TIANO' ] def AddCommandLineOptions ( self , parserObj ): ''' Add command line options to the argparser ''' UefiBuilder . AddCommandLineOptions ( self , parserObj ) parserObj . add_argument ( '--production' , dest = \"production\" , action = 'store_true' , default = False ) def RetrieveCommandLineOptions ( self , args ): ''' Retrieve command line options from the argparser ''' UefiBuilder . RetrieveCommandLineOptions ( self , args ) self . production = args . production","title":"Build Settings grouped with UefiBuilder, other settings separate"},{"location":"features/settings_manager/#a-note-on-multi-inheritance","text":"If you implement several classes, you might wonder how the system knows which AddCommandLineOptions to call when it's doing update vs setup? The answer is that it doesn't. It's a classic case of the diamond problem and python's answer for this is the MRO. Currently, our advice is to not call super into the settings classes in this package. You can call super to your classes that you have implemented that subclass pytool settings classes.","title":"A note on multi-inheritance"},{"location":"features/using_linux/","text":"Using Linux for UEFI Development \u00b6 There are many folks in the UEFI community using Linux as their main dev machines. This guide is focused on setting up Linux for UEFI development. This guide also uses Visual Studio Code as it has fantastic capabilities that makes working in Linux much easier. Any IDE or editor is usable for UEFI development. It also explains how to use WSL to setup Linux in a Windows environment. So if you have a Linux machine, you can follow the later half of this guide to skip setting up WSL. For reference, this tutorial was written for a 1903 version of Windows with WSL. Getting Started with WSL \u00b6 The best documentation at time of writing can be found: https://docs.microsoft.com/en-us/windows/wsl/wsl2-install Following the guide, we need to check the minimum version requirements. Check the document as mentioned to find the Windows version needed for WSL. Install the optional windows components through PowerShell. These commands may change, so check the document. But the commands to run in an Admin PowerShell window were these: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform You might need to reboot to fully enable the WSL subsystem. Once you are rebooted, we can setup our distro. We are using Ubuntu-18.04 LTS. We now need to set it to use WSLv2. You use either of these commands wsl - -set-default-version 2 This will set the default WSL environment as version 2. Or you can set a specific distro to be version 2. wsl - -set-version Ubuntu - 18 . 04 2 This will take a few minutes. As it converts the distro to WSLv2. You can check to make sure the conversion was successful. wsl - -list - -verbose You should see something like this: NAME STATE VERSION * Ubuntu - 18 . 04 Stopped 2 Starting your WSL Environment \u00b6 Starting your new environment is easy. Open the Ubuntu-18.04 app in your start menu or type wsl into the command window (note that this will launch your default instance, which may not be Ubuntu-18.04 if you have multiple environments installed). When you first start the environment, it will do initial first time setup that may take a few minutes. It will prompt you for a new username and password. This can be unique from your windows username and password. Setting up NuGet/Mono \u00b6 If you use the external dependency features of pytools, you'll need to update your mono to support NuGet on Linux. This applies to all Linux users, WSL or native. See more information in the using_extdep document here . Setting up other tools \u00b6 You'll need python3, which on Ubuntu 3.5 comes default (as of time of writing). Pip comes separately, so that will be need to be installed. Setting up VS Code (optional) \u00b6 Visual Studio code makes developing in WSL much easier. This guide here is pretty informative: https://code.visualstudio.com/docs/remote/wsl Install Visual Studio Code in your windows environment. Then install the Remote Development VS Code extension. You should see the installation of the VS Code server if you are doing this for the first time. If you don't see it, make sure your extension is installed properly. Navigate to the folder you want to use in your WSL terminal and then run code cd my_project_folder code . You can use your VS Code editor just like you're editing locally. Opening a terminal in VS Code opens a WSL window, which makes executing commands within the Linux environment easier. Alternatively, you can use any IDE or editor that's effective for you. Questions \u00b6 If you have any questions or comments, feel free to leave an issue on our GitHub repo here","title":"WSL"},{"location":"features/using_linux/#using-linux-for-uefi-development","text":"There are many folks in the UEFI community using Linux as their main dev machines. This guide is focused on setting up Linux for UEFI development. This guide also uses Visual Studio Code as it has fantastic capabilities that makes working in Linux much easier. Any IDE or editor is usable for UEFI development. It also explains how to use WSL to setup Linux in a Windows environment. So if you have a Linux machine, you can follow the later half of this guide to skip setting up WSL. For reference, this tutorial was written for a 1903 version of Windows with WSL.","title":"Using Linux for UEFI Development"},{"location":"features/using_linux/#getting-started-with-wsl","text":"The best documentation at time of writing can be found: https://docs.microsoft.com/en-us/windows/wsl/wsl2-install Following the guide, we need to check the minimum version requirements. Check the document as mentioned to find the Windows version needed for WSL. Install the optional windows components through PowerShell. These commands may change, so check the document. But the commands to run in an Admin PowerShell window were these: Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform You might need to reboot to fully enable the WSL subsystem. Once you are rebooted, we can setup our distro. We are using Ubuntu-18.04 LTS. We now need to set it to use WSLv2. You use either of these commands wsl - -set-default-version 2 This will set the default WSL environment as version 2. Or you can set a specific distro to be version 2. wsl - -set-version Ubuntu - 18 . 04 2 This will take a few minutes. As it converts the distro to WSLv2. You can check to make sure the conversion was successful. wsl - -list - -verbose You should see something like this: NAME STATE VERSION * Ubuntu - 18 . 04 Stopped 2","title":"Getting Started with WSL"},{"location":"features/using_linux/#starting-your-wsl-environment","text":"Starting your new environment is easy. Open the Ubuntu-18.04 app in your start menu or type wsl into the command window (note that this will launch your default instance, which may not be Ubuntu-18.04 if you have multiple environments installed). When you first start the environment, it will do initial first time setup that may take a few minutes. It will prompt you for a new username and password. This can be unique from your windows username and password.","title":"Starting your WSL Environment"},{"location":"features/using_linux/#setting-up-nugetmono","text":"If you use the external dependency features of pytools, you'll need to update your mono to support NuGet on Linux. This applies to all Linux users, WSL or native. See more information in the using_extdep document here .","title":"Setting up NuGet/Mono"},{"location":"features/using_linux/#setting-up-other-tools","text":"You'll need python3, which on Ubuntu 3.5 comes default (as of time of writing). Pip comes separately, so that will be need to be installed.","title":"Setting up other tools"},{"location":"features/using_linux/#setting-up-vs-code-optional","text":"Visual Studio code makes developing in WSL much easier. This guide here is pretty informative: https://code.visualstudio.com/docs/remote/wsl Install Visual Studio Code in your windows environment. Then install the Remote Development VS Code extension. You should see the installation of the VS Code server if you are doing this for the first time. If you don't see it, make sure your extension is installed properly. Navigate to the folder you want to use in your WSL terminal and then run code cd my_project_folder code . You can use your VS Code editor just like you're editing locally. Opening a terminal in VS Code opens a WSL window, which makes executing commands within the Linux environment easier. Alternatively, you can use any IDE or editor that's effective for you.","title":"Setting up VS Code (optional)"},{"location":"features/using_linux/#questions","text":"If you have any questions or comments, feel free to leave an issue on our GitHub repo here","title":"Questions"},{"location":"integrate/build/","text":"Building A Platform \u00b6 You have an EDK2 implementation, a platform DSC, and a platform FDF? Great! You are one settings file away from a great platform building experience. The build process has three stuart commands to take your firmware code tree from freshly cloned to fully built: stuart_setup , stuart_update , stuart_build (hereby known has the \"command(s)\"). Behind the scenes, each command is an Invocable that has a corresponding Settings Manager that the platform subclasses to provide platform specific information. In hopes of keeping this section as light as possible, the information provided will be broad and more conversational then tutorial. If you want a step by step example of porting a platform, we have one! Please see Porting the Raspberry Pi 3 . Getting Started \u00b6 Stuart needs a settings file to configure itself. This settings file must provide a settings manager subclasses for each command you plan on using. This settings manager is the interface that provides platform specific information to the platform agnostic invocable. This is done via subclassing the corresponding settings file and overriding the necessary methods described in the Settings Manager . In terms of building a platform, there are five classes that you need to be aware of. The first two are interfaces that provide functions used across all three commands and can be shared among the SettingsManagers by using Multiple Inheritance . Edk2InvocableSettingsInterface MultiPkgAwareSettingsInterface SetupSettingsManager UpdateSettingsManager BuildSettingsManager The final class we inherit from in the settings file the UefiBuilder and is what provides the bulk of customization EDK2 Pytools affords you. This is also where you can utilize many of the features and functionality spread across Edk2-Pytools (Extensions and Library). Lets take a look at each command! Stuart Setup \u00b6 stuart_setup is the first command and is responsible for setting up the code tree. Currently, this only involves preparing the git submodules necessary for build. If you've created an Omnicache , here is where you would use it to save on network bandwidth, disk space, and time when cloning repos. As you might expect, stuart_setup does not automatically know what submodules are necessary for each platform; we must use the SetupSettingsManager to provide that information. Note The command specific Settings Manager may not provide ALL platform data required by the command; it only provides the platform data specific to that command. You still need to override some methods from Edk2InvocableSettingsInterface and MultiPkgAwareSettingsInterface that multiple (or all) commands use, which is why they are in the parent class. Don't worry though! If you miss overriding a required method, you'll raise a NotImplementedError ! Review the stuart_setup specific settings manager here . Stuart Update \u00b6 Next up is stuart_update , which is responsible for updating any external dependencies in the workspace. This includes downloading and performing miscellaneous tasks for external dependencies. You can find details on how external dependencies work and how to utilize them in the ext_dep section. As you'll see in the API reference for UpdateSettingsManager , no additional methods need to be overwritten. At first glance, it may seem like stuart_update does not need any platform specific information, but it actually does. The key takeaway is that you'll still need to inherit from UpdateSettingsManager ; it's just that the necessary platform data for this command comes from overriding methods in the parent class Edk2InvocableSettingsInterface and/or MultiPkgAwareSettingsInterface . Review the stuart_update specific settings manager here . Stuart Build \u00b6 Lastly is the stuart_build command, which actually has two phases to it. The first phase is executed via the stuart_build command and uses the BuildSettingsManager to setup the environment in preparation for the build. It will then invoke the UefiBuilder , signaling the start of the second phase which consists of most of the customization afforded to you by EDK2 Pytools. Review the stuart_build specific settings manager here . UefiBuilder \u00b6 So what has all of these commands been culminating to? They've all been working to prepare a Self Describing Environment for the UefiBuilder to operate in. The purpose of the UefiBuilder is to allow the platform to perform various tasks using this environment. Custom made UefiBuildPlugins will automatically be run Pre and Post build for all platforms while UefiHelperPlugins will be available to the developer to help create Platform specific Pre and Post build functionality. The UefiBuilder class has a lot to it, so let's take a look at each part. Command Line options \u00b6 UefiBuilder has multiple built in command line options that control the flow of the build. The below code snippet shows these command line variables and are accessible via self.<dest> . Developers can use this to help control flow in any of the overrideable methods described in the following sections, however they are also used to control build flow outside the control of the developer. Adds command line options to the argparser. Parameters: Name Type Description Default parserObj argparser argparser object required Source code in edk2toolext\\environment\\uefi_build.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def AddPlatformCommandLineOptions ( self , parserObj ): \"\"\"Adds command line options to the argparser. Args: parserObj (argparser): argparser object \"\"\" parserObj . add_argument ( \"--SKIPBUILD\" , \"--skipbuild\" , \"--SkipBuild\" , dest = \"SKIPBUILD\" , action = 'store_true' , default = False , help = \"Skip the build process\" ) parserObj . add_argument ( \"--SKIPPREBUILD\" , \"--skipprebuild\" , \"--SkipPrebuild\" , dest = \"SKIPPREBUILD\" , action = 'store_true' , default = False , help = \"Skip prebuild process\" ) parserObj . add_argument ( \"--SKIPPOSTBUILD\" , \"--skippostbuild\" , \"--SkipPostBuild\" , dest = \"SKIPPOSTBUILD\" , action = 'store_true' , default = False , help = \"Skip postbuild process\" ) parserObj . add_argument ( \"--FLASHONLY\" , \"--flashonly\" , \"--FlashOnly\" , dest = \"FLASHONLY\" , action = 'store_true' , default = False , help = \"Flash rom after build.\" ) parserObj . add_argument ( \"--FLASHROM\" , \"--flashrom\" , \"--FlashRom\" , dest = \"FLASHROM\" , action = 'store_true' , default = False , help = \"Flash rom. Rom must be built previously.\" ) parserObj . add_argument ( \"--UPDATECONF\" , \"--updateconf\" , \"--UpdateConf\" , dest = \"UPDATECONF\" , action = 'store_true' , default = False , help = \"Update Conf. Builders Conf files will be replaced with latest template files\" ) parserObj . add_argument ( \"--CLEAN\" , \"--clean\" , \"--CLEAN\" , dest = \"CLEAN\" , action = 'store_true' , default = False , help = \"Clean. Remove all old build artifacts and intermediate files\" ) parserObj . add_argument ( \"--CLEANONLY\" , \"--cleanonly\" , \"--CleanOnly\" , dest = \"CLEANONLY\" , action = 'store_true' , default = False , help = \"Clean Only. Do clean operation and don't build just exit.\" ) parserObj . add_argument ( \"--OUTPUTCONFIG\" , \"--outputconfig\" , \"--OutputConfig\" , dest = 'OutputConfig' , required = False , type = str , help = 'Provide shell variables in a file' ) While we don't provide you the ability to override this function (without being hacky like overriding it anyway and calling the superclass in your override), there is an easy way to add CLI options to your build, which is through Platform Environment Variables Platform Environment Variables \u00b6 Platform environment variables are a powerful tool used throughout the build process. Not only do environment variables allow you to control build flow within the UefiBuilder , but they also are used by the platform fdf and dsc. You can set platform environment variables in the platform DSC, FDF, Settings File, and Command Line; any variable set in one is available in the others! A simple example of this would be to add or remove features based off some criteria. With Edk2-Pytools this is as simple as setting a single env variable during build. We will walk through this example soon. Setting / Getting Environment Variables \u00b6 It's easy set and get environment variables in the FDF, DSC, Settings file, and Command line as seen in the table below: Type Set Get Command Line VAR=Value N/A FDF/DSC DEFINE VAR = Value $(VAR) Settings File env.SetValue(Var, Value) env.GetValue(Var, DefaultValue) While you can set and get variables anywhere in the UefiBuilder portion of the settings file, we provide the following two methods to set environment variables, ensuring they are available everywhere that you are allowed to customize: SetPlatformEnv SetPlatfromEnvAfterTarget Simply override these two functions in your subclass of the UefiBuilder and set environment variables until your heart is content! Example \u00b6 As mentioned above, lets walk through a simple example of build customization with Edk2-Pytools. In this scenario, we want a simple way to build our platform in three distinct ways. To keep it simple, all we want to customize is the target type (DEBUG/RELEASE) and the inclusion of the EdkShell. These builds will be DEV, SELFHOST, and RELEASE. From the command line, we we would call stuart_build -c Platform.py PROFILE=DEV . All that needs to be done is to check the value of profile during SetPlatformEnv() and make our build customizations from there. def __init__ ( self ): self . profiles = { \"DEV\" : { \"TARGET\" : \"DEBUG\" , \"EDK_SHELL\" : \"TRUE\" }, \"SELFHOST\" : { \"TARGET\" : \"RELEASE\" , \"EDK_SHELL\" : \"TRUE\" }, \"RELEASE\" : { \"TARGET\" : \"RELEASE\" , \"EDK_SHELL\" : \"FALSE\" } } ... def SetPlatformEnv ( self ): profile = self . env . GetValue ( \"PROFILE\" , \"DEV\" ) # Default DEV if profile in self . profiles : for key , value in profile . items (): self . env . SetValue ( key , value , \"PROFILE VALUE\" ) ... The environment variables are set, whats next? The target is automatically picked up by the build system, so all that needs to be done is to add the logic of including the Edk shell or not. This can be done in the platform fdf as seen below: !if $( EDK_SHELL = TRUE ) FILE APPLICATION = PCD ( gPcBdsPkgTokenSpaceGuid.PcdShellFile ) { SECTION PE32 = <SomePath>/Shell.efi SECTION UI = \"EdkShell\" } !endif Pre / Post Build Customization \u00b6 Edk2 Pytools offer developers multiple ways to customize the build experience, both Pre and Post Build. The first way is through UefiBuildPlugins (executed automatically for all platforms) which is discussed in Create a Plugin section, and through three methods to override in the UefiBuilder (specific to the platform) which will be the focus here. PlatformPreBuild PlatformPostBuild PlatformFlashImage All three of the callbacks that you can override have access to the same environment, but each happens at a different time in the build process as outlined below. You can choose to perform specific tasks both prebuild and postbuild such as moving files around pre build or patching in binary data post build. We also offer a callback for flashing your image to the device, if you have the infrastructure to do so via command line. You'll have to fully implement it yourself, but it can greatly speed up the time it takes to get your firmware on your platform. PlatformPreBuild() UefiBuildPlugins that implement do_pre_build() Build() PlatformPostBuild() UefiBuildPlugins that implement do_post_build() PlatformFlashImage() Lets end this section by mentioning some of the important things (but not everything) you have access to during the callbacks mentioned above: Helper Plugins \u00b6 This is another type of plugin that is talked about in the Create a Plugin that allows the developers to add in extensions or helper methods to the build environment that are easy to access. You can easily access them through self.Helper.<FunctionName>() . As an example, if we made that helper called YamlToBin(yaml_obj) , then we could call it via self.Helper.JsonToBin(yaml) . The Environment \u00b6 As we alluded to in one of the previous sections, you'll have access to all of the environment variables set throughout the DSC, FDF, CLI, and anywhere else in the build. you'll be able to access the environment via self.env . To see the available methods to use, please review the VarDict . Edk2 Pytool Library \u00b6 The second half of Edk2 Pytools is Edk2 Pytool Library , which provides the building blocks of tools that are relevant to UEFI firmware developers. Some of these tools include file parsers for edk2 specific file types and UEFI defined values and interfaces for usage in python. You can think of Edk2 Pytool Extensions (This) as the simple framework to get your platform building and Edk2 Pytool Library as the building blocks to do more advanced customization of the build.","title":"Build with Stuart"},{"location":"integrate/build/#building-a-platform","text":"You have an EDK2 implementation, a platform DSC, and a platform FDF? Great! You are one settings file away from a great platform building experience. The build process has three stuart commands to take your firmware code tree from freshly cloned to fully built: stuart_setup , stuart_update , stuart_build (hereby known has the \"command(s)\"). Behind the scenes, each command is an Invocable that has a corresponding Settings Manager that the platform subclasses to provide platform specific information. In hopes of keeping this section as light as possible, the information provided will be broad and more conversational then tutorial. If you want a step by step example of porting a platform, we have one! Please see Porting the Raspberry Pi 3 .","title":"Building A Platform"},{"location":"integrate/build/#getting-started","text":"Stuart needs a settings file to configure itself. This settings file must provide a settings manager subclasses for each command you plan on using. This settings manager is the interface that provides platform specific information to the platform agnostic invocable. This is done via subclassing the corresponding settings file and overriding the necessary methods described in the Settings Manager . In terms of building a platform, there are five classes that you need to be aware of. The first two are interfaces that provide functions used across all three commands and can be shared among the SettingsManagers by using Multiple Inheritance . Edk2InvocableSettingsInterface MultiPkgAwareSettingsInterface SetupSettingsManager UpdateSettingsManager BuildSettingsManager The final class we inherit from in the settings file the UefiBuilder and is what provides the bulk of customization EDK2 Pytools affords you. This is also where you can utilize many of the features and functionality spread across Edk2-Pytools (Extensions and Library). Lets take a look at each command!","title":"Getting Started"},{"location":"integrate/build/#stuart-setup","text":"stuart_setup is the first command and is responsible for setting up the code tree. Currently, this only involves preparing the git submodules necessary for build. If you've created an Omnicache , here is where you would use it to save on network bandwidth, disk space, and time when cloning repos. As you might expect, stuart_setup does not automatically know what submodules are necessary for each platform; we must use the SetupSettingsManager to provide that information. Note The command specific Settings Manager may not provide ALL platform data required by the command; it only provides the platform data specific to that command. You still need to override some methods from Edk2InvocableSettingsInterface and MultiPkgAwareSettingsInterface that multiple (or all) commands use, which is why they are in the parent class. Don't worry though! If you miss overriding a required method, you'll raise a NotImplementedError ! Review the stuart_setup specific settings manager here .","title":"Stuart Setup"},{"location":"integrate/build/#stuart-update","text":"Next up is stuart_update , which is responsible for updating any external dependencies in the workspace. This includes downloading and performing miscellaneous tasks for external dependencies. You can find details on how external dependencies work and how to utilize them in the ext_dep section. As you'll see in the API reference for UpdateSettingsManager , no additional methods need to be overwritten. At first glance, it may seem like stuart_update does not need any platform specific information, but it actually does. The key takeaway is that you'll still need to inherit from UpdateSettingsManager ; it's just that the necessary platform data for this command comes from overriding methods in the parent class Edk2InvocableSettingsInterface and/or MultiPkgAwareSettingsInterface . Review the stuart_update specific settings manager here .","title":"Stuart Update"},{"location":"integrate/build/#stuart-build","text":"Lastly is the stuart_build command, which actually has two phases to it. The first phase is executed via the stuart_build command and uses the BuildSettingsManager to setup the environment in preparation for the build. It will then invoke the UefiBuilder , signaling the start of the second phase which consists of most of the customization afforded to you by EDK2 Pytools. Review the stuart_build specific settings manager here .","title":"Stuart Build"},{"location":"integrate/build/#uefibuilder","text":"So what has all of these commands been culminating to? They've all been working to prepare a Self Describing Environment for the UefiBuilder to operate in. The purpose of the UefiBuilder is to allow the platform to perform various tasks using this environment. Custom made UefiBuildPlugins will automatically be run Pre and Post build for all platforms while UefiHelperPlugins will be available to the developer to help create Platform specific Pre and Post build functionality. The UefiBuilder class has a lot to it, so let's take a look at each part.","title":"UefiBuilder"},{"location":"integrate/build/#command-line-options","text":"UefiBuilder has multiple built in command line options that control the flow of the build. The below code snippet shows these command line variables and are accessible via self.<dest> . Developers can use this to help control flow in any of the overrideable methods described in the following sections, however they are also used to control build flow outside the control of the developer. Adds command line options to the argparser. Parameters: Name Type Description Default parserObj argparser argparser object required Source code in edk2toolext\\environment\\uefi_build.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def AddPlatformCommandLineOptions ( self , parserObj ): \"\"\"Adds command line options to the argparser. Args: parserObj (argparser): argparser object \"\"\" parserObj . add_argument ( \"--SKIPBUILD\" , \"--skipbuild\" , \"--SkipBuild\" , dest = \"SKIPBUILD\" , action = 'store_true' , default = False , help = \"Skip the build process\" ) parserObj . add_argument ( \"--SKIPPREBUILD\" , \"--skipprebuild\" , \"--SkipPrebuild\" , dest = \"SKIPPREBUILD\" , action = 'store_true' , default = False , help = \"Skip prebuild process\" ) parserObj . add_argument ( \"--SKIPPOSTBUILD\" , \"--skippostbuild\" , \"--SkipPostBuild\" , dest = \"SKIPPOSTBUILD\" , action = 'store_true' , default = False , help = \"Skip postbuild process\" ) parserObj . add_argument ( \"--FLASHONLY\" , \"--flashonly\" , \"--FlashOnly\" , dest = \"FLASHONLY\" , action = 'store_true' , default = False , help = \"Flash rom after build.\" ) parserObj . add_argument ( \"--FLASHROM\" , \"--flashrom\" , \"--FlashRom\" , dest = \"FLASHROM\" , action = 'store_true' , default = False , help = \"Flash rom. Rom must be built previously.\" ) parserObj . add_argument ( \"--UPDATECONF\" , \"--updateconf\" , \"--UpdateConf\" , dest = \"UPDATECONF\" , action = 'store_true' , default = False , help = \"Update Conf. Builders Conf files will be replaced with latest template files\" ) parserObj . add_argument ( \"--CLEAN\" , \"--clean\" , \"--CLEAN\" , dest = \"CLEAN\" , action = 'store_true' , default = False , help = \"Clean. Remove all old build artifacts and intermediate files\" ) parserObj . add_argument ( \"--CLEANONLY\" , \"--cleanonly\" , \"--CleanOnly\" , dest = \"CLEANONLY\" , action = 'store_true' , default = False , help = \"Clean Only. Do clean operation and don't build just exit.\" ) parserObj . add_argument ( \"--OUTPUTCONFIG\" , \"--outputconfig\" , \"--OutputConfig\" , dest = 'OutputConfig' , required = False , type = str , help = 'Provide shell variables in a file' ) While we don't provide you the ability to override this function (without being hacky like overriding it anyway and calling the superclass in your override), there is an easy way to add CLI options to your build, which is through Platform Environment Variables","title":"Command Line options"},{"location":"integrate/build/#platform-environment-variables","text":"Platform environment variables are a powerful tool used throughout the build process. Not only do environment variables allow you to control build flow within the UefiBuilder , but they also are used by the platform fdf and dsc. You can set platform environment variables in the platform DSC, FDF, Settings File, and Command Line; any variable set in one is available in the others! A simple example of this would be to add or remove features based off some criteria. With Edk2-Pytools this is as simple as setting a single env variable during build. We will walk through this example soon.","title":"Platform Environment Variables"},{"location":"integrate/build/#setting-getting-environment-variables","text":"It's easy set and get environment variables in the FDF, DSC, Settings file, and Command line as seen in the table below: Type Set Get Command Line VAR=Value N/A FDF/DSC DEFINE VAR = Value $(VAR) Settings File env.SetValue(Var, Value) env.GetValue(Var, DefaultValue) While you can set and get variables anywhere in the UefiBuilder portion of the settings file, we provide the following two methods to set environment variables, ensuring they are available everywhere that you are allowed to customize: SetPlatformEnv SetPlatfromEnvAfterTarget Simply override these two functions in your subclass of the UefiBuilder and set environment variables until your heart is content!","title":"Setting / Getting Environment Variables"},{"location":"integrate/build/#example","text":"As mentioned above, lets walk through a simple example of build customization with Edk2-Pytools. In this scenario, we want a simple way to build our platform in three distinct ways. To keep it simple, all we want to customize is the target type (DEBUG/RELEASE) and the inclusion of the EdkShell. These builds will be DEV, SELFHOST, and RELEASE. From the command line, we we would call stuart_build -c Platform.py PROFILE=DEV . All that needs to be done is to check the value of profile during SetPlatformEnv() and make our build customizations from there. def __init__ ( self ): self . profiles = { \"DEV\" : { \"TARGET\" : \"DEBUG\" , \"EDK_SHELL\" : \"TRUE\" }, \"SELFHOST\" : { \"TARGET\" : \"RELEASE\" , \"EDK_SHELL\" : \"TRUE\" }, \"RELEASE\" : { \"TARGET\" : \"RELEASE\" , \"EDK_SHELL\" : \"FALSE\" } } ... def SetPlatformEnv ( self ): profile = self . env . GetValue ( \"PROFILE\" , \"DEV\" ) # Default DEV if profile in self . profiles : for key , value in profile . items (): self . env . SetValue ( key , value , \"PROFILE VALUE\" ) ... The environment variables are set, whats next? The target is automatically picked up by the build system, so all that needs to be done is to add the logic of including the Edk shell or not. This can be done in the platform fdf as seen below: !if $( EDK_SHELL = TRUE ) FILE APPLICATION = PCD ( gPcBdsPkgTokenSpaceGuid.PcdShellFile ) { SECTION PE32 = <SomePath>/Shell.efi SECTION UI = \"EdkShell\" } !endif","title":"Example"},{"location":"integrate/build/#pre-post-build-customization","text":"Edk2 Pytools offer developers multiple ways to customize the build experience, both Pre and Post Build. The first way is through UefiBuildPlugins (executed automatically for all platforms) which is discussed in Create a Plugin section, and through three methods to override in the UefiBuilder (specific to the platform) which will be the focus here. PlatformPreBuild PlatformPostBuild PlatformFlashImage All three of the callbacks that you can override have access to the same environment, but each happens at a different time in the build process as outlined below. You can choose to perform specific tasks both prebuild and postbuild such as moving files around pre build or patching in binary data post build. We also offer a callback for flashing your image to the device, if you have the infrastructure to do so via command line. You'll have to fully implement it yourself, but it can greatly speed up the time it takes to get your firmware on your platform. PlatformPreBuild() UefiBuildPlugins that implement do_pre_build() Build() PlatformPostBuild() UefiBuildPlugins that implement do_post_build() PlatformFlashImage() Lets end this section by mentioning some of the important things (but not everything) you have access to during the callbacks mentioned above:","title":"Pre / Post Build Customization"},{"location":"integrate/build/#helper-plugins","text":"This is another type of plugin that is talked about in the Create a Plugin that allows the developers to add in extensions or helper methods to the build environment that are easy to access. You can easily access them through self.Helper.<FunctionName>() . As an example, if we made that helper called YamlToBin(yaml_obj) , then we could call it via self.Helper.JsonToBin(yaml) .","title":"Helper Plugins"},{"location":"integrate/build/#the-environment","text":"As we alluded to in one of the previous sections, you'll have access to all of the environment variables set throughout the DSC, FDF, CLI, and anywhere else in the build. you'll be able to access the environment via self.env . To see the available methods to use, please review the VarDict .","title":"The Environment"},{"location":"integrate/build/#edk2-pytool-library","text":"The second half of Edk2 Pytools is Edk2 Pytool Library , which provides the building blocks of tools that are relevant to UEFI firmware developers. Some of these tools include file parsers for edk2 specific file types and UEFI defined values and interfaces for usage in python. You can think of Edk2 Pytool Extensions (This) as the simple framework to get your platform building and Edk2 Pytool Library as the building blocks to do more advanced customization of the build.","title":"Edk2 Pytool Library"},{"location":"integrate/manage/","text":"Managing a Codebase \u00b6 The idea here is that you have code and you have a to-do list of tasks to do. Maybe you want to make sure all the drivers compile, maybe you want to check all the images in your file tree and make sure they are encoded correctly. These use cases will fit into our 'CI' tools category. Getting Started \u00b6 Our CI tools simplify the process of creating and running CiBuildPlugins on packages within any repository, not just a platform repository. We even provide a simple means to filter which packages are tested based off which files have been changed through edk2_pr_eval.py / stuart_pr_eval.exe . These packages do not need to be tied to a platform either; they can be in the platform repository or in a separate repository. Some examples of CiBuildPlugins are uncrustify audits, guid audits, package builds, etc. stuart_ci_setup can be called to clone whatever code repositories would be required for this operation. stuart_update can be called to download all the tools the environment says it needs. From there, stuart_ci_build takes a list of packages to look at and runs all plugins on each package. Similar to Build a Platform , this process involves invocables. Since we already explained the process of creating a settings file to provide platform information to the build invocables, we wont go into to much detail here. Just know that you have additional invocables that you will need override to make the CI invocables work! Tip Create a separate CI Settings file for codebase management not directly related to the platform! Take a look all all the relevant invocables below: Edk2InvocableSettingsInterface MultiPkgAwareSettingsInterface CiSetupSettingsManager UpdateSettingsManager CiBuildSettingsManager PrEvalSettingsManager","title":"Core CI with Stuart"},{"location":"integrate/manage/#managing-a-codebase","text":"The idea here is that you have code and you have a to-do list of tasks to do. Maybe you want to make sure all the drivers compile, maybe you want to check all the images in your file tree and make sure they are encoded correctly. These use cases will fit into our 'CI' tools category.","title":"Managing a Codebase"},{"location":"integrate/manage/#getting-started","text":"Our CI tools simplify the process of creating and running CiBuildPlugins on packages within any repository, not just a platform repository. We even provide a simple means to filter which packages are tested based off which files have been changed through edk2_pr_eval.py / stuart_pr_eval.exe . These packages do not need to be tied to a platform either; they can be in the platform repository or in a separate repository. Some examples of CiBuildPlugins are uncrustify audits, guid audits, package builds, etc. stuart_ci_setup can be called to clone whatever code repositories would be required for this operation. stuart_update can be called to download all the tools the environment says it needs. From there, stuart_ci_build takes a list of packages to look at and runs all plugins on each package. Similar to Build a Platform , this process involves invocables. Since we already explained the process of creating a settings file to provide platform information to the build invocables, we wont go into to much detail here. Just know that you have additional invocables that you will need override to make the CI invocables work! Tip Create a separate CI Settings file for codebase management not directly related to the platform! Take a look all all the relevant invocables below: Edk2InvocableSettingsInterface MultiPkgAwareSettingsInterface CiSetupSettingsManager UpdateSettingsManager CiBuildSettingsManager PrEvalSettingsManager","title":"Getting Started"},{"location":"integrate/porting/","text":"Porting a platform to EDK2 PyTools \u00b6 You've probably seen the great promises that EDK2 Pytools gives and wondered how to get started on a platform you already have. There are many places you could be coming from but you likely have some sort of automated work flow that calls edk2's build at some point. In this guide, two paths will be discussed and one will be shown. In this guide, we will building a platform from EDK2-Platforms, the humble Raspberry Pi 3. This is because you likely have one lying around somewhere or can buy it online for fairly cheap. It is also a simpler platform compared to many intel based ones while still being large enough to show the benefits of Stuart. This process is documented in the repo (TODO). This guide shows one way to structure your platform code but there are many different approaches out there. Stuart is flexible and versatile enough to be able to be adapted to many workflows. You are encouraged to experiment and see what works best for you and your team. Since the Raspberry Pi project in EDK2-Platforms uses GCC, we will also be using WSLv2 (Windows Subsystem for Linux). If you're on a linux machine, you should be able to follow this tutorial. For information on how to use WSL, refer to the guide using_wsl.md Getting Started \u00b6 First we will start by creating our workspace. mkdir rpi cd rpi git init We'll add a .gitignore to keep things sensible. *.pyc *.bak /Build /Conf /.vs /.vscode *_extdep/ Next we'll add our pip_requirements.txt file to keep our pip modules in sync with our project. You can optionally setup a virtual environment to keep different versions of pip modules, but that is left up to the reader. edk2-pytool-library edk2-pytool-extensions You're welcome to snap to a particular version by adding ==0.12.2 or whatever version you want to keep after the pip name. Next you'll need to install the pip modules. If you see that the pip isn't installed, check out our guide to setting up WSL (or any linux distribution). Once your pip is setup, install the requirements by executing this: pip3 install -r pip_requirements.txt Make sure you're using python 3 as opposed to python 2. Submodules \u00b6 One of the best ways to keep track of other git projects is through submodules. We'll add submodules for the edk2 projects we want to use. Another option would be use the Microsoft Project Mu fork of EDK2. The parts that it contains are: BASECORE: this contains the base packages like MdeModulePkg and MdePkg MU_PLUS: this has the extra stuff that Mu provides like DFCI, GraphicsPkg, and SharedCrypto. TIANO_PLUS: this has things like ShellPkg and FmpDevicePkg. OEM_SAMPLE: this contains things that an OEM might find useful like a FrontPage application and a Boot menu. At the end of this document, we will detail what all is required to move over to Project Mu. It brings some powerful things but also requires us to add some pieces to support the new functionality. In the meantime we'll use EDK2 as it is likely what people are familiar with. git submodule add https://github.com/tianocore/edk2.git edk2 git submodule add https://github.com/tianocore/edk2-platforms.git platforms git submodule add https://github.com/tianocore/edk2-non-osi.git non-osi To be clear, don't use EDK2 and MU_BASECORE in the same tree . They overlap since MU_BASECORE has EDK2 as an upstream. We'll want to make sure we have the same commit so for each of the submodules, we'll checkout a specific commit hash. cd ~/rpi cd edk2 git checkout edk2-stable201911 cd .. cd platforms git checkout 0e6e3fc4af678d5241b4e8f8c14c126212ff2522 cd .. cd non-osi git checkout d580026dbbe87c081dce26b1872df83fa79cd740 At this point, we're almost ready. Our tree should look like this: rpi | .gitignore | .gitmodules | pip_requirements.txt | |---edk2 | |... | |---platform | | | |---Drivers | |---Platform | |---Silicon | |---non-osi | |---Emulator | |---Platform | |---Silicon | You can see the files at the commit here (TODO) The settings file \u00b6 The guide is written for pytool-extensions v0.12 and some things may have changed since this was written. Please refer to the release notes to see what has changed. Stuart needs a settings file to configure itself. It helps define where the workspace root is and what sort of things we need to initialize. Since we are using the build in invocables, we'll need to implement three settings managers: UpdateSettingsManager, SetupSettingsManager, BuildSettingsManager. If you're unfamiliar with what an invocable or a settings file is, please refer to our documentation. Let's add a file: RpiPlatformBuild.py . This will be a settings manager for stuart ## ## Script to Build Raspberry Pi 3/4 firmware ## import os import logging from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext.invocables.edk2_platform_build import BuildSettingsManager from edk2toolext.invocables.edk2_setup import SetupSettingsManager from edk2toolext.invocables.edk2_update import UpdateSettingsManager from edk2toollib.utility_functions import GetHostInfo from edk2toolext.invocables.edk2_setup import RequiredSubmodule # #========================================================================== # PLATFORM BUILD ENVIRONMENT CONFIGURATION # class RpiSettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . ws = SCRIPT_PATH def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws For more information on settings managers, please refer to the documentation. Right now we are importing the needed classes from the pytools as well as defining a class which will provide the settings to stuart. The three invocables that we have implemented settings for are stuart_build , stuart_update , and stuart_setup . If you were to call one of these, you'd get an error on a non-implemented method. Since our settings provider it is still missing a lot of functionality. While it can now set up our workspace path, which should resolve to your root rpi folder, there's still different methods of each settings manager that we haven't implemented yet. GetWorkspaceRoot returns a path to the root of your workspace. In this case, rpi is the folder in question, which where our PlatformBuild.py is. Setup \u00b6 Let's focus on getting setup working. Let's add Scopes and RequiredSubmodules. ... class RpiSettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . ws = SCRIPT_PATH def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws def GetActiveScopes ( self ): ''' get scope ''' return [ 'raspberrypi' , 'gcc_aarch64_linux' ] def GetPackagesSupported ( self ): ''' return iterable of edk2 packages supported by this build. These should be edk2 workspace relative paths ''' return ( \"RaspberryPi/RPi3\" , ) def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return [ RequiredSubmodule ( \"MU_BASECORE\" ), RequiredSubmodule ( \"Common/MU_OEM\" ), RequiredSubmodule ( \"Common/MU\" ), RequiredSubmodule ( \"Common/TIANO\" ), RequiredSubmodule ( \"Silicon/ARM/MU_TIANO\" ), ] def GetArchitecturesSupported ( self ): ''' return iterable of edk2 architectures supported by this build ''' return ( \"AARCH64\" ) def GetTargetsSupported ( self ): ''' return iterable of edk2 target tags supported by this build ''' return ( \"DEBUG\" , \"RELEASE\" ) GetScopes allows us to get the \"scopes\" for this platform. For more information, refer to the feature_sde document. But in short, it allows us to pick which external dependencies and environmental descriptors apply to this project. We picked raspberrypi for this project somewhat arbitrarily. But in the future perhaps we would have a nuget feed with a driver efi inside, that has the scope raspberrypi. GetRequiredSubmodules allows us to specific which submodules we care about. If we were building certain platforms, we might not care about certain submodules and wouldn't need to bother cloning them. In this case, we want them all so we return an iterable with all of them. GetPackagesSupported allows us to specify which packages this settings file supports building. You could use the same settings file to build multiple platforms or select between different platforms. Now if we call setup, we should see something like this: ~/rpi$ stuart_setup -c RpiPlatformBuild.py SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool PROGRESS - ## Syncing Git repositories: edk2 non-osi platforms... PROGRESS - Done. PROGRESS - ## Checking Git repository: edk2... PROGRESS - ## Checking Git repository: non-osi... PROGRESS - ## Checking Git repository: platforms... PROGRESS - Done. SECTION - Summary PROGRESS - Success You'll also notice that there's a new folder in your tree: Build . In the setup phase, we don't have an output folder from the DSC yet, so we put logs into that folder. Inside you'll notice is a SETUPLOG. It just contains verbose information about this process. For example, you'll see that it cloned the submodules in EDK2 CryptoPkg. Since we've already setup our submodules, there isn't much to do other than verify the system is in good shape. Now let's move onto Update. Update \u00b6 Since we defined the scopes, our settings file is already configured. We can run the update and it will work just fine. ~/rpi$ stuart_update -c RpiPlatformBuild.py SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Initial update of environment SECTION - Updated/Verified 1 dependencies SECTION - Second pass update of environment SECTION - Updated/Verified 1 dependencies SECTION - Summary PROGRESS - Success Stuart has something called the Self-Describing Environment or SDE. This allows Stuart to infer the external dependencies, path configurations, and environmental variables from the code tree itself. This ends up being an incredibly powerful tool. For more information, please refer to our guide on using the SDE. Update verifies and updates what is in the SDE. This grabs nuget packages and any other dependencies. EDK2 has a few external dependencies, such as GCC for ARM/AARCH64, IASL, and NASM. If you were to build without doing an update, the SDE would stop you and report that some external dependencies weren't satisfied. It would prompt you to do an update. Optionally, we'll be adding the Basetools that are precompiled through a release pipeline. However, this is an optional step and if you wish, you can use basetools that you've already compiled yourself. Normally, this would go inside the submodules or in the basetools folder itself. However in this case, we'll create a new folder called dependencies . cd ~/rpi mkdir dependencies cd dependencies touch basetoolsbin_ext_dep.yaml Inside the file goes: ## # Download the compiled basetools from nuget.org # - Nuget package contains different binaries based on the host os # Set this downloaded folder on path # Set a Shell variable to this path # # Copyright (c) 2019, Microsoft Corporation # SPDX-License-Identifier: BSD-2-Clause-Patent ## { \"scope\" : \"global\" , \"type\" : \"nuget\" , \"name\" : \"Mu-Basetools\" , \"source\" : \"https://api.nuget.org/v3/index.json\" , \"version\" : \"2019.11.0\" , \"flags\" : [ \"set_shell_var\" , \"set_path\" , \"host_specific\" ], \"var_name\" : \"EDK_TOOLS_BIN\" , } Now we can re-run update and see the new external dependency get pulled down. ~/rpi$ stuart_update -c RpiPlatformBuild.py SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Initial update of environment SECTION - Updated/Verified 2 dependencies SECTION - Second pass update of environment SECTION - Updated/Verified 2 dependencies SECTION - Summary PROGRESS - Success Build \u00b6 If you were to try a platform build, it would fail saying RuntimeError: UefiBuild Not Found . Stuart provides a helper class that scaffolds out the build step. There's a few ways to implement the UefiBuilder. It can be a separate class in your PlatformBuild.py , it can be the same class as your SettingsManager, or it can be a separate file all together. For the sake of simplicity, we're going to have it as a separate class in the same file. ... class SettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): .... #-------------------------------------------------------------------------------------------------------- # Subclass the UEFI builder and add platform specific functionality. # class PlatformBuilder ( UefiBuilder ): def SetPlatformEnv ( self ): self . env . SetValue ( \"ACTIVE_PLATFORM\" , \"Platform/RaspberryPi/RPi3/RPi3.dsc\" , \"Platform Hardcoded\" ) return 0 If we were to run it right now, we would fail because we need to implement one more function in our settings provider: GetPackagesPath. This is needed to provide the paths to the EDK2 system. We need to provide absolute paths, so we join each path to our workspace root. class SettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): .... def GetTargetsSupported ( self ): .... def GetPackagesPath ( self ): ''' get module packages path ''' pp = [ 'edk2' , \"non-osi\" , 'platforms' ] ws = self . GetWorkspaceRoot () return [ os . path . join ( ws , x ) for x in pp ] Now when we run it, we'll see that we get an error from our UefiBuild itself. (Replace your toolchain tag with whatever toolchain you are using.) ~/rpi$ stuart_build -c Platform/RaspberryPi/RPi3/PlatformBuild.py TOOL_CHAIN_TAG=****** SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Loading Plugins SECTION - Kicking off build PROGRESS - Start time: 2019-12-02 14:37:17.515761 PROGRESS - Setting up the Environment PROGRESS - Running Pre Build PROGRESS - Running Build DEBUG ERROR - Compiler #2000 from : Invalid parameter CRITICAL - Build failed PROGRESS - End time: 2019-12-02 14:37:18.313707 Total time Elapsed: 0:00:00 SECTION - Summary PROGRESS - Error It is failing because we haven't defined the architecture we are building and many other things. Now you might be asking yourself, wait, how are we already compiling? What about the basetools, the CONF folder, the build tools and environmental variables? Don't I need to set these up? Nope. Stuart does it for you. You can see in your Build folder there should be a BUILDLOG.txt , SETUPLOG.txt , and UPDATELOG.txt . The goal there is to make sure you can reliably figure out what is going on when things do go wrong. For more information on them, go read about them here: (TODO) The goal of Stuart is to be as magical as possible while still being transparent and understandable as possible. INFO - Log Started: Saturday, November 02, 2019 09:22PM SECTION - Init SDE DEBUG - Loading workspace: C:/git/rpi DEBUG - Including scopes: raspberrypi, global-win, global DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/BinWrappers/WindowsLike/win_build_tools_path_env.json' to the environment with scope 'global-win'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/edk2_core_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/basetools_calling_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/basetools_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Scripts/basetools_scripts_bin_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Source/Python/basetool_tiano_python_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/Common/MU/SharedCryptoPkg/Package/SharedCrypto_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Bin/basetools_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Bin/nasm_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/NetworkPkg/SharedNetworking/SharedNetworking_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsResourceCompiler/WinRcPath_plug_in.json' to the environment with scope 'global-win'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsVsToolChain/WindowsVsToolChain_plug_in.yaml' to the environment with scope 'global-win'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/BuildToolsReport/BuildToolsReportGenerator_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/Edk2ToolHelper/Edk2ToolHelper_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FdSizeReport/FdSizeReportGenerator_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FlattenPdbs/FlattenPdbs_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/OverrideValidation/OverrideValidation_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsCapsuleSupportHelper/WindowsCapsuleSupportHelper_plug_in.json' to the environment with scope 'global'. DEBUG - Verify 'mu_nasm' returning 'True'. INFO - C:/git/rpi/MU_BASECORE/BaseTools/Bin/mu_nasm_extdep/Windows-x86-64 was found! DEBUG - Verify 'Mu-Basetools' returning 'True'. INFO - C:/git/rpi/MU_BASECORE/BaseTools/Bin/Mu-Basetools_extdep/Windows-x86 was found! DEBUG - Verify 'Mu-SharedNetworking' returning 'True'. DEBUG - Verify 'mu_nasm' returning 'True'. DEBUG - Verify 'Mu-SharedCrypto' returning 'True'. SECTION - Loading Plugins DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsResourceCompiler/WinRcPath.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsVsToolChain/WindowsVsToolChain.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/BuildToolsReport/BuildToolsReportGenerator.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/Edk2ToolHelper/Edk2ToolHelper.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FdSizeReport/FdSizeReportGenerator.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FlattenPdbs/FlattenPdbs.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/OverrideValidation/OverrideValidation.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsCapsuleSupportHelper/WindowsCapsuleSupportHelper.py DEBUG - Helper Plugin Register: Edk2Tool Helper Functions DEBUG - Helper Plugin Register: Windows Capsule Support Helper Functions You can see it is adding all the descriptors, which includes environment, external dependencies, and plugins. We load the basetools, the nasm tools, report generators, and other tools. We also check our external dependencies and verify they match the version we expect. The code is commited as commit at this point as (TODO). Setting up UefiBuild \u00b6 Let's start by setting our DSC and product name ... #-------------------------------------------------------------------------------------------------------- # Subclass the UEFI builder and add platform specific functionality. # class PlatformBuilder ( UefiBuilder ): def SetPlatformEnv ( self ): self . env . SetValue ( \"ACTIVE_PLATFORM\" , \"Platform/RaspberryPi/RPi3/RPi3.dsc\" , \"Platform Hardcoded\" ) self . env . SetValue ( \"PRODUCT_NAME\" , \"RaspberryPi\" , \"Platform Hardcoded\" ) self . env . SetValue ( \"TARGET_ARCH\" , \"AARCH64\" , \"Platform Hardcoded\" ) os = GetHostInfo () . os if os . lower () == \"windows\" : self . env . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"Platform Hardcoded\" , True ) else : self . env . SetValue ( \"TOOL_CHAIN_TAG\" , \"GCC5\" , \"Platform Hardcoded\" , True ) return 0 At this point, when we run a build, we get this: ~/rpi$ stuart_update -c RpiPlatformBuild.py TOOL_CHAIN_TAG=GCC5 SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Initial update of environment SECTION - Updated/Verified 2 dependencies SECTION - Second pass update of environment SECTION - Updated/Verified 2 dependencies SECTION - Summary PROGRESS - Success ~/rpi$ stuart_build -c RpiPlatformBuild.py TOOL_CHAIN_TAG=GCC5 SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Loading Plugins SECTION - Kicking off build PROGRESS - Start time: 2019-12-02 14:51:54.604488 PROGRESS - Setting up the Environment PROGRESS - Running Pre Build PROGRESS - Running Build DEBUG PROGRESS - Running Post Build PROGRESS - End time: 2019-12-02 14:52:51.642897 Total time Elapsed: 0:00:57 SECTION - Log file is located at: ~/rpi/Build/BUILDLOG.txt SECTION - Summary PROGRESS - Success Fantastic! If you want, you can call it a day and load your new ROM on an SD card and boot your UEFI powered Raspberry Pi. However, there are a few things we'd like to tweak. Right now, the DeviceTree image is a binary file checked into the non-osi git repo. A better approach might be using the image directly. Ideally, it would be from a Nuget feed or other auditable release pipeline. First we'll create a new file mkdir Platform/RaspberryPi/DeviceTree Then we'll create two files. The first is the dependencies/rpi-3-bp_ext_dep.yaml touch dependencies/rpi-3-bp_ext_dep.yaml Paste this in: ## # Download the Rpi 3b+ device tree from github # # Copyright (c) 2019, Microsoft Corporation # SPDX-License-Identifier: BSD-2-Clause-Patent ## { \"scope\" : \"raspberrypi\" , \"type\" : \"web\" , \"name\" : \"bcm2710_rpi_3b_plus_devicetree\" , \"source\" : \"https://github.com/raspberrypi/firmware/raw/a16470ad47c0ad66d5c98d98e08e49cd148c8fc0/boot/bcm2710-rpi-3-b-plus.dtb\" , \"version\" : \"a16470ad47c0ad66d5c98d98e08e49cd148c8fc0\" , \"internal_path\" : \"bcm2710-rpi-3-b-plus.dtb\" , \"sha256\" : \"253a2e8765aaec5bce6b2ab4e4dbd16107897cc24bb3e248ab5206c09a42cf04\" , \"flags\" : [ \"set_build_var\" ], \"var_name\" : \"BLD_*_BCM2710_3BP_DT\" , } The second is at dependencies/rpi-3-b_ext_dep.yaml touch dependencies/rpi-3-b_ext_dep.yaml Paste this in: ## # Download the Rpi 3b device tree from github # # Copyright (c) 2019, Microsoft Corporation # SPDX-License-Identifier: BSD-2-Clause-Patent ## { \"scope\" : \"raspberrypi\" , \"type\" : \"web\" , \"name\" : \"bcm2710_rpi_3b_devicetree\" , \"source\" : \"https://github.com/raspberrypi/firmware/raw/a16470ad47c0ad66d5c98d98e08e49cd148c8fc0/boot/bcm2710-rpi-3-b.dtb\" , \"version\" : \"a16470ad47c0ad66d5c98d98e08e49cd148c8fc0\" , \"internal_path\" : \"./bcm2710-rpi-3-b.dtb\" , \"sha256\" : \"18ce263a6e1ce4ba7aee759885cb665d61611d2f17cee5b7e91215f7b97d2952\" , \"flags\" : [ \"set_build_var\" ], \"var_name\" : \"BLD_*_BCM2710_3B_DT\" , } These are two external dependencies that will download the device trees from GitHub. It includes the SHA256 of the file so it can verify the file downloaded. Feel free to jump ahead to a newer commit hash, just be aware that you'll need to update the SHA256 (stuart will warn you and show you the new hash). Let's run an update to fetch our new dependencies. ~/rpi$ stuart_update -c RpiPlatformBuild.py You'll see some ouput and you'll notice two new folders in the tree. bcm2710_rpi_3b_devicetree_extdep and bcm2710_rpi_3b_plus_devicetree_extdep . Inside is the files that we want. Because the we told to SDE to save where the file was populated into an environmental variable, we'll use that in our FDF. This means that # Device Tree support (used by FdtDxe) # GUIDs should match gRaspberryPi#####FdtGuids from the .dec # FILE FREEFORM = DF5DA223-1D27-47C3-8D1B-9A41B55A18BC { SECTION RAW = Platform/RaspberryPi/$(PLATFORM_NAME)/DeviceTree/bcm2710-rpi-3-b.dtb } FILE FREEFORM = 3D523012-73FE-40E5-892E-1A4DF60F3C0C { SECTION RAW = Platform/RaspberryPi/$(PLATFORM_NAME)/DeviceTree/bcm2710-rpi-3-b-plus.dtb } becomes # MU_CHANGE START # Device Tree support (used by FdtDxe) # GUIDs should match gRaspberryPi#####FdtGuids from the .dec # FILE FREEFORM = DF5DA223-1D27-47C3-8D1B-9A41B55A18BC { SECTION RAW = $(BCM2710_3B_DT)/bcm2710-rpi-3-b.dtb } FILE FREEFORM = 3D523012-73FE-40E5-892E-1A4DF60F3C0C { SECTION RAW = $(BCM2710_3BP_DT)/bcm2710-rpi-3-b-plus.dtb } # MU_CHANGE END We can now build it and it will stay in sync with the upstream device tree. We could apply this technique to the ATF (Arm Trusted Firmware). Since it comes from the same place. Notes \u00b6 As of time of writing, VS2017 doesn't support the ASM files used in this project. So you'll need to use GCC. Using WSL is the recommended course for windows, but MacOS and Linux machines can follow the guide here. Project Mu \u00b6 Using Project Mu is fairly easy. Instead of adding edk2, you would add these repos instead. You can add these all by running this command: git submodule add https://github.com/Microsoft/mu_basecore.git MU_BASECORE git submodule add https://github.com/Microsoft/mu_plus.git Common/MU git submodule add https://github.com/Microsoft/mu_tiano_plus.git Common/TIANO git submodule add https://github.com/Microsoft/mu_oem_sample.git Common/MU_OEM git submodule add https://github.com/microsoft/mu_silicon_arm_tiano.git Silicon/ARM/MU_TIANO git submodule add https://github.com/tianocore/edk2-platforms.git platforms git submodule add https://github.com/tianocore/edk2-non-osi.git non-osi Refer to the documentation in the various repos for the informations on how to enable features such as DFCI, SharedCrypto, etc. Future Work \u00b6 Many of the capabilities and features of Stuart aren't detailed or explored here. One area not discussed in detail or shown is external dependencies. In the future, it would be beneficial to move the ARM Trusted Firmware (ATF) binary blob into an external dependency. This means you can have a separate build pipeline for that which packages it up into a nuget or github release, which your platform consumes. It addition to not having to carry a binary in your build tree, it makes the version of the binary trivial to track.","title":"Porting Example"},{"location":"integrate/porting/#porting-a-platform-to-edk2-pytools","text":"You've probably seen the great promises that EDK2 Pytools gives and wondered how to get started on a platform you already have. There are many places you could be coming from but you likely have some sort of automated work flow that calls edk2's build at some point. In this guide, two paths will be discussed and one will be shown. In this guide, we will building a platform from EDK2-Platforms, the humble Raspberry Pi 3. This is because you likely have one lying around somewhere or can buy it online for fairly cheap. It is also a simpler platform compared to many intel based ones while still being large enough to show the benefits of Stuart. This process is documented in the repo (TODO). This guide shows one way to structure your platform code but there are many different approaches out there. Stuart is flexible and versatile enough to be able to be adapted to many workflows. You are encouraged to experiment and see what works best for you and your team. Since the Raspberry Pi project in EDK2-Platforms uses GCC, we will also be using WSLv2 (Windows Subsystem for Linux). If you're on a linux machine, you should be able to follow this tutorial. For information on how to use WSL, refer to the guide using_wsl.md","title":"Porting a platform to EDK2 PyTools"},{"location":"integrate/porting/#getting-started","text":"First we will start by creating our workspace. mkdir rpi cd rpi git init We'll add a .gitignore to keep things sensible. *.pyc *.bak /Build /Conf /.vs /.vscode *_extdep/ Next we'll add our pip_requirements.txt file to keep our pip modules in sync with our project. You can optionally setup a virtual environment to keep different versions of pip modules, but that is left up to the reader. edk2-pytool-library edk2-pytool-extensions You're welcome to snap to a particular version by adding ==0.12.2 or whatever version you want to keep after the pip name. Next you'll need to install the pip modules. If you see that the pip isn't installed, check out our guide to setting up WSL (or any linux distribution). Once your pip is setup, install the requirements by executing this: pip3 install -r pip_requirements.txt Make sure you're using python 3 as opposed to python 2.","title":"Getting Started"},{"location":"integrate/porting/#submodules","text":"One of the best ways to keep track of other git projects is through submodules. We'll add submodules for the edk2 projects we want to use. Another option would be use the Microsoft Project Mu fork of EDK2. The parts that it contains are: BASECORE: this contains the base packages like MdeModulePkg and MdePkg MU_PLUS: this has the extra stuff that Mu provides like DFCI, GraphicsPkg, and SharedCrypto. TIANO_PLUS: this has things like ShellPkg and FmpDevicePkg. OEM_SAMPLE: this contains things that an OEM might find useful like a FrontPage application and a Boot menu. At the end of this document, we will detail what all is required to move over to Project Mu. It brings some powerful things but also requires us to add some pieces to support the new functionality. In the meantime we'll use EDK2 as it is likely what people are familiar with. git submodule add https://github.com/tianocore/edk2.git edk2 git submodule add https://github.com/tianocore/edk2-platforms.git platforms git submodule add https://github.com/tianocore/edk2-non-osi.git non-osi To be clear, don't use EDK2 and MU_BASECORE in the same tree . They overlap since MU_BASECORE has EDK2 as an upstream. We'll want to make sure we have the same commit so for each of the submodules, we'll checkout a specific commit hash. cd ~/rpi cd edk2 git checkout edk2-stable201911 cd .. cd platforms git checkout 0e6e3fc4af678d5241b4e8f8c14c126212ff2522 cd .. cd non-osi git checkout d580026dbbe87c081dce26b1872df83fa79cd740 At this point, we're almost ready. Our tree should look like this: rpi | .gitignore | .gitmodules | pip_requirements.txt | |---edk2 | |... | |---platform | | | |---Drivers | |---Platform | |---Silicon | |---non-osi | |---Emulator | |---Platform | |---Silicon | You can see the files at the commit here (TODO)","title":"Submodules"},{"location":"integrate/porting/#the-settings-file","text":"The guide is written for pytool-extensions v0.12 and some things may have changed since this was written. Please refer to the release notes to see what has changed. Stuart needs a settings file to configure itself. It helps define where the workspace root is and what sort of things we need to initialize. Since we are using the build in invocables, we'll need to implement three settings managers: UpdateSettingsManager, SetupSettingsManager, BuildSettingsManager. If you're unfamiliar with what an invocable or a settings file is, please refer to our documentation. Let's add a file: RpiPlatformBuild.py . This will be a settings manager for stuart ## ## Script to Build Raspberry Pi 3/4 firmware ## import os import logging from edk2toolext.environment.uefi_build import UefiBuilder from edk2toolext.invocables.edk2_platform_build import BuildSettingsManager from edk2toolext.invocables.edk2_setup import SetupSettingsManager from edk2toolext.invocables.edk2_update import UpdateSettingsManager from edk2toollib.utility_functions import GetHostInfo from edk2toolext.invocables.edk2_setup import RequiredSubmodule # #========================================================================== # PLATFORM BUILD ENVIRONMENT CONFIGURATION # class RpiSettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . ws = SCRIPT_PATH def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws For more information on settings managers, please refer to the documentation. Right now we are importing the needed classes from the pytools as well as defining a class which will provide the settings to stuart. The three invocables that we have implemented settings for are stuart_build , stuart_update , and stuart_setup . If you were to call one of these, you'd get an error on a non-implemented method. Since our settings provider it is still missing a lot of functionality. While it can now set up our workspace path, which should resolve to your root rpi folder, there's still different methods of each settings manager that we haven't implemented yet. GetWorkspaceRoot returns a path to the root of your workspace. In this case, rpi is the folder in question, which where our PlatformBuild.py is.","title":"The settings file"},{"location":"integrate/porting/#setup","text":"Let's focus on getting setup working. Let's add Scopes and RequiredSubmodules. ... class RpiSettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): SCRIPT_PATH = os . path . dirname ( os . path . abspath ( __file__ )) self . ws = SCRIPT_PATH def GetWorkspaceRoot ( self ): ''' get WorkspacePath ''' return self . ws def GetActiveScopes ( self ): ''' get scope ''' return [ 'raspberrypi' , 'gcc_aarch64_linux' ] def GetPackagesSupported ( self ): ''' return iterable of edk2 packages supported by this build. These should be edk2 workspace relative paths ''' return ( \"RaspberryPi/RPi3\" , ) def GetRequiredSubmodules ( self ): ''' return iterable containing RequiredSubmodule objects. If no RequiredSubmodules return an empty iterable ''' return [ RequiredSubmodule ( \"MU_BASECORE\" ), RequiredSubmodule ( \"Common/MU_OEM\" ), RequiredSubmodule ( \"Common/MU\" ), RequiredSubmodule ( \"Common/TIANO\" ), RequiredSubmodule ( \"Silicon/ARM/MU_TIANO\" ), ] def GetArchitecturesSupported ( self ): ''' return iterable of edk2 architectures supported by this build ''' return ( \"AARCH64\" ) def GetTargetsSupported ( self ): ''' return iterable of edk2 target tags supported by this build ''' return ( \"DEBUG\" , \"RELEASE\" ) GetScopes allows us to get the \"scopes\" for this platform. For more information, refer to the feature_sde document. But in short, it allows us to pick which external dependencies and environmental descriptors apply to this project. We picked raspberrypi for this project somewhat arbitrarily. But in the future perhaps we would have a nuget feed with a driver efi inside, that has the scope raspberrypi. GetRequiredSubmodules allows us to specific which submodules we care about. If we were building certain platforms, we might not care about certain submodules and wouldn't need to bother cloning them. In this case, we want them all so we return an iterable with all of them. GetPackagesSupported allows us to specify which packages this settings file supports building. You could use the same settings file to build multiple platforms or select between different platforms. Now if we call setup, we should see something like this: ~/rpi$ stuart_setup -c RpiPlatformBuild.py SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool PROGRESS - ## Syncing Git repositories: edk2 non-osi platforms... PROGRESS - Done. PROGRESS - ## Checking Git repository: edk2... PROGRESS - ## Checking Git repository: non-osi... PROGRESS - ## Checking Git repository: platforms... PROGRESS - Done. SECTION - Summary PROGRESS - Success You'll also notice that there's a new folder in your tree: Build . In the setup phase, we don't have an output folder from the DSC yet, so we put logs into that folder. Inside you'll notice is a SETUPLOG. It just contains verbose information about this process. For example, you'll see that it cloned the submodules in EDK2 CryptoPkg. Since we've already setup our submodules, there isn't much to do other than verify the system is in good shape. Now let's move onto Update.","title":"Setup"},{"location":"integrate/porting/#update","text":"Since we defined the scopes, our settings file is already configured. We can run the update and it will work just fine. ~/rpi$ stuart_update -c RpiPlatformBuild.py SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Initial update of environment SECTION - Updated/Verified 1 dependencies SECTION - Second pass update of environment SECTION - Updated/Verified 1 dependencies SECTION - Summary PROGRESS - Success Stuart has something called the Self-Describing Environment or SDE. This allows Stuart to infer the external dependencies, path configurations, and environmental variables from the code tree itself. This ends up being an incredibly powerful tool. For more information, please refer to our guide on using the SDE. Update verifies and updates what is in the SDE. This grabs nuget packages and any other dependencies. EDK2 has a few external dependencies, such as GCC for ARM/AARCH64, IASL, and NASM. If you were to build without doing an update, the SDE would stop you and report that some external dependencies weren't satisfied. It would prompt you to do an update. Optionally, we'll be adding the Basetools that are precompiled through a release pipeline. However, this is an optional step and if you wish, you can use basetools that you've already compiled yourself. Normally, this would go inside the submodules or in the basetools folder itself. However in this case, we'll create a new folder called dependencies . cd ~/rpi mkdir dependencies cd dependencies touch basetoolsbin_ext_dep.yaml Inside the file goes: ## # Download the compiled basetools from nuget.org # - Nuget package contains different binaries based on the host os # Set this downloaded folder on path # Set a Shell variable to this path # # Copyright (c) 2019, Microsoft Corporation # SPDX-License-Identifier: BSD-2-Clause-Patent ## { \"scope\" : \"global\" , \"type\" : \"nuget\" , \"name\" : \"Mu-Basetools\" , \"source\" : \"https://api.nuget.org/v3/index.json\" , \"version\" : \"2019.11.0\" , \"flags\" : [ \"set_shell_var\" , \"set_path\" , \"host_specific\" ], \"var_name\" : \"EDK_TOOLS_BIN\" , } Now we can re-run update and see the new external dependency get pulled down. ~/rpi$ stuart_update -c RpiPlatformBuild.py SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Initial update of environment SECTION - Updated/Verified 2 dependencies SECTION - Second pass update of environment SECTION - Updated/Verified 2 dependencies SECTION - Summary PROGRESS - Success","title":"Update"},{"location":"integrate/porting/#build","text":"If you were to try a platform build, it would fail saying RuntimeError: UefiBuild Not Found . Stuart provides a helper class that scaffolds out the build step. There's a few ways to implement the UefiBuilder. It can be a separate class in your PlatformBuild.py , it can be the same class as your SettingsManager, or it can be a separate file all together. For the sake of simplicity, we're going to have it as a separate class in the same file. ... class SettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): .... #-------------------------------------------------------------------------------------------------------- # Subclass the UEFI builder and add platform specific functionality. # class PlatformBuilder ( UefiBuilder ): def SetPlatformEnv ( self ): self . env . SetValue ( \"ACTIVE_PLATFORM\" , \"Platform/RaspberryPi/RPi3/RPi3.dsc\" , \"Platform Hardcoded\" ) return 0 If we were to run it right now, we would fail because we need to implement one more function in our settings provider: GetPackagesPath. This is needed to provide the paths to the EDK2 system. We need to provide absolute paths, so we join each path to our workspace root. class SettingsManager ( UpdateSettingsManager , SetupSettingsManager , BuildSettingsManager ): def __init__ ( self ): .... def GetTargetsSupported ( self ): .... def GetPackagesPath ( self ): ''' get module packages path ''' pp = [ 'edk2' , \"non-osi\" , 'platforms' ] ws = self . GetWorkspaceRoot () return [ os . path . join ( ws , x ) for x in pp ] Now when we run it, we'll see that we get an error from our UefiBuild itself. (Replace your toolchain tag with whatever toolchain you are using.) ~/rpi$ stuart_build -c Platform/RaspberryPi/RPi3/PlatformBuild.py TOOL_CHAIN_TAG=****** SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Loading Plugins SECTION - Kicking off build PROGRESS - Start time: 2019-12-02 14:37:17.515761 PROGRESS - Setting up the Environment PROGRESS - Running Pre Build PROGRESS - Running Build DEBUG ERROR - Compiler #2000 from : Invalid parameter CRITICAL - Build failed PROGRESS - End time: 2019-12-02 14:37:18.313707 Total time Elapsed: 0:00:00 SECTION - Summary PROGRESS - Error It is failing because we haven't defined the architecture we are building and many other things. Now you might be asking yourself, wait, how are we already compiling? What about the basetools, the CONF folder, the build tools and environmental variables? Don't I need to set these up? Nope. Stuart does it for you. You can see in your Build folder there should be a BUILDLOG.txt , SETUPLOG.txt , and UPDATELOG.txt . The goal there is to make sure you can reliably figure out what is going on when things do go wrong. For more information on them, go read about them here: (TODO) The goal of Stuart is to be as magical as possible while still being transparent and understandable as possible. INFO - Log Started: Saturday, November 02, 2019 09:22PM SECTION - Init SDE DEBUG - Loading workspace: C:/git/rpi DEBUG - Including scopes: raspberrypi, global-win, global DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/BinWrappers/WindowsLike/win_build_tools_path_env.json' to the environment with scope 'global-win'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/edk2_core_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/basetools_calling_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/basetools_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Scripts/basetools_scripts_bin_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Source/Python/basetool_tiano_python_path_env.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/Common/MU/SharedCryptoPkg/Package/SharedCrypto_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Bin/basetools_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Bin/nasm_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/NetworkPkg/SharedNetworking/SharedNetworking_ext_dep.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsResourceCompiler/WinRcPath_plug_in.json' to the environment with scope 'global-win'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsVsToolChain/WindowsVsToolChain_plug_in.yaml' to the environment with scope 'global-win'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/BuildToolsReport/BuildToolsReportGenerator_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/Edk2ToolHelper/Edk2ToolHelper_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FdSizeReport/FdSizeReportGenerator_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FlattenPdbs/FlattenPdbs_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/OverrideValidation/OverrideValidation_plug_in.json' to the environment with scope 'global'. DEBUG - Adding descriptor 'C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsCapsuleSupportHelper/WindowsCapsuleSupportHelper_plug_in.json' to the environment with scope 'global'. DEBUG - Verify 'mu_nasm' returning 'True'. INFO - C:/git/rpi/MU_BASECORE/BaseTools/Bin/mu_nasm_extdep/Windows-x86-64 was found! DEBUG - Verify 'Mu-Basetools' returning 'True'. INFO - C:/git/rpi/MU_BASECORE/BaseTools/Bin/Mu-Basetools_extdep/Windows-x86 was found! DEBUG - Verify 'Mu-SharedNetworking' returning 'True'. DEBUG - Verify 'mu_nasm' returning 'True'. DEBUG - Verify 'Mu-SharedCrypto' returning 'True'. SECTION - Loading Plugins DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsResourceCompiler/WinRcPath.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsVsToolChain/WindowsVsToolChain.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/BuildToolsReport/BuildToolsReportGenerator.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/Edk2ToolHelper/Edk2ToolHelper.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FdSizeReport/FdSizeReportGenerator.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/FlattenPdbs/FlattenPdbs.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/OverrideValidation/OverrideValidation.py DEBUG - Loading Plugin from C:/git/rpi/MU_BASECORE/BaseTools/Plugin/WindowsCapsuleSupportHelper/WindowsCapsuleSupportHelper.py DEBUG - Helper Plugin Register: Edk2Tool Helper Functions DEBUG - Helper Plugin Register: Windows Capsule Support Helper Functions You can see it is adding all the descriptors, which includes environment, external dependencies, and plugins. We load the basetools, the nasm tools, report generators, and other tools. We also check our external dependencies and verify they match the version we expect. The code is commited as commit at this point as (TODO).","title":"Build"},{"location":"integrate/porting/#setting-up-uefibuild","text":"Let's start by setting our DSC and product name ... #-------------------------------------------------------------------------------------------------------- # Subclass the UEFI builder and add platform specific functionality. # class PlatformBuilder ( UefiBuilder ): def SetPlatformEnv ( self ): self . env . SetValue ( \"ACTIVE_PLATFORM\" , \"Platform/RaspberryPi/RPi3/RPi3.dsc\" , \"Platform Hardcoded\" ) self . env . SetValue ( \"PRODUCT_NAME\" , \"RaspberryPi\" , \"Platform Hardcoded\" ) self . env . SetValue ( \"TARGET_ARCH\" , \"AARCH64\" , \"Platform Hardcoded\" ) os = GetHostInfo () . os if os . lower () == \"windows\" : self . env . SetValue ( \"TOOL_CHAIN_TAG\" , \"VS2017\" , \"Platform Hardcoded\" , True ) else : self . env . SetValue ( \"TOOL_CHAIN_TAG\" , \"GCC5\" , \"Platform Hardcoded\" , True ) return 0 At this point, when we run a build, we get this: ~/rpi$ stuart_update -c RpiPlatformBuild.py TOOL_CHAIN_TAG=GCC5 SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Initial update of environment SECTION - Updated/Verified 2 dependencies SECTION - Second pass update of environment SECTION - Updated/Verified 2 dependencies SECTION - Summary PROGRESS - Success ~/rpi$ stuart_build -c RpiPlatformBuild.py TOOL_CHAIN_TAG=GCC5 SECTION - Init SDE SECTION - Loading Plugins SECTION - Start Invocable Tool SECTION - Loading Plugins SECTION - Kicking off build PROGRESS - Start time: 2019-12-02 14:51:54.604488 PROGRESS - Setting up the Environment PROGRESS - Running Pre Build PROGRESS - Running Build DEBUG PROGRESS - Running Post Build PROGRESS - End time: 2019-12-02 14:52:51.642897 Total time Elapsed: 0:00:57 SECTION - Log file is located at: ~/rpi/Build/BUILDLOG.txt SECTION - Summary PROGRESS - Success Fantastic! If you want, you can call it a day and load your new ROM on an SD card and boot your UEFI powered Raspberry Pi. However, there are a few things we'd like to tweak. Right now, the DeviceTree image is a binary file checked into the non-osi git repo. A better approach might be using the image directly. Ideally, it would be from a Nuget feed or other auditable release pipeline. First we'll create a new file mkdir Platform/RaspberryPi/DeviceTree Then we'll create two files. The first is the dependencies/rpi-3-bp_ext_dep.yaml touch dependencies/rpi-3-bp_ext_dep.yaml Paste this in: ## # Download the Rpi 3b+ device tree from github # # Copyright (c) 2019, Microsoft Corporation # SPDX-License-Identifier: BSD-2-Clause-Patent ## { \"scope\" : \"raspberrypi\" , \"type\" : \"web\" , \"name\" : \"bcm2710_rpi_3b_plus_devicetree\" , \"source\" : \"https://github.com/raspberrypi/firmware/raw/a16470ad47c0ad66d5c98d98e08e49cd148c8fc0/boot/bcm2710-rpi-3-b-plus.dtb\" , \"version\" : \"a16470ad47c0ad66d5c98d98e08e49cd148c8fc0\" , \"internal_path\" : \"bcm2710-rpi-3-b-plus.dtb\" , \"sha256\" : \"253a2e8765aaec5bce6b2ab4e4dbd16107897cc24bb3e248ab5206c09a42cf04\" , \"flags\" : [ \"set_build_var\" ], \"var_name\" : \"BLD_*_BCM2710_3BP_DT\" , } The second is at dependencies/rpi-3-b_ext_dep.yaml touch dependencies/rpi-3-b_ext_dep.yaml Paste this in: ## # Download the Rpi 3b device tree from github # # Copyright (c) 2019, Microsoft Corporation # SPDX-License-Identifier: BSD-2-Clause-Patent ## { \"scope\" : \"raspberrypi\" , \"type\" : \"web\" , \"name\" : \"bcm2710_rpi_3b_devicetree\" , \"source\" : \"https://github.com/raspberrypi/firmware/raw/a16470ad47c0ad66d5c98d98e08e49cd148c8fc0/boot/bcm2710-rpi-3-b.dtb\" , \"version\" : \"a16470ad47c0ad66d5c98d98e08e49cd148c8fc0\" , \"internal_path\" : \"./bcm2710-rpi-3-b.dtb\" , \"sha256\" : \"18ce263a6e1ce4ba7aee759885cb665d61611d2f17cee5b7e91215f7b97d2952\" , \"flags\" : [ \"set_build_var\" ], \"var_name\" : \"BLD_*_BCM2710_3B_DT\" , } These are two external dependencies that will download the device trees from GitHub. It includes the SHA256 of the file so it can verify the file downloaded. Feel free to jump ahead to a newer commit hash, just be aware that you'll need to update the SHA256 (stuart will warn you and show you the new hash). Let's run an update to fetch our new dependencies. ~/rpi$ stuart_update -c RpiPlatformBuild.py You'll see some ouput and you'll notice two new folders in the tree. bcm2710_rpi_3b_devicetree_extdep and bcm2710_rpi_3b_plus_devicetree_extdep . Inside is the files that we want. Because the we told to SDE to save where the file was populated into an environmental variable, we'll use that in our FDF. This means that # Device Tree support (used by FdtDxe) # GUIDs should match gRaspberryPi#####FdtGuids from the .dec # FILE FREEFORM = DF5DA223-1D27-47C3-8D1B-9A41B55A18BC { SECTION RAW = Platform/RaspberryPi/$(PLATFORM_NAME)/DeviceTree/bcm2710-rpi-3-b.dtb } FILE FREEFORM = 3D523012-73FE-40E5-892E-1A4DF60F3C0C { SECTION RAW = Platform/RaspberryPi/$(PLATFORM_NAME)/DeviceTree/bcm2710-rpi-3-b-plus.dtb } becomes # MU_CHANGE START # Device Tree support (used by FdtDxe) # GUIDs should match gRaspberryPi#####FdtGuids from the .dec # FILE FREEFORM = DF5DA223-1D27-47C3-8D1B-9A41B55A18BC { SECTION RAW = $(BCM2710_3B_DT)/bcm2710-rpi-3-b.dtb } FILE FREEFORM = 3D523012-73FE-40E5-892E-1A4DF60F3C0C { SECTION RAW = $(BCM2710_3BP_DT)/bcm2710-rpi-3-b-plus.dtb } # MU_CHANGE END We can now build it and it will stay in sync with the upstream device tree. We could apply this technique to the ATF (Arm Trusted Firmware). Since it comes from the same place.","title":"Setting up UefiBuild"},{"location":"integrate/porting/#notes","text":"As of time of writing, VS2017 doesn't support the ASM files used in this project. So you'll need to use GCC. Using WSL is the recommended course for windows, but MacOS and Linux machines can follow the guide here.","title":"Notes"},{"location":"integrate/porting/#project-mu","text":"Using Project Mu is fairly easy. Instead of adding edk2, you would add these repos instead. You can add these all by running this command: git submodule add https://github.com/Microsoft/mu_basecore.git MU_BASECORE git submodule add https://github.com/Microsoft/mu_plus.git Common/MU git submodule add https://github.com/Microsoft/mu_tiano_plus.git Common/TIANO git submodule add https://github.com/Microsoft/mu_oem_sample.git Common/MU_OEM git submodule add https://github.com/microsoft/mu_silicon_arm_tiano.git Silicon/ARM/MU_TIANO git submodule add https://github.com/tianocore/edk2-platforms.git platforms git submodule add https://github.com/tianocore/edk2-non-osi.git non-osi Refer to the documentation in the various repos for the informations on how to enable features such as DFCI, SharedCrypto, etc.","title":"Project Mu"},{"location":"integrate/porting/#future-work","text":"Many of the capabilities and features of Stuart aren't detailed or explored here. One area not discussed in detail or shown is external dependencies. In the future, it would be beneficial to move the ARM Trusted Firmware (ATF) binary blob into an external dependency. This means you can have a separate build pipeline for that which packages it up into a nuget or github release, which your platform consumes. It addition to not having to carry a binary in your build tree, it makes the version of the binary trivial to track.","title":"Future Work"},{"location":"tools/using_capsule_tool/","text":"Capsule Helper and Tool \u00b6 These modules are designed to help developers build, sign, and distribute correctly formatted UEFI Capsules, as well as the Windows files necessary to arm and install the Capsules. Capsule Helper Parameters \u00b6 The CapsuleHelper tool has a number of functions to help build and/or format Capsules and their associated files. Each of these functions has some associated function documentation, but there are some shared parameters between all of the functions. These are described here. Capsule Options \u00b6 This is a dictionary that can include the following values: fw_version_string - must be a string containing the dot-separated semantic version for this capsule. Used in file naming and INF file fw_version - must be a number that can be represented as a 32-bit unsigned integer. Used in the capsule binary and INF file is_rollback - TODO: Document arch - TODO: Document fw_name - TODO: Document provider_name - TODO: Document esrt_guid - TODO: Document arch - TODO: Document fw_description - TODO: Document fw_version_string - TODO: Document fw_version - TODO: Document mfg_name - TODO: Document fw_integrity_file - if included, must be the filename of a Mu FW integrity file to be included with the capsule files. Caller must ensure that the integrity file is in the same directory as the newly generated capsule binary. Used by the INF file Signer Options \u00b6 TBD Signature Options \u00b6 TBD","title":"Capsule Helper and Tool"},{"location":"tools/using_capsule_tool/#capsule-helper-and-tool","text":"These modules are designed to help developers build, sign, and distribute correctly formatted UEFI Capsules, as well as the Windows files necessary to arm and install the Capsules.","title":"Capsule Helper and Tool"},{"location":"tools/using_capsule_tool/#capsule-helper-parameters","text":"The CapsuleHelper tool has a number of functions to help build and/or format Capsules and their associated files. Each of these functions has some associated function documentation, but there are some shared parameters between all of the functions. These are described here.","title":"Capsule Helper Parameters"},{"location":"tools/using_capsule_tool/#capsule-options","text":"This is a dictionary that can include the following values: fw_version_string - must be a string containing the dot-separated semantic version for this capsule. Used in file naming and INF file fw_version - must be a number that can be represented as a 32-bit unsigned integer. Used in the capsule binary and INF file is_rollback - TODO: Document arch - TODO: Document fw_name - TODO: Document provider_name - TODO: Document esrt_guid - TODO: Document arch - TODO: Document fw_description - TODO: Document fw_version_string - TODO: Document fw_version - TODO: Document mfg_name - TODO: Document fw_integrity_file - if included, must be the filename of a Mu FW integrity file to be included with the capsule files. Caller must ensure that the integrity file is in the same directory as the newly generated capsule binary. Used by the INF file","title":"Capsule Options"},{"location":"tools/using_capsule_tool/#signer-options","text":"TBD","title":"Signer Options"},{"location":"tools/using_capsule_tool/#signature-options","text":"TBD","title":"Signature Options"},{"location":"tools/using_firmware_policy_tool/","text":"Firmware Policy Tool \u00b6 A simple command-line interface to the Windows Firmware Policy Library. Usage info \u00b6 General: firmware_policy_tool <action> <positional_parameter1> ... [-optional_parameter1] ... Enumerating the supported actions and parameters for those actions: firmware_policy_tool -h firmware_policy_tool <action> -h firmware_policy_tool create -h usage: firmware_policy_tool create [-h] [--OEM1 OEM1] [--OEM2 OEM2] PolicyFilename Manufacturer Product SerialNumber NonceHex DevicePolicyHex positional arguments: PolicyFilename The name of the binary policy file to create Manufacturer Manufacturer Name, for example, \"Contoso Computers, LLC\". Should match the EV Certificate Subject CN=\"Manufacturer\" Product Product Name, for example, \"Laptop Foo\" SerialNumber Serial Number, for example \"F0013-000243546-X02\". Should match SmbiosSystemSerialNumber, SMBIOS System Information (Type 1 Table) -> Serial Number NonceHex The nonce in hexadecimal, for example \"0x0123456789abcdef\" DevicePolicyHex The device policy in hexadecimal, for example to clear the TPM and delete Secure Boot keys: 0x3 optional arguments: -h, --help show this help message and exit --OEM1 OEM1 Optional OEM Field 1, an arbitrary length string, for example \"ODM foo\" --OEM2 OEM2 Optional OEM Field 2, an arbitrary length string Examples of create to create an unsigned Windows Firmware Policy binary blob, and parse to parse an unsigned Windows Firmware Policy binary blob and print it in human understandable form. firmware_policy_tool create .\\test.bin \"Contoso LLC.\" \"Laptop Pro\" \"000-0012345-00S\" 0x1a2b3c4d5e6f7890 0x3 --OEM1 \"ODM Number One\" firmware_policy_tool parse .\\test.bin","title":"Firmware Policy Tool"},{"location":"tools/using_firmware_policy_tool/#firmware-policy-tool","text":"A simple command-line interface to the Windows Firmware Policy Library.","title":"Firmware Policy Tool"},{"location":"tools/using_firmware_policy_tool/#usage-info","text":"General: firmware_policy_tool <action> <positional_parameter1> ... [-optional_parameter1] ... Enumerating the supported actions and parameters for those actions: firmware_policy_tool -h firmware_policy_tool <action> -h firmware_policy_tool create -h usage: firmware_policy_tool create [-h] [--OEM1 OEM1] [--OEM2 OEM2] PolicyFilename Manufacturer Product SerialNumber NonceHex DevicePolicyHex positional arguments: PolicyFilename The name of the binary policy file to create Manufacturer Manufacturer Name, for example, \"Contoso Computers, LLC\". Should match the EV Certificate Subject CN=\"Manufacturer\" Product Product Name, for example, \"Laptop Foo\" SerialNumber Serial Number, for example \"F0013-000243546-X02\". Should match SmbiosSystemSerialNumber, SMBIOS System Information (Type 1 Table) -> Serial Number NonceHex The nonce in hexadecimal, for example \"0x0123456789abcdef\" DevicePolicyHex The device policy in hexadecimal, for example to clear the TPM and delete Secure Boot keys: 0x3 optional arguments: -h, --help show this help message and exit --OEM1 OEM1 Optional OEM Field 1, an arbitrary length string, for example \"ODM foo\" --OEM2 OEM2 Optional OEM Field 2, an arbitrary length string Examples of create to create an unsigned Windows Firmware Policy binary blob, and parse to parse an unsigned Windows Firmware Policy binary blob and print it in human understandable form. firmware_policy_tool create .\\test.bin \"Contoso LLC.\" \"Laptop Pro\" \"000-0012345-00S\" 0x1a2b3c4d5e6f7890 0x3 --OEM1 \"ODM Number One\" firmware_policy_tool parse .\\test.bin","title":"Usage info"},{"location":"tools/using_image_validation_tool/","text":"PE/COFF Image Validation Tool \u00b6 The PE/COFF image validation tool is a command line tool used to verify that memory protection requirements such as section alignment and write / execute settings are applied correctly. This tool also provides the ability to check, set, and clear the NX_COMPAT flag found in OPTIONAL_HEADER.DllCharacteristics. Synopsis \u00b6 image_validation.py [-h] -i FILE [-d] [-p PROFILE] [--set-nx-compat | --clear-nx-compat | --get-nx-compat] Options \u00b6 -h, --help \u00b6 [ Optional ] Provides information on flags -i, --file \u00b6 [ Required ] The input PE / COFF file to be verified -p, --profile \u00b6 [ Optional ] The profile config to be verified against . Will use the default , if not provided -d, --debug \u00b6 [ Optional ] Sets the logging mode to debug --set-nx-compat \u00b6 [ Optional ] Sets the NX_COMPAT flag of the input file --clear-nx-compat \u00b6 [ Optional ] Clears the NX_COMPAT flag of the input file --get-nx-compat \u00b6 [ Optional ] Returns the value of the NX_COMPAT flag Status codes returned \u00b6 0 - All tests return ed pass or warn 1 - On e or more tests return ed fail , or an error has occurred Tests \u00b6 1. Section Data / Code Separation Verification \u00b6 Description: This test ensures that each section of the binary is not both write-able and execute-able. Sections can only be one or the other (or neither). This test is done by iterating over each section and checking the characteristics label for the Write Mask (0x80000000) and Execute Mask (0x20000000). Output: @Pass: Only one (or neither) of the two masks (Write, Execute) are present @Skip: Test Skipped per profile configuration @Fail: Both of the two masks (Write, Execute) are set on at least one section 2. Section Alignment Verification \u00b6 Description: This test checks the section alignment value found in the optional header. It must meet the requirements specified in the profile configuration. Output: @Pass: The Image alignment passes all requirements specified in the profile configuration @Warn: The Image alignment is not found in the optional header @Skip: No image alignment requirements are specified in the profile configuration @Fail: The Image alignment does not meet at least one of the requirements specified in the profile configuration 3. Subsystem Type Verification \u00b6 Description: This check verifies the subsystem value found in the optional header. It must be one of the subsystem types specified in the profile configuration Output: @Pass: The subsystem is one of the types specified in the profile configuration @Warn: The subsystem is not found in the optional header @Skip: There are no subsystem restrictions in the profile configuration @Fail: The subsystem is not one of the types specified in the profile configuration Profile Configurations \u00b6 Configurations are first split by the target architecture, which is determined from parsing the PE/COFF file. The profile must be specified by the user, or the default, most restrictive, profile will automatically be used. X64 Profiles \u00b6 DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM IA32 Profiles \u00b6 DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM AARCH64 Profiles \u00b6 DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM ARM Profiles \u00b6 DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM","title":"PE/COFF Image Validation Tool"},{"location":"tools/using_image_validation_tool/#pecoff-image-validation-tool","text":"The PE/COFF image validation tool is a command line tool used to verify that memory protection requirements such as section alignment and write / execute settings are applied correctly. This tool also provides the ability to check, set, and clear the NX_COMPAT flag found in OPTIONAL_HEADER.DllCharacteristics.","title":"PE/COFF Image Validation Tool"},{"location":"tools/using_image_validation_tool/#synopsis","text":"image_validation.py [-h] -i FILE [-d] [-p PROFILE] [--set-nx-compat | --clear-nx-compat | --get-nx-compat]","title":"Synopsis"},{"location":"tools/using_image_validation_tool/#options","text":"","title":"Options"},{"location":"tools/using_image_validation_tool/#-h-help","text":"[ Optional ] Provides information on flags","title":"-h, --help"},{"location":"tools/using_image_validation_tool/#-i-file","text":"[ Required ] The input PE / COFF file to be verified","title":"-i, --file"},{"location":"tools/using_image_validation_tool/#-p-profile","text":"[ Optional ] The profile config to be verified against . Will use the default , if not provided","title":"-p, --profile"},{"location":"tools/using_image_validation_tool/#-d-debug","text":"[ Optional ] Sets the logging mode to debug","title":"-d, --debug"},{"location":"tools/using_image_validation_tool/#-set-nx-compat","text":"[ Optional ] Sets the NX_COMPAT flag of the input file","title":"--set-nx-compat"},{"location":"tools/using_image_validation_tool/#-clear-nx-compat","text":"[ Optional ] Clears the NX_COMPAT flag of the input file","title":"--clear-nx-compat"},{"location":"tools/using_image_validation_tool/#-get-nx-compat","text":"[ Optional ] Returns the value of the NX_COMPAT flag","title":"--get-nx-compat"},{"location":"tools/using_image_validation_tool/#status-codes-returned","text":"0 - All tests return ed pass or warn 1 - On e or more tests return ed fail , or an error has occurred","title":"Status codes returned"},{"location":"tools/using_image_validation_tool/#tests","text":"","title":"Tests"},{"location":"tools/using_image_validation_tool/#1-section-data-code-separation-verification","text":"Description: This test ensures that each section of the binary is not both write-able and execute-able. Sections can only be one or the other (or neither). This test is done by iterating over each section and checking the characteristics label for the Write Mask (0x80000000) and Execute Mask (0x20000000). Output: @Pass: Only one (or neither) of the two masks (Write, Execute) are present @Skip: Test Skipped per profile configuration @Fail: Both of the two masks (Write, Execute) are set on at least one section","title":"1. Section Data / Code Separation Verification"},{"location":"tools/using_image_validation_tool/#2-section-alignment-verification","text":"Description: This test checks the section alignment value found in the optional header. It must meet the requirements specified in the profile configuration. Output: @Pass: The Image alignment passes all requirements specified in the profile configuration @Warn: The Image alignment is not found in the optional header @Skip: No image alignment requirements are specified in the profile configuration @Fail: The Image alignment does not meet at least one of the requirements specified in the profile configuration","title":"2. Section Alignment Verification"},{"location":"tools/using_image_validation_tool/#3-subsystem-type-verification","text":"Description: This check verifies the subsystem value found in the optional header. It must be one of the subsystem types specified in the profile configuration Output: @Pass: The subsystem is one of the types specified in the profile configuration @Warn: The subsystem is not found in the optional header @Skip: There are no subsystem restrictions in the profile configuration @Fail: The subsystem is not one of the types specified in the profile configuration","title":"3. Subsystem Type Verification"},{"location":"tools/using_image_validation_tool/#profile-configurations","text":"Configurations are first split by the target architecture, which is determined from parsing the PE/COFF file. The profile must be specified by the user, or the default, most restrictive, profile will automatically be used.","title":"Profile Configurations"},{"location":"tools/using_image_validation_tool/#x64-profiles","text":"DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM","title":"X64 Profiles"},{"location":"tools/using_image_validation_tool/#ia32-profiles","text":"DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM","title":"IA32 Profiles"},{"location":"tools/using_image_validation_tool/#aarch64-profiles","text":"DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM","title":"AARCH64 Profiles"},{"location":"tools/using_image_validation_tool/#arm-profiles","text":"DEFAULT Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, ROM APP Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Application DRIVER Write / Execute Separation = Required Section Alignment = 4kB Subsystem = Boot Service Driver, Runtime Driver, ROM","title":"ARM Profiles"},{"location":"tools/using_nuget_publishing_tool/","text":"Nuget Publishing Tool \u00b6 Tool to help create and publish nuget packages for Project Mu resources Usage \u00b6 See NugetPublishing -h OPTIONAL: host_specific folders \u00b6 The possible different setups for the host are: OS: Linux, Windows, Java Architecture: x86 or ARM Highest Order Bit: 32 or 64 Before the path to the NuGet package contents is published, the Python environment can look inside at several sub-folders and decide which one to use based on the Host OS, highest order bit available, and the architecture of the processor. To do so, add \"host_specific\" to your flags like so: \"flags\": [\"host_specific\"], If this flag is present, the environment will make a list possible sub-folders that would be acceptable for the host machine. For this example, a 64 bit Windows machine with an x86 processor was used: Windows-x86-64 Windows-x86 Windows-64 x86-64 Windows x86 64 The environment will look for these folders, following this order, and select the first one it finds. If none are found, the flag will be ignored. Operations \u00b6 Nuget Publish supports four operations: New: creates a new configuration file Pack: creates a packed nuspec using a configuration file Push: pushes the packed nuspec to NuGet.org PackAndPush: packs and then pushes You can call one of these functions by calling: nuget-publish -Operation New You can get more information by adding -h to the operation you want to know about. nuget-publish -Operation Push -h Tags \u00b6 For Pack as well as PackAndPush, you can add tags to the nuspec package that is created. This can be done through the --t or the -tag option on Pack or PackAndPush. This looks like: nuget-publish -Operation Pack ... -t TAG1 -t TAG2,TAG3 You can also add the tags into your config.json file via the attribute tag_string . It should be a space separate list of words. Authentication \u00b6 For publishing most service providers require authentication. The --ApiKey parameter allows the caller to supply a unique key for authorization. There are numerous ways to authenticate. For example Azure Dev Ops: VSTS credential manager. In an interactive session a dialog will popup for the user to login Tokens can also be used as the API key. Go to your account page to generate a token that can push packages NuGet.org Must use an API key. Go to your account page and generate a key. Pushing to an Authenticated Stream \u00b6 If you have a specific credential provider executable needed to push to your stream, you'll need to follow the instructions here to make the executable available to find. You can add it to %LocalAppData%\\NuGet\\CredentialProvider or you can add an environmental variable NUGET_CREDENTIALPROVIDERS_PATH with the location of your provider. If you have multiple, they can be semicolon separated. Example: Creating new config file for first use \u00b6 This will create the config files and place them in the current directory: NugetPublishing --Operation New --Name iasl --Author ProjectMu --ConfigFileFolderPath . --Description \"Description of item.\" --FeedUrl https://api.nuget.org/v3/index.json --ProjectUrl http://aka.ms/projectmu --LicenseType BSD2 For help run: NugetPublishing --Operation New --help Example: Publishing new version of tool \u00b6 Using an existing config file publish a new iasl.exe. See the example file iasl.config.json Download version from acpica.org Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder (in this case just iasl.exe) Run the iasl.exe -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push (here is my example command. ) NugetPublishing --Operation PackAndPush --ConfigFilePath iasl.config.json --Version 20180209.0.0 --InputFolderPath \"C:\\temp\\iasl-win-20180209\\new\" --ApiKey <your key here>","title":"Nuget Publishing Tool"},{"location":"tools/using_nuget_publishing_tool/#nuget-publishing-tool","text":"Tool to help create and publish nuget packages for Project Mu resources","title":"Nuget Publishing Tool"},{"location":"tools/using_nuget_publishing_tool/#usage","text":"See NugetPublishing -h","title":"Usage"},{"location":"tools/using_nuget_publishing_tool/#optional-host_specific-folders","text":"The possible different setups for the host are: OS: Linux, Windows, Java Architecture: x86 or ARM Highest Order Bit: 32 or 64 Before the path to the NuGet package contents is published, the Python environment can look inside at several sub-folders and decide which one to use based on the Host OS, highest order bit available, and the architecture of the processor. To do so, add \"host_specific\" to your flags like so: \"flags\": [\"host_specific\"], If this flag is present, the environment will make a list possible sub-folders that would be acceptable for the host machine. For this example, a 64 bit Windows machine with an x86 processor was used: Windows-x86-64 Windows-x86 Windows-64 x86-64 Windows x86 64 The environment will look for these folders, following this order, and select the first one it finds. If none are found, the flag will be ignored.","title":"OPTIONAL: host_specific folders"},{"location":"tools/using_nuget_publishing_tool/#operations","text":"Nuget Publish supports four operations: New: creates a new configuration file Pack: creates a packed nuspec using a configuration file Push: pushes the packed nuspec to NuGet.org PackAndPush: packs and then pushes You can call one of these functions by calling: nuget-publish -Operation New You can get more information by adding -h to the operation you want to know about. nuget-publish -Operation Push -h","title":"Operations"},{"location":"tools/using_nuget_publishing_tool/#tags","text":"For Pack as well as PackAndPush, you can add tags to the nuspec package that is created. This can be done through the --t or the -tag option on Pack or PackAndPush. This looks like: nuget-publish -Operation Pack ... -t TAG1 -t TAG2,TAG3 You can also add the tags into your config.json file via the attribute tag_string . It should be a space separate list of words.","title":"Tags"},{"location":"tools/using_nuget_publishing_tool/#authentication","text":"For publishing most service providers require authentication. The --ApiKey parameter allows the caller to supply a unique key for authorization. There are numerous ways to authenticate. For example Azure Dev Ops: VSTS credential manager. In an interactive session a dialog will popup for the user to login Tokens can also be used as the API key. Go to your account page to generate a token that can push packages NuGet.org Must use an API key. Go to your account page and generate a key.","title":"Authentication"},{"location":"tools/using_nuget_publishing_tool/#pushing-to-an-authenticated-stream","text":"If you have a specific credential provider executable needed to push to your stream, you'll need to follow the instructions here to make the executable available to find. You can add it to %LocalAppData%\\NuGet\\CredentialProvider or you can add an environmental variable NUGET_CREDENTIALPROVIDERS_PATH with the location of your provider. If you have multiple, they can be semicolon separated.","title":"Pushing to an Authenticated Stream"},{"location":"tools/using_nuget_publishing_tool/#example-creating-new-config-file-for-first-use","text":"This will create the config files and place them in the current directory: NugetPublishing --Operation New --Name iasl --Author ProjectMu --ConfigFileFolderPath . --Description \"Description of item.\" --FeedUrl https://api.nuget.org/v3/index.json --ProjectUrl http://aka.ms/projectmu --LicenseType BSD2 For help run: NugetPublishing --Operation New --help","title":"Example: Creating new config file for first use"},{"location":"tools/using_nuget_publishing_tool/#example-publishing-new-version-of-tool","text":"Using an existing config file publish a new iasl.exe. See the example file iasl.config.json Download version from acpica.org Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder (in this case just iasl.exe) Run the iasl.exe -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push (here is my example command. ) NugetPublishing --Operation PackAndPush --ConfigFilePath iasl.config.json --Version 20180209.0.0 --InputFolderPath \"C:\\temp\\iasl-win-20180209\\new\" --ApiKey <your key here>","title":"Example: Publishing new version of tool"},{"location":"tools/using_omnicache_tool/","text":"Omnicache Tool \u00b6 Omnicache, the tool, is a command line tool that helps setup and update an Omnicache. An Omnicache is just a bare repo with lots of remotes fetched so that, if configured, Stuart tools will use it as a reference when updating or cloning a repo. This saves a lot of network bandwidth, disk space, and time if you develop with many workspaces on a single PC and can also be used to speed up CI. Creating your Omnicache \u00b6 You can setup your Omnicache many ways. You can add config entries from numerous files or thru command line. Try Omnicache -h for help. Here are the steps for a simple empty installation. Make sure you have installed edk2toolext using Pip Open cmd prompt Create one omnicache --init <path> At the end of the creation it will suggest setting the OMNICACHE_PATH environment variable. For best results do this. Adding Config Entries \u00b6 Config entries can be added when first creating the cache as well as any time by using the tool. Config entries can be added 1-by-1 from the command line or thru a config file. Example of adding config entry \u00b6 omnicache -a tianocore_edk2 https://github.com/tianocore/edk2.git --init %OMNICACHE_PATH% omnicache -a openssl https://github.com/openssl/openssl.git True --init %OMNICACHE_PATH% Example Config \u00b6 Copy the below sample and save it as abc.yml remotes: - name: openssl url: https://github.com/openssl/openssl.git tag: true - name: tianocore_edk2 url: https://github.com/tianocore/edk2.git Then run omnicache command to add the new entries. omnicache -c abc.yml --init %OMNICACHE_PATH% Keeping your Omnicache Current \u00b6 The Omnicache doesn't have to always be current. If it gets stale it will still help but there will be more \"cache misses\". Since the Omnicache is just a git repo it can easily be updated by running git commands and since it is a bare repo it is trouble free to update. The Omnicache tool attempts to make this even easier. Windows Scheduled Task \u00b6 If you want to use a scheduled task here is one way to do it on Windows. Set the OMNICACHE_PATH environment variable to your path Create an omnicache_update.bat file in your omnicache directory that contains omnicache --init --fetch %OMNICACHE_PATH% Create a temporary XML file on your desktop with the contents below named \"O_U.xml\" <?xml version=\"1.0\" encoding=\"UTF-16\"?> <Task version= \"1.4\" xmlns= \"http://schemas.microsoft.com/windows/2004/02/mit/task\" > <Triggers> <CalendarTrigger> <StartBoundary> 2019-01-04T8:00:00 </StartBoundary> <ExecutionTimeLimit> PT2H </ExecutionTimeLimit> <Enabled> true </Enabled> <ScheduleByDay> <DaysInterval> 1 </DaysInterval> </ScheduleByDay> </CalendarTrigger> </Triggers> <Settings> <MultipleInstancesPolicy> IgnoreNew </MultipleInstancesPolicy> <DisallowStartIfOnBatteries> false </DisallowStartIfOnBatteries> <StopIfGoingOnBatteries> false </StopIfGoingOnBatteries> <AllowHardTerminate> true </AllowHardTerminate> <StartWhenAvailable> false </StartWhenAvailable> <RunOnlyIfNetworkAvailable> false </RunOnlyIfNetworkAvailable> <IdleSettings> <StopOnIdleEnd> true </StopOnIdleEnd> <RestartOnIdle> false </RestartOnIdle> </IdleSettings> <AllowStartOnDemand> true </AllowStartOnDemand> <Enabled> true </Enabled> <Hidden> false </Hidden> <RunOnlyIfIdle> false </RunOnlyIfIdle> <DisallowStartOnRemoteAppSession> false </DisallowStartOnRemoteAppSession> <UseUnifiedSchedulingEngine> true </UseUnifiedSchedulingEngine> <WakeToRun> false </WakeToRun> <ExecutionTimeLimit> PT72H </ExecutionTimeLimit> <Priority> 7 </Priority> </Settings> <Actions Context= \"Author\" > <Exec> <Command> cmd.exe </Command> <Arguments> /c omnicache_update.bat </Arguments> <WorkingDirectory> %OMNICACHE_PATH% </WorkingDirectory> </Exec> </Actions> </Task> Open Cmd prompt and use SCHTASKS to create a task. SCHTASKS /Create /XML \"O_U.xml\" /TN \"Omnicache Updater\" Using Omnicache for stuart_setup \u00b6 Set the environment variable OMNICACHE_PATH for automatic usage. To provide a path manually: stuart_setup --omnicache <path> stuart_ci_setup --omnicache <path> Using Omnicache for git clone \u00b6 Current best practice is to setup a bashrc alias if using git for windows in gitbash. alias gcl = ' git clone --reference ${ OMNICACHE_PATH } \u2019 Then every git clone you want to do you can call gcl <url> <folder> instead of git clone <url> <folder> Warnings \u00b6 Removing the omnicache from your PC can cause problems in your repos. Read up on --reference in git for methods to resolve this before deleting the omnicache. Bug in git submodule update --recursive --reference <path> . This doesn't work as git appends the recursive submodule path to the reference path. Contacting git maintainers for clarity. Tags: tags are not namespaced by remote therefore conflicts could occur. Suggestion is to not pull tags unless required. Stack exchange has a few other ideas but nothing implemented yet. Older versions of the omnicache tool used -u true to update. Newer versions just require -u or --fetch . Since -a is a variable length argument list it is best to always add the --init parameter as the last parameter before the cache_dir positional argument. This way python argparse knows positional args from the -a optional args. A second tutorial of Omnicache \u00b6 The Omnicache or how I learned to stop worrying and love the all repo \u00b6 The Genesis \u00b6 Many repositories in the tree have common roots and share a very similar codebase. In order to speed up clone times for our CI builds as well as for personal use, we realized you can clone a repo using a reference repository. git clone {{ URL }} --reference ../some-directory Another feature that came to light is that you can use git to create an omni-repository. You can have all the objects stored into one place and git will query this repo for any objects it wishes to fetch and if they aren't found, it will then request them from upstream. We created some helper functions to wrap around this. It can be called by omnicache. Creating a new omnicache \u00b6 omnicache --init ../omnicache You can optionally use omnicache --new ../omnicache The difference between the two is that new will fail if something exists there, init does not. Feeding- I mean, Adding to the omnicache \u00b6 omnicache -a <name> <url> <Sync tags optional default = False> ../omnicache omnicache --add <name> <url> <Sync tags optional default = False> ../omnicache (Either of these will work) Updating the omnicache \u00b6 Now that you're a proud owner of an omnicache, you need to take care to update it semi-regularly. omnicache --update ../omnicache omnicache -u ../omnicache (Either of these will work) Know what's in the cache \u00b6 You can find out what is in your cache by listing it's contents. omnicache --list ../omnicache Assimilation into the Omnicache \u00b6 Sometimes you have a folder where all the repos are already cloned (either as submodules or separate folders). You can scan them all into the omnicache by using the scan feature. omnicache --scan ../folder ../omnicache This will add unique repos/submodules that it finds in the top level folders in ../folder. Unique is determined by URL. Fighting back against the Omnicache \u00b6 If your omnicache has grown a touch too powerful, you can take control back in your life by removing items from the cache. omnicache --remove {{ name_of_repo }} ../omnicache omnicache -r {{ name_of_repo }} ../omnicache Using the Omnicache \u00b6 Many of the tools are equipped to handle the omnicache and details on how to use them can be found in their respective documentations or help menus.","title":"Omnicache Tool"},{"location":"tools/using_omnicache_tool/#omnicache-tool","text":"Omnicache, the tool, is a command line tool that helps setup and update an Omnicache. An Omnicache is just a bare repo with lots of remotes fetched so that, if configured, Stuart tools will use it as a reference when updating or cloning a repo. This saves a lot of network bandwidth, disk space, and time if you develop with many workspaces on a single PC and can also be used to speed up CI.","title":"Omnicache Tool"},{"location":"tools/using_omnicache_tool/#creating-your-omnicache","text":"You can setup your Omnicache many ways. You can add config entries from numerous files or thru command line. Try Omnicache -h for help. Here are the steps for a simple empty installation. Make sure you have installed edk2toolext using Pip Open cmd prompt Create one omnicache --init <path> At the end of the creation it will suggest setting the OMNICACHE_PATH environment variable. For best results do this.","title":"Creating your Omnicache"},{"location":"tools/using_omnicache_tool/#adding-config-entries","text":"Config entries can be added when first creating the cache as well as any time by using the tool. Config entries can be added 1-by-1 from the command line or thru a config file.","title":"Adding Config Entries"},{"location":"tools/using_omnicache_tool/#example-of-adding-config-entry","text":"omnicache -a tianocore_edk2 https://github.com/tianocore/edk2.git --init %OMNICACHE_PATH% omnicache -a openssl https://github.com/openssl/openssl.git True --init %OMNICACHE_PATH%","title":"Example of adding config entry"},{"location":"tools/using_omnicache_tool/#example-config","text":"Copy the below sample and save it as abc.yml remotes: - name: openssl url: https://github.com/openssl/openssl.git tag: true - name: tianocore_edk2 url: https://github.com/tianocore/edk2.git Then run omnicache command to add the new entries. omnicache -c abc.yml --init %OMNICACHE_PATH%","title":"Example Config"},{"location":"tools/using_omnicache_tool/#keeping-your-omnicache-current","text":"The Omnicache doesn't have to always be current. If it gets stale it will still help but there will be more \"cache misses\". Since the Omnicache is just a git repo it can easily be updated by running git commands and since it is a bare repo it is trouble free to update. The Omnicache tool attempts to make this even easier.","title":"Keeping your Omnicache Current"},{"location":"tools/using_omnicache_tool/#windows-scheduled-task","text":"If you want to use a scheduled task here is one way to do it on Windows. Set the OMNICACHE_PATH environment variable to your path Create an omnicache_update.bat file in your omnicache directory that contains omnicache --init --fetch %OMNICACHE_PATH% Create a temporary XML file on your desktop with the contents below named \"O_U.xml\" <?xml version=\"1.0\" encoding=\"UTF-16\"?> <Task version= \"1.4\" xmlns= \"http://schemas.microsoft.com/windows/2004/02/mit/task\" > <Triggers> <CalendarTrigger> <StartBoundary> 2019-01-04T8:00:00 </StartBoundary> <ExecutionTimeLimit> PT2H </ExecutionTimeLimit> <Enabled> true </Enabled> <ScheduleByDay> <DaysInterval> 1 </DaysInterval> </ScheduleByDay> </CalendarTrigger> </Triggers> <Settings> <MultipleInstancesPolicy> IgnoreNew </MultipleInstancesPolicy> <DisallowStartIfOnBatteries> false </DisallowStartIfOnBatteries> <StopIfGoingOnBatteries> false </StopIfGoingOnBatteries> <AllowHardTerminate> true </AllowHardTerminate> <StartWhenAvailable> false </StartWhenAvailable> <RunOnlyIfNetworkAvailable> false </RunOnlyIfNetworkAvailable> <IdleSettings> <StopOnIdleEnd> true </StopOnIdleEnd> <RestartOnIdle> false </RestartOnIdle> </IdleSettings> <AllowStartOnDemand> true </AllowStartOnDemand> <Enabled> true </Enabled> <Hidden> false </Hidden> <RunOnlyIfIdle> false </RunOnlyIfIdle> <DisallowStartOnRemoteAppSession> false </DisallowStartOnRemoteAppSession> <UseUnifiedSchedulingEngine> true </UseUnifiedSchedulingEngine> <WakeToRun> false </WakeToRun> <ExecutionTimeLimit> PT72H </ExecutionTimeLimit> <Priority> 7 </Priority> </Settings> <Actions Context= \"Author\" > <Exec> <Command> cmd.exe </Command> <Arguments> /c omnicache_update.bat </Arguments> <WorkingDirectory> %OMNICACHE_PATH% </WorkingDirectory> </Exec> </Actions> </Task> Open Cmd prompt and use SCHTASKS to create a task. SCHTASKS /Create /XML \"O_U.xml\" /TN \"Omnicache Updater\"","title":"Windows Scheduled Task"},{"location":"tools/using_omnicache_tool/#using-omnicache-for-stuart_setup","text":"Set the environment variable OMNICACHE_PATH for automatic usage. To provide a path manually: stuart_setup --omnicache <path> stuart_ci_setup --omnicache <path>","title":"Using Omnicache for stuart_setup"},{"location":"tools/using_omnicache_tool/#using-omnicache-for-git-clone","text":"Current best practice is to setup a bashrc alias if using git for windows in gitbash. alias gcl = ' git clone --reference ${ OMNICACHE_PATH } \u2019 Then every git clone you want to do you can call gcl <url> <folder> instead of git clone <url> <folder>","title":"Using Omnicache for git clone"},{"location":"tools/using_omnicache_tool/#warnings","text":"Removing the omnicache from your PC can cause problems in your repos. Read up on --reference in git for methods to resolve this before deleting the omnicache. Bug in git submodule update --recursive --reference <path> . This doesn't work as git appends the recursive submodule path to the reference path. Contacting git maintainers for clarity. Tags: tags are not namespaced by remote therefore conflicts could occur. Suggestion is to not pull tags unless required. Stack exchange has a few other ideas but nothing implemented yet. Older versions of the omnicache tool used -u true to update. Newer versions just require -u or --fetch . Since -a is a variable length argument list it is best to always add the --init parameter as the last parameter before the cache_dir positional argument. This way python argparse knows positional args from the -a optional args.","title":"Warnings"},{"location":"tools/using_omnicache_tool/#a-second-tutorial-of-omnicache","text":"","title":"A second tutorial of Omnicache"},{"location":"tools/using_omnicache_tool/#the-omnicache-or-how-i-learned-to-stop-worrying-and-love-the-all-repo","text":"","title":"The Omnicache or how I learned to stop worrying and love the all repo"},{"location":"tools/using_omnicache_tool/#the-genesis","text":"Many repositories in the tree have common roots and share a very similar codebase. In order to speed up clone times for our CI builds as well as for personal use, we realized you can clone a repo using a reference repository. git clone {{ URL }} --reference ../some-directory Another feature that came to light is that you can use git to create an omni-repository. You can have all the objects stored into one place and git will query this repo for any objects it wishes to fetch and if they aren't found, it will then request them from upstream. We created some helper functions to wrap around this. It can be called by omnicache.","title":"The Genesis"},{"location":"tools/using_omnicache_tool/#creating-a-new-omnicache","text":"omnicache --init ../omnicache You can optionally use omnicache --new ../omnicache The difference between the two is that new will fail if something exists there, init does not.","title":"Creating a new omnicache"},{"location":"tools/using_omnicache_tool/#feeding-i-mean-adding-to-the-omnicache","text":"omnicache -a <name> <url> <Sync tags optional default = False> ../omnicache omnicache --add <name> <url> <Sync tags optional default = False> ../omnicache (Either of these will work)","title":"Feeding- I mean, Adding to the omnicache"},{"location":"tools/using_omnicache_tool/#updating-the-omnicache","text":"Now that you're a proud owner of an omnicache, you need to take care to update it semi-regularly. omnicache --update ../omnicache omnicache -u ../omnicache (Either of these will work)","title":"Updating the omnicache"},{"location":"tools/using_omnicache_tool/#know-whats-in-the-cache","text":"You can find out what is in your cache by listing it's contents. omnicache --list ../omnicache","title":"Know what's in the cache"},{"location":"tools/using_omnicache_tool/#assimilation-into-the-omnicache","text":"Sometimes you have a folder where all the repos are already cloned (either as submodules or separate folders). You can scan them all into the omnicache by using the scan feature. omnicache --scan ../folder ../omnicache This will add unique repos/submodules that it finds in the top level folders in ../folder. Unique is determined by URL.","title":"Assimilation into the Omnicache"},{"location":"tools/using_omnicache_tool/#fighting-back-against-the-omnicache","text":"If your omnicache has grown a touch too powerful, you can take control back in your life by removing items from the cache. omnicache --remove {{ name_of_repo }} ../omnicache omnicache -r {{ name_of_repo }} ../omnicache","title":"Fighting back against the Omnicache"},{"location":"tools/using_omnicache_tool/#using-the-omnicache","text":"Many of the tools are equipped to handle the omnicache and details on how to use them can be found in their respective documentations or help menus.","title":"Using the Omnicache"},{"location":"tools/using_sig_db_tool/","text":"Secure Boot Database Inspection Tool \u00b6 A simple command-line interface to the UEFI Secure Boot Database Library focused on inspection of UEFI signature databases Usage info \u00b6 usage: sig_db_tool [-h] [--compact] {dump,get_dupes,get_canonical} ... UEFI Signature database inspection tool positional arguments: {dump,get_dupes,get_canonical} dump Print a UEFI Signature Database as-is in human-readable form get_dupes Find duplicate signature entries in a UEFI Signature Database. The test for duplication ignores SignatureOwner, testing only the SignatureData field. Print them in UEFI Signature Database format, ordering is NOT maintained, output is NOT itself deduplicated get_canonical Reduce a UEFI Signature Database to a canonical (de-duplicated, sorted) form and print it optional arguments: -h, --help show this help message and exit --compact Compact, 1 line per data element output for easier diff-ing examples: sig_db_tool dump dbx_before.bin sig_db_tool --compact dump dbx_after.bin sig_db_tool --compact get_dupes dbx_with_dupes.bin sig_db_tool --compact get_canonical mixed_up_dbx.bin Actions \u00b6 NOTE: The --compact option may precede an action as show above, but is not shown below dump \u00b6 sig_db_tool dump -h usage: sig_db_tool.py dump [-h] file positional arguments: file Filename containing a UEFI Signature Database, a concatenation of EFI_SIGNATURE_LISTs as read from GetVariable([PK, KEK, db, dbx]) optional arguments: -h, --help show this help message and exit get_dupes \u00b6 sig_db_tool get_dupes -h usage: sig_db_tool.py get_dupes [-h] file positional arguments: file Filename of a UEFI Signature Database (concatenation of EFI_SIGNATURE_LISTs as read from GetVariable() ) optional arguments: -h, --help show this help message and exit get_canonical \u00b6 sig_db_tool get_canonical -h usage: sig_db_tool.py get_canonical [-h] file positional arguments: file The name of the UEFI Signature Database file to get_canonical optional arguments: -h, --help show this help message and exit Example Output \u00b6 Inspecting the Boothole dbxupdate released 2020-29-07 \u00b6 get_dupes example \u00b6 (venv_pytools) C:\\dbx_data>sig_db_tool --compact get_dupes Uefi_Desktop_retail_DBX_SigListContent_amd64.bin ESL:c1c41626-504c-4092-aca9-41f936934328,0x13c,0x0,0x30,NONE ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 dump example \u00b6 (venv_pytools) C:\\dbx_data>sig_db_tool --compact dump Uefi_Desktop_retail_DBX_SigListContent_amd64.bin ESL:a5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x450,0x0,0x434,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784ba5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x32c,0x0,0x310,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784bc1c41626-504c-4092-aca9-41f936934328,0x23bc,0x0,0x30,NONE ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F52F83A3FA9CFBD6920F722824DBE4034534D25B8507246B3B957DAC6E1BCE7A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C5D9D8A186E2C82D09AFAA2A6F7F2E73870D3E64F72C4E08EF67796A840F0FBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1AEC84B84B6C65A51220A9BE7181965230210D62D6D33C48999C6B295A2B0A06 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3A99A460DA464A057C3586D83CEF5F4AE08B7103979ED8932742DF0ED530C66 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,58FB941AEF95A25943B3FB5F2510A0DF3FE44C58C95E0AB80487297568AB9771 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D626157E1D6A718BC124AB8DA27CBB65072CA03A7B6B257DBDCBBD60F65EF3D1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D063EC28F67EBA53F1642DBF7DFF33C6A32ADD869F6013FE162E2C32F1CBE56D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29C6EB52B43C3AA18B2CD8ED6EA8607CEF3CFAE1BAFE1165755CF2E614844A44 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,90FBE70E69D633408D3E170C6832DBB2D209E0272527DFB63D49D29572A6F44C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,106FACEACFECFD4E303B74F480A08098E2D0802B936F8EC774CE21F31686689C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,174E3A0B5B43C6A607BBD3404F05341E3DCF396267CE94F8B50E2E23A9DA920C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B99CF26422E92FE365FBF4BC30D27086C9EE14B7A6FFF44FB2F6B9001699939 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2E70916786A6F773511FA7181FAB0F1D70B557C6322EA923B2A8D3B92B51AF7D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3FCE9B9FDF3EF09D5452B0F95EE481C2B7F06D743A737971558E70136ACE3E73 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47CC086127E2069A86E03A6BEF2CD410F8C55A6D6BDB362168C31B2CE32A5ADF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,71F2906FD222497E54A34662AB2497FCC81020770FF51368E9E3D9BFCBFD6375 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82DB3BCEB4F60843CE9D97C3D187CD9B5941CD3DE8100E586F2BDA5637575F67 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8AD64859F195B5F58DAFAA940B6A6167ACD67A886E8F469364177221C55945B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D8EA289CFE70A1C07AB7365CB28EE51EDD33CF2506DE888FBADD60EBF80481C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AEEBAE3151271273ED95AA2E671139ED31A98567303A332298F83709A9D55AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C409BDAC4775ADD8DB92AA22B5B718FB8C94A1462C1FE9A416B95D8A3388C2FC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C617C1A8B1EE2A811C28B5A81B4C83D7C98B5B0C27281D610207EBE692C2967F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C90F336617B8E7F983975413C997F10B73EB267FD8A10CB9E3BDBFC667ABDB8B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,64575BD912789A2E14AD56F6341F52AF6BF80CF94400785975E9F04E2D64D745 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45C7C8AE750ACFBB48FC37527D6412DD644DAED8913CCD8A24C94D856967DF8E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81D8FB4C9E2E7A8225656B4B8273B7CBA4B03EF2E9EB20E0A0291624ECA1BA86 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B92AF298DC08049B78C77492D6551B710CD72AADA3D77BE54609E43278EF6E4D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E19DAE83C02E6F281358D4EBD11D7723B4F5EA0E357907D5443DECC5F93C1E9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,39DBC2288EF44B5F95332CB777E31103E840DBA680634AA806F5C9B100061802 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32F5940CA29DD812A2C145E6FC89646628FFCC7C7A42CAE512337D8D29C40BBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,10D45FCBA396AEF3153EE8F6ECAE58AFE8476A280A2026FC71F6217DCF49BA2F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4B8668A5D465BCDD9000AA8DFCFF42044FCBD0AECE32FC7011A83E9160E89F09 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,89F3D1F6E485C334CD059D0995E3CDFDC00571B1849854847A44DC5548E2DCFB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C9EC350406F26E559AFFB4030DE2EBDE5435054C35A998605B8FCF04972D8D55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B3E506340FBF6B5786973393079F24B66BA46507E35E911DB0362A2ACDE97049 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9F1863ED5717C394B42EF10A6607B144A65BA11FB6579DF94B8EB2F0C4CD60C1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DD59AF56084406E38C63FBE0850F30A0CD1277462A2192590FB05BC259E61273 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DBAF9E056D3D5B38B68553304ABC88827EBC00F80CB9C7E197CDBC5822CD316C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65F3C0A01B8402D362B9722E98F75E5E991E6C186E934F7B2B2E6BE6DEC800EC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5B248E913D71853D3DA5AEDD8D9A4BC57A917126573817FB5FCB2D86A2F1C886 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2679650FE341F2CF1EA883460B3556AAAF77A70D6B8DC484C9301D1B746CF7B5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB1DD16D530008636F232303A7A86F3DFF969F848815C0574B12C2D787FEC93F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0CE02100F67C7EF85F4EED368F02BF7092380A3C23CA91FD7F19430D94B00C19 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,95049F0E4137C790B0D2767195E56F73807D123ADCF8F6E7BF2D4D991D305F89 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,02E6216ACAEF6401401FA555ECBED940B1A5F2569AED92956137AE58482EF1B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6EFEFE0B5B01478B7B944C10D3A8ACA2CCA4208888E2059F8A06CB5824D7BAB0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9D00AE4CD47A41C783DC48F342C076C2C16F3413F4D2DF50D181CA3BB5AD859D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D8D4E6DDF6E42D74A6A536EA62FD1217E4290B145C9E5C3695A31B42EFB5F5A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F277AF4F9BDC918AE89FA35CC1B34E34984C04AE9765322C3CB049574D36509C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0DC24C75EB1AEF56B9F13AB9DE60E2ECA1C4510034E290BBB36CF60A549B234C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,835881F2A5572D7059B5C8635018552892E945626F115FC9CA07ACF7BDE857A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BADFF5E4F0FEA711701CA8FB22E4C43821E31E210CF52D1D4F74DD50F1D039BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1863EC8B7F43F94AD14FB0B8B4A69497A8C65ECBC2A55E0BB420E772B8CDC91 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7BC9CB5463CE0F011FB5085EB8BA77D1ACD283C43F4A57603CC113F22CEBC579 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E800395DBE0E045781E8005178B4BAF5A257F06E159121A67C595F6AE22506FD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1CB4DCCAF2C812CFA7B4938E1371FE2B96910FE407216FD95428672D6C7E7316 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3ECE27CBB3EC4438CCE523B927C4F05FDC5C593A3766DB984C5E437A3FF6A16B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,68EE4632C7BE1C66C83E89DD93EAEE1294159ABF45B4C2C72D7DC7499AA2A043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E24B315A551671483D8B9073B32DE11B4DE1EB2EAB211AFD2D9C319FF55E08D0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7C20B3AB481EC885501ECA5293781D84B5A1AC24F88266B5270E7ECB4AA2538 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7EAC80A915C84CD4AFEC638904D94EB168A8557951A4D539B0713028552B6B8C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7681F153121EA1E67F74BBCB0CDC5E502702C1B8CC55FB65D702DFBA948B5F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DCCC3CE1C00EE4B0B10487D372A0FA47F5C26F57A359BE7B27801E144EACBAC4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0257FF710F2A16E489B37493C07604A7CDA96129D8A8FD68D2B6AF633904315D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A91F0F9E5287FA2994C7D930B2C1A5EE14CE8E1C8304AE495ADC58CC4453C0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,495300790E6C9BF2510DABA59DB3D57E9D2B85D7D7640434EC75BAA3851C74E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81A8B2C9751AEB1FABA7DBDE5EE9691DC0EAEE2A31C38B1491A8146756A6B770 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8E53EFDC15F852CEE5A6E92931BC42E6163CD30FF649CCA7E87252C3A459960B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9FA4D5023FD43ECAFF4200BA7E8D4353259D2B7E5E72B5096EFF8027D66D1043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D372C0D0F4FDC9F52E9E1F23FC56EE72414A17F350D0CEA6C26A35A6C3217A13 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5C5805196A85E93789457017D4F9EB6828B97C41CB9BA6D3DC1FCC115F527A55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,804E354C6368BB27A90FAE8E498A57052B293418259A019C4F53A2007254490F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,03F64A29948A88BEFFDB035E0B09A7370CCF0CD9CE6BCF8E640C2107318FAB87 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,05D87E15713454616F5B0ED7849AB5C1712AB84F02349478EC2A38F970C01489 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,06EB5BADD26E4FAE65F9A42358DEEF7C18E52CC05FBB7FC76776E69D1B982A14 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,08BB2289E9E91B4D20FF3F1562516AB07E979B2C6CEFE2AB70C6DFC1199F8DA5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0928F0408BF725E61D67D87138A8EEBC52962D2847F16E3587163B160E41B6AD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,09F98AA90F85198C0D73F89BA77E87EC6F596C491350FB8F8BBA80A62FBB914B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0A75EA0B1D70EAA4D3F374246DB54FC7B43E7F596A353309B9C36B4FD975725E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0C51D7906FC4931149765DA88682426B2CFE9E6AA4F27253EAB400111432E3A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0FA3A29AD05130D7FE5BF4D2596563CDED1D874096AACC181069932A2E49519A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,147730B42F11FE493FE902B6251E97CD2B6F34D36AF59330F11D02A42F940D07 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,148FE18F715A9FCFE1A444CE0FFF7F85869EB422330DC04B314C0F295D6DA79E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1B909115A8D473E51328A87823BD621CE655DFAE54FA2BFA72FDC0298611D6B8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1D8B58C1FDB8DA8B33CCEE1E5F973AF734D90EF317E33F5DB1573C2BA088A80C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F179186EFDF5EF2DE018245BA0EAE8134868601BA0D35FF3D9865C1537CED93 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,270C84B29D86F16312B06AAAE4EBB8DFF8DE7D080D825B8839FF1766274EFF47 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29CCA4544EA330D61591C784695C149C6B040022AC7B5B89CBD72800D10840EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B2298EAA26B9DC4A4558AE92E7BB0E4F85CF34BF848FDF636C0C11FBEC49897 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2DCF8E8D817023D1E8E1451A3D68D6EC30D9BED94CBCB87F19DDC1CC0116AC1A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,311A2AC55B50C09B30B3CC93B994A119153EEEAC54EF892FC447BBBD96101AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32AD3296829BC46DCFAC5EDDCB9DBF2C1EED5C11F83B2210CF9C6E60C798D4A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,340DA32B58331C8E2B561BAF300CA9DFD6B91CD2270EE0E2A34958B1C6259E85 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,362ED31D20B1E00392281231A96F0A0ACFDE02618953E695C9EF2EB0BAC37550 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,367A31E5838831AD2C074647886A6CDFF217E6B1BA910BFF85DC7A87AE9B5E98 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3765D769C05BF98B427B3511903B2137E8A49B6F859D0AF159ED6A86786AA634 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,386D695CDF2D4576E01BCACCF5E49E78DA51AF9955C0B8FA7606373B007994B3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A4F74BEAFAE2B9383AD8215D233A6CF3D057FB3C7E213E897BEEF4255FAEE9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3AE76C45CA70E9180C1559981F42622DD251BCA1FBE6B901C52EC11673B03514 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3BE8E7EB348D35C1928F19C769846788991641D1F6CF09514CA10269934F7359 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3E3926F0B8A15AD5A14167BB647A843C3D4321E35DBC44DCE8C837417F2D28B0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,400AC66D59B7B094A9E30B01A6BD013AFF1D30570F83E7592F421DBE5FF4BA8F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4185821F6DAB5BA8347B78A22B5F9A0A7570CA5C93A74D478A793D83BAC49805 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,41D1EEB177C0324E17DD6557F384E532DE0CF51A019A446B01EFB351BC259D77 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45876B4DD861D45B3A94800774027A5DB45A48B2A729410908B6412F8A87E95D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4667BF250CD7C1A06B8474C613CDB1DF648A7F58736FBF57D05D6F755DAB67F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,57E6913AFACC5222BD76CDAF31F8ED88895464255374EF097A82D7F59AD39596 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5890FA227121C76D90ED9E63C87E3A6533EEA0F6F0A1A23F1FC445139BC6BCDF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5D1E9ACBBB4A7D024B6852DF025970E2CED66FF622EE019CD0ED7FD841CCAD02 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61341E07697978220EA61E85DCD2421343F2C1BF35CC5B8D0AD2F0226F391479 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61CEC4A377BF5902C0FEAEE37034BF97D5BC6E0615E23A1CDFBAE6E3F5FB3CFD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,631F0857B41845362C90C6980B4B10C4B628E23DBE24B6E96C128AE3DCB0D5AC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65B2E7CC18D903C331DF1152DF73CA0DC932D29F17997481C56F3087B2DD3147 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,66AA13A0EDC219384D9C425D3927E6ED4A5D1940C5E7CD4DAC88F5770103F2F1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6873D2F61C29BD52E954EEFF5977AA8367439997811A62FF212C948133C68D97 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DBBEAD23E8C860CF8B47F74FBFCA5204DE3E28B881313BB1D1ECCDC4747934E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DEAD13257DFC3CCC6A4B37016BA91755FE9E0EC1F415030942E5ABC47F07C88 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,70A1450AF2AD395569AD0AFEB1D9C125324EE90AEC39C258880134D4892D51AB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,72C26F827CEB92989798961BC6AE748D141E05D3EBCFB65D9041B266C920BE82 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,781764102188A8B4B173D4A8F5EC94D828647156097F99357A581E624B377509 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,788383A4C733BB87D2BF51673DC73E92DF15AB7D51DC715627AE77686D8D23BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,78B4EDCAABC8D9093E20E217802CAEB4F09E23A3394C4ACC6E87E8F35395310F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7F49CCB309323B1C7AB11C93C955B8C744F0A2B75C311F495E18906070500027 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82ACBA48D5236CCFF7659AFC14594DEE902BD6082EF1A30A0B9B508628CF34F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,894D7839368F3298CC915AE8742EF330D7A26699F459478CF22C2B6BB2850166 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8C0349D708571AE5AA21C11363482332073297D868F29058916529EFC520EF70 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D93D60C691959651476E5DC464BE12A85FA5280B6F524D4A1C3FCC9D048CFAD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9063F5FBC5E57AB6DE6C9488146020E172B176D5AB57D4C89F0F600E17FE2DE2 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91656AA4EF493B3824A0B7263248E4E2D657A5C8488D880CB65B01730932FB53 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91971C1497BF8E5BC68439ACC48D63EBB8FAABFD764DCBE82F3BA977CAC8CF6A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,947078F97C6196968C3AE99C9A5D58667E86882CF6C8C9D58967A496BB7AF43C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,96E4509450D380DAC362FF8E295589128A1F1CE55885D20D89C27BA2A9D00909 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9783B5EE4492E9E891C655F1F48035959DAD453C0E623AF0FE7BF2C0A57885E3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A51A094444620DF38CD8C6512CAC909A75FD437AE1E4D22929807661238127 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A8C5BA11D61FEFBB5D6A05DA4E15BA472DC4C6CD4972FC1A035DE321342FE4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992820E6EC8C41DAAE4BD8AB48F58268E943A670D35CA5E2BDCD3E7C4C94A072 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9954A1A99D55E8B189AB1BCA414B91F6A017191F6C40A86B6F3EF368DD860031 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9BAF4F76D76BF5D6A897BFBD5F429BA14D04E08B48C3EE8D76930A828FFF3891 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9C259FCB301D5FC7397ED5759963E0EF6B36E42057FD73046E6BD08B149F751C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9DD2DCB72F5E741627F2E9E03AB18503A3403CF6A904A479A4DB05D97E2250A9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9ED33F0FBC180BC032F8909CA2C4AB3418EDC33A45A50D2521A3B5876AA3EA2C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A4D978B7C4BDA15435D508F8B9592EC2A5ADFB12EA7BAD146A35ECB53094642F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A924D3CAD6DA42B7399B96A095A06F18F6B1ABA5B873B0D5F3A0EE2173B48B6C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AD3BE589C0474E97DE5BB2BF33534948B76BB80376DFDC58B1FED767B5A15BFC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B8D6B5E7857B45830E017C7BE3D856ADEB97C7290EB0665A3D473A4BEB51DCF3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B93F0699598F8B20FA0DACC12CFCFC1F2568793F6E779E04795E6D7C22530F75 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB01DA0333BB639C7E1C806DB0561DC98A5316F22FEF1090FB8D0BE46DAE499A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BC75F910FF320F5CB5999E66BBD4034F4AE537A42FDFEF35161C5348E366E216 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BDD01126E9D85710D3FE75AF1CC1702A29F081B4F6FDF6A2B2135C0297A9CEC5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BE435DF7CD28AA2A7C8DB4FC8173475B77E5ABF392F76B7C76FA3F698CB71A9A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BEF7663BE5EA4DBFD8686E24701E036F4C03FB7FCD67A6C566ED94CE09C44470 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C2469759C1947E14F4B65F72A9F5B3AF8B6F6E727B68BB0D91385CBF42176A8A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3505BF3EC10A51DACE417C76B8BD10939A065D1F34E75B8A3065EE31CC69B96 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C42D11C70CCF5E8CF3FB91FDF21D884021AD836CA68ADF2CBB7995C10BF588D4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C69D64A5B839E41BA16742527E17056A18CE3C276FD26E34901A1BC7D0E32219 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CB340011AFEB0D74C4A588B36EBAA441961608E8D2FA80DCA8C13872C850796B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CC8EEC6EB9212CBF897A5ACE7E8ABEECE1079F1A6DEF0A789591CB1547F1F084 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CF13A243C1CD2E3C8CEB7E70100387CECBFB830525BBF9D0B70C79ADF3E84128 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D89A11D16C488DD4FBBC541D4B07FAF8670D660994488FE54B1FBFF2704E4288 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D9668AB52785086786C134B5E4BDDBF72452813B6973229AB92AA1A54D201BF5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DA3560FD0C32B54C83D4F2FF869003D2089369ACF2C89608F8AFA7436BFA4655 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF02AAB48387A9E1D4C65228089CB6ABE196C8F4B396C7E4BBC395DE136977F6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF91AC85A94FCD0CFB8155BD7CBEFAAC14B8C5EE7397FE2CC85984459E2EA14E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E36DFC719D2114C2E39AEA88849E2845AB326F6F7FE74E0E539B7E54D81F3631 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E39891F48BBCC593B8ED86CE82CE666FC1145B9FCBFD2B07BAD0A89BF4C7BFBF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E6856F137F79992DC94FA2F43297EC32D2D9A76F7BE66114C6A13EFC3BCDF5C8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EAFF8C85C208BA4D5B6B8046F5D6081747D779BADA7768E649D047FF9B1F660C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EE83A566496109A74F6AC6E410DF00BB29A290E0021516AE3B8A23288E7E2E72 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EED7E0EFF2ED559E2A79EE361F9962AF3B1E999131E30BB7FD07546FAE0A7267 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1B4F6513B0D544A688D13ADC291EFA8C59F420CA5DCB23E0B5A06FA7E0D083D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F2A16D35B554694187A70D40CA682959F4F35C2CE0EAB8FD64F7AC2AB9F5C24A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F31FD461C5E99510403FC97C1DA2D8A9CBE270597D32BADF8FD66B77495F8D94 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F48E6DD8718E953B60A24F2CBEA60A9521DEAE67DB25425B7D3ACE3C517DD9B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C805603C4FA038776E42F263C604B49D96840322E1922D5606A9B0BBB5BFFE6F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F16078CCE009DF62EDB9E7170E66CAAE670BCE71B8F92D38280C56AA372031D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,37A480374DAF6202CE790C318A2BB8AA3797311261160A8E30558B7DEA78C7A6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,408B8B3DF5ABB043521A493525023175AB1261B1DE21064D6BF247CE142153B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,540801DD345DC1C33EF431B35BF4C0E68BD319B577B9ABE1A9CFF1CBC39F548F get_canonical example \u00b6 (venv_pytools) C:\\dbx_data>sig_db_tool --compact get_canonical Uefi_Desktop_retail_DBX_SigListContent_amd64.bin ESL:c1c41626-504c-4092-aca9-41f936934328,0x229c,0x0,0x30,NONE ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0257FF710F2A16E489B37493C07604A7CDA96129D8A8FD68D2B6AF633904315D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,02E6216ACAEF6401401FA555ECBED940B1A5F2569AED92956137AE58482EF1B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,03F64A29948A88BEFFDB035E0B09A7370CCF0CD9CE6BCF8E640C2107318FAB87 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,05D87E15713454616F5B0ED7849AB5C1712AB84F02349478EC2A38F970C01489 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,06EB5BADD26E4FAE65F9A42358DEEF7C18E52CC05FBB7FC76776E69D1B982A14 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,08BB2289E9E91B4D20FF3F1562516AB07E979B2C6CEFE2AB70C6DFC1199F8DA5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0928F0408BF725E61D67D87138A8EEBC52962D2847F16E3587163B160E41B6AD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,09F98AA90F85198C0D73F89BA77E87EC6F596C491350FB8F8BBA80A62FBB914B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0A75EA0B1D70EAA4D3F374246DB54FC7B43E7F596A353309B9C36B4FD975725E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0C51D7906FC4931149765DA88682426B2CFE9E6AA4F27253EAB400111432E3A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0CE02100F67C7EF85F4EED368F02BF7092380A3C23CA91FD7F19430D94B00C19 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0DC24C75EB1AEF56B9F13AB9DE60E2ECA1C4510034E290BBB36CF60A549B234C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0FA3A29AD05130D7FE5BF4D2596563CDED1D874096AACC181069932A2E49519A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,106FACEACFECFD4E303B74F480A08098E2D0802B936F8EC774CE21F31686689C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,10D45FCBA396AEF3153EE8F6ECAE58AFE8476A280A2026FC71F6217DCF49BA2F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,147730B42F11FE493FE902B6251E97CD2B6F34D36AF59330F11D02A42F940D07 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,148FE18F715A9FCFE1A444CE0FFF7F85869EB422330DC04B314C0F295D6DA79E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,174E3A0B5B43C6A607BBD3404F05341E3DCF396267CE94F8B50E2E23A9DA920C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1AEC84B84B6C65A51220A9BE7181965230210D62D6D33C48999C6B295A2B0A06 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1B909115A8D473E51328A87823BD621CE655DFAE54FA2BFA72FDC0298611D6B8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1CB4DCCAF2C812CFA7B4938E1371FE2B96910FE407216FD95428672D6C7E7316 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1D8B58C1FDB8DA8B33CCEE1E5F973AF734D90EF317E33F5DB1573C2BA088A80C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F16078CCE009DF62EDB9E7170E66CAAE670BCE71B8F92D38280C56AA372031D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F179186EFDF5EF2DE018245BA0EAE8134868601BA0D35FF3D9865C1537CED93 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2679650FE341F2CF1EA883460B3556AAAF77A70D6B8DC484C9301D1B746CF7B5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,270C84B29D86F16312B06AAAE4EBB8DFF8DE7D080D825B8839FF1766274EFF47 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29C6EB52B43C3AA18B2CD8ED6EA8607CEF3CFAE1BAFE1165755CF2E614844A44 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29CCA4544EA330D61591C784695C149C6B040022AC7B5B89CBD72800D10840EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B2298EAA26B9DC4A4558AE92E7BB0E4F85CF34BF848FDF636C0C11FBEC49897 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B99CF26422E92FE365FBF4BC30D27086C9EE14B7A6FFF44FB2F6B9001699939 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2DCF8E8D817023D1E8E1451A3D68D6EC30D9BED94CBCB87F19DDC1CC0116AC1A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2E70916786A6F773511FA7181FAB0F1D70B557C6322EA923B2A8D3B92B51AF7D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,311A2AC55B50C09B30B3CC93B994A119153EEEAC54EF892FC447BBBD96101AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32AD3296829BC46DCFAC5EDDCB9DBF2C1EED5C11F83B2210CF9C6E60C798D4A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32F5940CA29DD812A2C145E6FC89646628FFCC7C7A42CAE512337D8D29C40BBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,340DA32B58331C8E2B561BAF300CA9DFD6B91CD2270EE0E2A34958B1C6259E85 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,362ED31D20B1E00392281231A96F0A0ACFDE02618953E695C9EF2EB0BAC37550 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,367A31E5838831AD2C074647886A6CDFF217E6B1BA910BFF85DC7A87AE9B5E98 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3765D769C05BF98B427B3511903B2137E8A49B6F859D0AF159ED6A86786AA634 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,37A480374DAF6202CE790C318A2BB8AA3797311261160A8E30558B7DEA78C7A6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,386D695CDF2D4576E01BCACCF5E49E78DA51AF9955C0B8FA7606373B007994B3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,39DBC2288EF44B5F95332CB777E31103E840DBA680634AA806F5C9B100061802 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A4F74BEAFAE2B9383AD8215D233A6CF3D057FB3C7E213E897BEEF4255FAEE9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A91F0F9E5287FA2994C7D930B2C1A5EE14CE8E1C8304AE495ADC58CC4453C0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3AE76C45CA70E9180C1559981F42622DD251BCA1FBE6B901C52EC11673B03514 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3BE8E7EB348D35C1928F19C769846788991641D1F6CF09514CA10269934F7359 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3E3926F0B8A15AD5A14167BB647A843C3D4321E35DBC44DCE8C837417F2D28B0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3ECE27CBB3EC4438CCE523B927C4F05FDC5C593A3766DB984C5E437A3FF6A16B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3FCE9B9FDF3EF09D5452B0F95EE481C2B7F06D743A737971558E70136ACE3E73 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,400AC66D59B7B094A9E30B01A6BD013AFF1D30570F83E7592F421DBE5FF4BA8F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,408B8B3DF5ABB043521A493525023175AB1261B1DE21064D6BF247CE142153B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4185821F6DAB5BA8347B78A22B5F9A0A7570CA5C93A74D478A793D83BAC49805 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,41D1EEB177C0324E17DD6557F384E532DE0CF51A019A446B01EFB351BC259D77 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45876B4DD861D45B3A94800774027A5DB45A48B2A729410908B6412F8A87E95D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45C7C8AE750ACFBB48FC37527D6412DD644DAED8913CCD8A24C94D856967DF8E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4667BF250CD7C1A06B8474C613CDB1DF648A7F58736FBF57D05D6F755DAB67F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47CC086127E2069A86E03A6BEF2CD410F8C55A6D6BDB362168C31B2CE32A5ADF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,495300790E6C9BF2510DABA59DB3D57E9D2B85D7D7640434EC75BAA3851C74E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4B8668A5D465BCDD9000AA8DFCFF42044FCBD0AECE32FC7011A83E9160E89F09 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,540801DD345DC1C33EF431B35BF4C0E68BD319B577B9ABE1A9CFF1CBC39F548F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,57E6913AFACC5222BD76CDAF31F8ED88895464255374EF097A82D7F59AD39596 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5890FA227121C76D90ED9E63C87E3A6533EEA0F6F0A1A23F1FC445139BC6BCDF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,58FB941AEF95A25943B3FB5F2510A0DF3FE44C58C95E0AB80487297568AB9771 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5B248E913D71853D3DA5AEDD8D9A4BC57A917126573817FB5FCB2D86A2F1C886 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5C5805196A85E93789457017D4F9EB6828B97C41CB9BA6D3DC1FCC115F527A55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5D1E9ACBBB4A7D024B6852DF025970E2CED66FF622EE019CD0ED7FD841CCAD02 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61341E07697978220EA61E85DCD2421343F2C1BF35CC5B8D0AD2F0226F391479 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61CEC4A377BF5902C0FEAEE37034BF97D5BC6E0615E23A1CDFBAE6E3F5FB3CFD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,631F0857B41845362C90C6980B4B10C4B628E23DBE24B6E96C128AE3DCB0D5AC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,64575BD912789A2E14AD56F6341F52AF6BF80CF94400785975E9F04E2D64D745 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65B2E7CC18D903C331DF1152DF73CA0DC932D29F17997481C56F3087B2DD3147 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65F3C0A01B8402D362B9722E98F75E5E991E6C186E934F7B2B2E6BE6DEC800EC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,66AA13A0EDC219384D9C425D3927E6ED4A5D1940C5E7CD4DAC88F5770103F2F1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6873D2F61C29BD52E954EEFF5977AA8367439997811A62FF212C948133C68D97 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,68EE4632C7BE1C66C83E89DD93EAEE1294159ABF45B4C2C72D7DC7499AA2A043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DBBEAD23E8C860CF8B47F74FBFCA5204DE3E28B881313BB1D1ECCDC4747934E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DEAD13257DFC3CCC6A4B37016BA91755FE9E0EC1F415030942E5ABC47F07C88 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6EFEFE0B5B01478B7B944C10D3A8ACA2CCA4208888E2059F8A06CB5824D7BAB0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,70A1450AF2AD395569AD0AFEB1D9C125324EE90AEC39C258880134D4892D51AB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,71F2906FD222497E54A34662AB2497FCC81020770FF51368E9E3D9BFCBFD6375 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,72C26F827CEB92989798961BC6AE748D141E05D3EBCFB65D9041B266C920BE82 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,781764102188A8B4B173D4A8F5EC94D828647156097F99357A581E624B377509 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,788383A4C733BB87D2BF51673DC73E92DF15AB7D51DC715627AE77686D8D23BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,78B4EDCAABC8D9093E20E217802CAEB4F09E23A3394C4ACC6E87E8F35395310F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7BC9CB5463CE0F011FB5085EB8BA77D1ACD283C43F4A57603CC113F22CEBC579 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7EAC80A915C84CD4AFEC638904D94EB168A8557951A4D539B0713028552B6B8C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7F49CCB309323B1C7AB11C93C955B8C744F0A2B75C311F495E18906070500027 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,804E354C6368BB27A90FAE8E498A57052B293418259A019C4F53A2007254490F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81A8B2C9751AEB1FABA7DBDE5EE9691DC0EAEE2A31C38B1491A8146756A6B770 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81D8FB4C9E2E7A8225656B4B8273B7CBA4B03EF2E9EB20E0A0291624ECA1BA86 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82ACBA48D5236CCFF7659AFC14594DEE902BD6082EF1A30A0B9B508628CF34F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82DB3BCEB4F60843CE9D97C3D187CD9B5941CD3DE8100E586F2BDA5637575F67 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,835881F2A5572D7059B5C8635018552892E945626F115FC9CA07ACF7BDE857A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,894D7839368F3298CC915AE8742EF330D7A26699F459478CF22C2B6BB2850166 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,89F3D1F6E485C334CD059D0995E3CDFDC00571B1849854847A44DC5548E2DCFB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8AD64859F195B5F58DAFAA940B6A6167ACD67A886E8F469364177221C55945B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8C0349D708571AE5AA21C11363482332073297D868F29058916529EFC520EF70 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D8EA289CFE70A1C07AB7365CB28EE51EDD33CF2506DE888FBADD60EBF80481C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D93D60C691959651476E5DC464BE12A85FA5280B6F524D4A1C3FCC9D048CFAD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8E53EFDC15F852CEE5A6E92931BC42E6163CD30FF649CCA7E87252C3A459960B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9063F5FBC5E57AB6DE6C9488146020E172B176D5AB57D4C89F0F600E17FE2DE2 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,90FBE70E69D633408D3E170C6832DBB2D209E0272527DFB63D49D29572A6F44C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91656AA4EF493B3824A0B7263248E4E2D657A5C8488D880CB65B01730932FB53 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91971C1497BF8E5BC68439ACC48D63EBB8FAABFD764DCBE82F3BA977CAC8CF6A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,947078F97C6196968C3AE99C9A5D58667E86882CF6C8C9D58967A496BB7AF43C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,95049F0E4137C790B0D2767195E56F73807D123ADCF8F6E7BF2D4D991D305F89 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,96E4509450D380DAC362FF8E295589128A1F1CE55885D20D89C27BA2A9D00909 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9783B5EE4492E9E891C655F1F48035959DAD453C0E623AF0FE7BF2C0A57885E3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A51A094444620DF38CD8C6512CAC909A75FD437AE1E4D22929807661238127 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A8C5BA11D61FEFBB5D6A05DA4E15BA472DC4C6CD4972FC1A035DE321342FE4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992820E6EC8C41DAAE4BD8AB48F58268E943A670D35CA5E2BDCD3E7C4C94A072 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9954A1A99D55E8B189AB1BCA414B91F6A017191F6C40A86B6F3EF368DD860031 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9BAF4F76D76BF5D6A897BFBD5F429BA14D04E08B48C3EE8D76930A828FFF3891 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9C259FCB301D5FC7397ED5759963E0EF6B36E42057FD73046E6BD08B149F751C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9D00AE4CD47A41C783DC48F342C076C2C16F3413F4D2DF50D181CA3BB5AD859D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9DD2DCB72F5E741627F2E9E03AB18503A3403CF6A904A479A4DB05D97E2250A9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9ED33F0FBC180BC032F8909CA2C4AB3418EDC33A45A50D2521A3B5876AA3EA2C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9F1863ED5717C394B42EF10A6607B144A65BA11FB6579DF94B8EB2F0C4CD60C1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9FA4D5023FD43ECAFF4200BA7E8D4353259D2B7E5E72B5096EFF8027D66D1043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A4D978B7C4BDA15435D508F8B9592EC2A5ADFB12EA7BAD146A35ECB53094642F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A924D3CAD6DA42B7399B96A095A06F18F6B1ABA5B873B0D5F3A0EE2173B48B6C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AD3BE589C0474E97DE5BB2BF33534948B76BB80376DFDC58B1FED767B5A15BFC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AEEBAE3151271273ED95AA2E671139ED31A98567303A332298F83709A9D55AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B3E506340FBF6B5786973393079F24B66BA46507E35E911DB0362A2ACDE97049 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B8D6B5E7857B45830E017C7BE3D856ADEB97C7290EB0665A3D473A4BEB51DCF3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B92AF298DC08049B78C77492D6551B710CD72AADA3D77BE54609E43278EF6E4D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B93F0699598F8B20FA0DACC12CFCFC1F2568793F6E779E04795E6D7C22530F75 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BADFF5E4F0FEA711701CA8FB22E4C43821E31E210CF52D1D4F74DD50F1D039BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB01DA0333BB639C7E1C806DB0561DC98A5316F22FEF1090FB8D0BE46DAE499A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB1DD16D530008636F232303A7A86F3DFF969F848815C0574B12C2D787FEC93F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BC75F910FF320F5CB5999E66BBD4034F4AE537A42FDFEF35161C5348E366E216 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BDD01126E9D85710D3FE75AF1CC1702A29F081B4F6FDF6A2B2135C0297A9CEC5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BE435DF7CD28AA2A7C8DB4FC8173475B77E5ABF392F76B7C76FA3F698CB71A9A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BEF7663BE5EA4DBFD8686E24701E036F4C03FB7FCD67A6C566ED94CE09C44470 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C2469759C1947E14F4B65F72A9F5B3AF8B6F6E727B68BB0D91385CBF42176A8A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3505BF3EC10A51DACE417C76B8BD10939A065D1F34E75B8A3065EE31CC69B96 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3A99A460DA464A057C3586D83CEF5F4AE08B7103979ED8932742DF0ED530C66 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C409BDAC4775ADD8DB92AA22B5B718FB8C94A1462C1FE9A416B95D8A3388C2FC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C42D11C70CCF5E8CF3FB91FDF21D884021AD836CA68ADF2CBB7995C10BF588D4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C5D9D8A186E2C82D09AFAA2A6F7F2E73870D3E64F72C4E08EF67796A840F0FBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C617C1A8B1EE2A811C28B5A81B4C83D7C98B5B0C27281D610207EBE692C2967F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C69D64A5B839E41BA16742527E17056A18CE3C276FD26E34901A1BC7D0E32219 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C805603C4FA038776E42F263C604B49D96840322E1922D5606A9B0BBB5BFFE6F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C90F336617B8E7F983975413C997F10B73EB267FD8A10CB9E3BDBFC667ABDB8B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C9EC350406F26E559AFFB4030DE2EBDE5435054C35A998605B8FCF04972D8D55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CB340011AFEB0D74C4A588B36EBAA441961608E8D2FA80DCA8C13872C850796B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CC8EEC6EB9212CBF897A5ACE7E8ABEECE1079F1A6DEF0A789591CB1547F1F084 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CF13A243C1CD2E3C8CEB7E70100387CECBFB830525BBF9D0B70C79ADF3E84128 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D063EC28F67EBA53F1642DBF7DFF33C6A32ADD869F6013FE162E2C32F1CBE56D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D372C0D0F4FDC9F52E9E1F23FC56EE72414A17F350D0CEA6C26A35A6C3217A13 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D626157E1D6A718BC124AB8DA27CBB65072CA03A7B6B257DBDCBBD60F65EF3D1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D89A11D16C488DD4FBBC541D4B07FAF8670D660994488FE54B1FBFF2704E4288 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D8D4E6DDF6E42D74A6A536EA62FD1217E4290B145C9E5C3695A31B42EFB5F5A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D9668AB52785086786C134B5E4BDDBF72452813B6973229AB92AA1A54D201BF5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DA3560FD0C32B54C83D4F2FF869003D2089369ACF2C89608F8AFA7436BFA4655 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DBAF9E056D3D5B38B68553304ABC88827EBC00F80CB9C7E197CDBC5822CD316C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DCCC3CE1C00EE4B0B10487D372A0FA47F5C26F57A359BE7B27801E144EACBAC4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DD59AF56084406E38C63FBE0850F30A0CD1277462A2192590FB05BC259E61273 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF02AAB48387A9E1D4C65228089CB6ABE196C8F4B396C7E4BBC395DE136977F6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF91AC85A94FCD0CFB8155BD7CBEFAAC14B8C5EE7397FE2CC85984459E2EA14E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E19DAE83C02E6F281358D4EBD11D7723B4F5EA0E357907D5443DECC5F93C1E9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E24B315A551671483D8B9073B32DE11B4DE1EB2EAB211AFD2D9C319FF55E08D0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E36DFC719D2114C2E39AEA88849E2845AB326F6F7FE74E0E539B7E54D81F3631 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E39891F48BBCC593B8ED86CE82CE666FC1145B9FCBFD2B07BAD0A89BF4C7BFBF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E6856F137F79992DC94FA2F43297EC32D2D9A76F7BE66114C6A13EFC3BCDF5C8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7681F153121EA1E67F74BBCB0CDC5E502702C1B8CC55FB65D702DFBA948B5F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7C20B3AB481EC885501ECA5293781D84B5A1AC24F88266B5270E7ECB4AA2538 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E800395DBE0E045781E8005178B4BAF5A257F06E159121A67C595F6AE22506FD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EAFF8C85C208BA4D5B6B8046F5D6081747D779BADA7768E649D047FF9B1F660C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EE83A566496109A74F6AC6E410DF00BB29A290E0021516AE3B8A23288E7E2E72 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EED7E0EFF2ED559E2A79EE361F9962AF3B1E999131E30BB7FD07546FAE0A7267 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1863EC8B7F43F94AD14FB0B8B4A69497A8C65ECBC2A55E0BB420E772B8CDC91 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1B4F6513B0D544A688D13ADC291EFA8C59F420CA5DCB23E0B5A06FA7E0D083D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F277AF4F9BDC918AE89FA35CC1B34E34984C04AE9765322C3CB049574D36509C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F2A16D35B554694187A70D40CA682959F4F35C2CE0EAB8FD64F7AC2AB9F5C24A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F31FD461C5E99510403FC97C1DA2D8A9CBE270597D32BADF8FD66B77495F8D94 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F48E6DD8718E953B60A24F2CBEA60A9521DEAE67DB25425B7D3ACE3C517DD9B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F52F83A3FA9CFBD6920F722824DBE4034534D25B8507246B3B957DAC6E1BCE7A ESL:a5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x32c,0x0,0x310,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784ba5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x450,0x0,0x434,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784btitle":"Secure Boot Database Inspection Tool"},{"location":"tools/using_sig_db_tool/#secure-boot-database-inspection-tool","text":"A simple command-line interface to the UEFI Secure Boot Database Library focused on inspection of UEFI signature databases","title":"Secure Boot Database Inspection Tool"},{"location":"tools/using_sig_db_tool/#usage-info","text":"usage: sig_db_tool [-h] [--compact] {dump,get_dupes,get_canonical} ... UEFI Signature database inspection tool positional arguments: {dump,get_dupes,get_canonical} dump Print a UEFI Signature Database as-is in human-readable form get_dupes Find duplicate signature entries in a UEFI Signature Database. The test for duplication ignores SignatureOwner, testing only the SignatureData field. Print them in UEFI Signature Database format, ordering is NOT maintained, output is NOT itself deduplicated get_canonical Reduce a UEFI Signature Database to a canonical (de-duplicated, sorted) form and print it optional arguments: -h, --help show this help message and exit --compact Compact, 1 line per data element output for easier diff-ing examples: sig_db_tool dump dbx_before.bin sig_db_tool --compact dump dbx_after.bin sig_db_tool --compact get_dupes dbx_with_dupes.bin sig_db_tool --compact get_canonical mixed_up_dbx.bin","title":"Usage info"},{"location":"tools/using_sig_db_tool/#actions","text":"NOTE: The --compact option may precede an action as show above, but is not shown below","title":"Actions"},{"location":"tools/using_sig_db_tool/#dump","text":"sig_db_tool dump -h usage: sig_db_tool.py dump [-h] file positional arguments: file Filename containing a UEFI Signature Database, a concatenation of EFI_SIGNATURE_LISTs as read from GetVariable([PK, KEK, db, dbx]) optional arguments: -h, --help show this help message and exit","title":"dump"},{"location":"tools/using_sig_db_tool/#get_dupes","text":"sig_db_tool get_dupes -h usage: sig_db_tool.py get_dupes [-h] file positional arguments: file Filename of a UEFI Signature Database (concatenation of EFI_SIGNATURE_LISTs as read from GetVariable() ) optional arguments: -h, --help show this help message and exit","title":"get_dupes"},{"location":"tools/using_sig_db_tool/#get_canonical","text":"sig_db_tool get_canonical -h usage: sig_db_tool.py get_canonical [-h] file positional arguments: file The name of the UEFI Signature Database file to get_canonical optional arguments: -h, --help show this help message and exit","title":"get_canonical"},{"location":"tools/using_sig_db_tool/#example-output","text":"","title":"Example Output"},{"location":"tools/using_sig_db_tool/#inspecting-the-boothole-dbxupdate-released-2020-29-07","text":"","title":"Inspecting the Boothole dbxupdate released 2020-29-07"},{"location":"tools/using_sig_db_tool/#get_dupes-example","text":"(venv_pytools) C:\\dbx_data>sig_db_tool --compact get_dupes Uefi_Desktop_retail_DBX_SigListContent_amd64.bin ESL:c1c41626-504c-4092-aca9-41f936934328,0x13c,0x0,0x30,NONE ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5","title":"get_dupes example"},{"location":"tools/using_sig_db_tool/#dump-example","text":"(venv_pytools) C:\\dbx_data>sig_db_tool --compact dump Uefi_Desktop_retail_DBX_SigListContent_amd64.bin ESL:a5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x450,0x0,0x434,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784ba5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x32c,0x0,0x310,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784bc1c41626-504c-4092-aca9-41f936934328,0x23bc,0x0,0x30,NONE ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F52F83A3FA9CFBD6920F722824DBE4034534D25B8507246B3B957DAC6E1BCE7A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C5D9D8A186E2C82D09AFAA2A6F7F2E73870D3E64F72C4E08EF67796A840F0FBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1AEC84B84B6C65A51220A9BE7181965230210D62D6D33C48999C6B295A2B0A06 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3A99A460DA464A057C3586D83CEF5F4AE08B7103979ED8932742DF0ED530C66 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,58FB941AEF95A25943B3FB5F2510A0DF3FE44C58C95E0AB80487297568AB9771 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D626157E1D6A718BC124AB8DA27CBB65072CA03A7B6B257DBDCBBD60F65EF3D1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D063EC28F67EBA53F1642DBF7DFF33C6A32ADD869F6013FE162E2C32F1CBE56D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29C6EB52B43C3AA18B2CD8ED6EA8607CEF3CFAE1BAFE1165755CF2E614844A44 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,90FBE70E69D633408D3E170C6832DBB2D209E0272527DFB63D49D29572A6F44C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,106FACEACFECFD4E303B74F480A08098E2D0802B936F8EC774CE21F31686689C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,174E3A0B5B43C6A607BBD3404F05341E3DCF396267CE94F8B50E2E23A9DA920C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B99CF26422E92FE365FBF4BC30D27086C9EE14B7A6FFF44FB2F6B9001699939 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2E70916786A6F773511FA7181FAB0F1D70B557C6322EA923B2A8D3B92B51AF7D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3FCE9B9FDF3EF09D5452B0F95EE481C2B7F06D743A737971558E70136ACE3E73 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47CC086127E2069A86E03A6BEF2CD410F8C55A6D6BDB362168C31B2CE32A5ADF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,71F2906FD222497E54A34662AB2497FCC81020770FF51368E9E3D9BFCBFD6375 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82DB3BCEB4F60843CE9D97C3D187CD9B5941CD3DE8100E586F2BDA5637575F67 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8AD64859F195B5F58DAFAA940B6A6167ACD67A886E8F469364177221C55945B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D8EA289CFE70A1C07AB7365CB28EE51EDD33CF2506DE888FBADD60EBF80481C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AEEBAE3151271273ED95AA2E671139ED31A98567303A332298F83709A9D55AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C409BDAC4775ADD8DB92AA22B5B718FB8C94A1462C1FE9A416B95D8A3388C2FC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C617C1A8B1EE2A811C28B5A81B4C83D7C98B5B0C27281D610207EBE692C2967F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C90F336617B8E7F983975413C997F10B73EB267FD8A10CB9E3BDBFC667ABDB8B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,64575BD912789A2E14AD56F6341F52AF6BF80CF94400785975E9F04E2D64D745 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45C7C8AE750ACFBB48FC37527D6412DD644DAED8913CCD8A24C94D856967DF8E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81D8FB4C9E2E7A8225656B4B8273B7CBA4B03EF2E9EB20E0A0291624ECA1BA86 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B92AF298DC08049B78C77492D6551B710CD72AADA3D77BE54609E43278EF6E4D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E19DAE83C02E6F281358D4EBD11D7723B4F5EA0E357907D5443DECC5F93C1E9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,39DBC2288EF44B5F95332CB777E31103E840DBA680634AA806F5C9B100061802 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32F5940CA29DD812A2C145E6FC89646628FFCC7C7A42CAE512337D8D29C40BBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,10D45FCBA396AEF3153EE8F6ECAE58AFE8476A280A2026FC71F6217DCF49BA2F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4B8668A5D465BCDD9000AA8DFCFF42044FCBD0AECE32FC7011A83E9160E89F09 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,89F3D1F6E485C334CD059D0995E3CDFDC00571B1849854847A44DC5548E2DCFB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C9EC350406F26E559AFFB4030DE2EBDE5435054C35A998605B8FCF04972D8D55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B3E506340FBF6B5786973393079F24B66BA46507E35E911DB0362A2ACDE97049 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9F1863ED5717C394B42EF10A6607B144A65BA11FB6579DF94B8EB2F0C4CD60C1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DD59AF56084406E38C63FBE0850F30A0CD1277462A2192590FB05BC259E61273 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DBAF9E056D3D5B38B68553304ABC88827EBC00F80CB9C7E197CDBC5822CD316C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65F3C0A01B8402D362B9722E98F75E5E991E6C186E934F7B2B2E6BE6DEC800EC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5B248E913D71853D3DA5AEDD8D9A4BC57A917126573817FB5FCB2D86A2F1C886 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2679650FE341F2CF1EA883460B3556AAAF77A70D6B8DC484C9301D1B746CF7B5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB1DD16D530008636F232303A7A86F3DFF969F848815C0574B12C2D787FEC93F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0CE02100F67C7EF85F4EED368F02BF7092380A3C23CA91FD7F19430D94B00C19 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,95049F0E4137C790B0D2767195E56F73807D123ADCF8F6E7BF2D4D991D305F89 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,02E6216ACAEF6401401FA555ECBED940B1A5F2569AED92956137AE58482EF1B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6EFEFE0B5B01478B7B944C10D3A8ACA2CCA4208888E2059F8A06CB5824D7BAB0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9D00AE4CD47A41C783DC48F342C076C2C16F3413F4D2DF50D181CA3BB5AD859D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D8D4E6DDF6E42D74A6A536EA62FD1217E4290B145C9E5C3695A31B42EFB5F5A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F277AF4F9BDC918AE89FA35CC1B34E34984C04AE9765322C3CB049574D36509C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0DC24C75EB1AEF56B9F13AB9DE60E2ECA1C4510034E290BBB36CF60A549B234C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,835881F2A5572D7059B5C8635018552892E945626F115FC9CA07ACF7BDE857A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BADFF5E4F0FEA711701CA8FB22E4C43821E31E210CF52D1D4F74DD50F1D039BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1863EC8B7F43F94AD14FB0B8B4A69497A8C65ECBC2A55E0BB420E772B8CDC91 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7BC9CB5463CE0F011FB5085EB8BA77D1ACD283C43F4A57603CC113F22CEBC579 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E800395DBE0E045781E8005178B4BAF5A257F06E159121A67C595F6AE22506FD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1CB4DCCAF2C812CFA7B4938E1371FE2B96910FE407216FD95428672D6C7E7316 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3ECE27CBB3EC4438CCE523B927C4F05FDC5C593A3766DB984C5E437A3FF6A16B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,68EE4632C7BE1C66C83E89DD93EAEE1294159ABF45B4C2C72D7DC7499AA2A043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E24B315A551671483D8B9073B32DE11B4DE1EB2EAB211AFD2D9C319FF55E08D0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7C20B3AB481EC885501ECA5293781D84B5A1AC24F88266B5270E7ECB4AA2538 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7EAC80A915C84CD4AFEC638904D94EB168A8557951A4D539B0713028552B6B8C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7681F153121EA1E67F74BBCB0CDC5E502702C1B8CC55FB65D702DFBA948B5F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DCCC3CE1C00EE4B0B10487D372A0FA47F5C26F57A359BE7B27801E144EACBAC4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0257FF710F2A16E489B37493C07604A7CDA96129D8A8FD68D2B6AF633904315D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A91F0F9E5287FA2994C7D930B2C1A5EE14CE8E1C8304AE495ADC58CC4453C0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,495300790E6C9BF2510DABA59DB3D57E9D2B85D7D7640434EC75BAA3851C74E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81A8B2C9751AEB1FABA7DBDE5EE9691DC0EAEE2A31C38B1491A8146756A6B770 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8E53EFDC15F852CEE5A6E92931BC42E6163CD30FF649CCA7E87252C3A459960B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9FA4D5023FD43ECAFF4200BA7E8D4353259D2B7E5E72B5096EFF8027D66D1043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D372C0D0F4FDC9F52E9E1F23FC56EE72414A17F350D0CEA6C26A35A6C3217A13 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5C5805196A85E93789457017D4F9EB6828B97C41CB9BA6D3DC1FCC115F527A55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,804E354C6368BB27A90FAE8E498A57052B293418259A019C4F53A2007254490F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,03F64A29948A88BEFFDB035E0B09A7370CCF0CD9CE6BCF8E640C2107318FAB87 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,05D87E15713454616F5B0ED7849AB5C1712AB84F02349478EC2A38F970C01489 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,06EB5BADD26E4FAE65F9A42358DEEF7C18E52CC05FBB7FC76776E69D1B982A14 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,08BB2289E9E91B4D20FF3F1562516AB07E979B2C6CEFE2AB70C6DFC1199F8DA5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0928F0408BF725E61D67D87138A8EEBC52962D2847F16E3587163B160E41B6AD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,09F98AA90F85198C0D73F89BA77E87EC6F596C491350FB8F8BBA80A62FBB914B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0A75EA0B1D70EAA4D3F374246DB54FC7B43E7F596A353309B9C36B4FD975725E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0C51D7906FC4931149765DA88682426B2CFE9E6AA4F27253EAB400111432E3A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0FA3A29AD05130D7FE5BF4D2596563CDED1D874096AACC181069932A2E49519A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,147730B42F11FE493FE902B6251E97CD2B6F34D36AF59330F11D02A42F940D07 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,148FE18F715A9FCFE1A444CE0FFF7F85869EB422330DC04B314C0F295D6DA79E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1B909115A8D473E51328A87823BD621CE655DFAE54FA2BFA72FDC0298611D6B8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1D8B58C1FDB8DA8B33CCEE1E5F973AF734D90EF317E33F5DB1573C2BA088A80C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F179186EFDF5EF2DE018245BA0EAE8134868601BA0D35FF3D9865C1537CED93 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,270C84B29D86F16312B06AAAE4EBB8DFF8DE7D080D825B8839FF1766274EFF47 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29CCA4544EA330D61591C784695C149C6B040022AC7B5B89CBD72800D10840EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B2298EAA26B9DC4A4558AE92E7BB0E4F85CF34BF848FDF636C0C11FBEC49897 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2DCF8E8D817023D1E8E1451A3D68D6EC30D9BED94CBCB87F19DDC1CC0116AC1A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,311A2AC55B50C09B30B3CC93B994A119153EEEAC54EF892FC447BBBD96101AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32AD3296829BC46DCFAC5EDDCB9DBF2C1EED5C11F83B2210CF9C6E60C798D4A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,340DA32B58331C8E2B561BAF300CA9DFD6B91CD2270EE0E2A34958B1C6259E85 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,362ED31D20B1E00392281231A96F0A0ACFDE02618953E695C9EF2EB0BAC37550 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,367A31E5838831AD2C074647886A6CDFF217E6B1BA910BFF85DC7A87AE9B5E98 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3765D769C05BF98B427B3511903B2137E8A49B6F859D0AF159ED6A86786AA634 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,386D695CDF2D4576E01BCACCF5E49E78DA51AF9955C0B8FA7606373B007994B3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A4F74BEAFAE2B9383AD8215D233A6CF3D057FB3C7E213E897BEEF4255FAEE9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3AE76C45CA70E9180C1559981F42622DD251BCA1FBE6B901C52EC11673B03514 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3BE8E7EB348D35C1928F19C769846788991641D1F6CF09514CA10269934F7359 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3E3926F0B8A15AD5A14167BB647A843C3D4321E35DBC44DCE8C837417F2D28B0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,400AC66D59B7B094A9E30B01A6BD013AFF1D30570F83E7592F421DBE5FF4BA8F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4185821F6DAB5BA8347B78A22B5F9A0A7570CA5C93A74D478A793D83BAC49805 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,41D1EEB177C0324E17DD6557F384E532DE0CF51A019A446B01EFB351BC259D77 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45876B4DD861D45B3A94800774027A5DB45A48B2A729410908B6412F8A87E95D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4667BF250CD7C1A06B8474C613CDB1DF648A7F58736FBF57D05D6F755DAB67F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,57E6913AFACC5222BD76CDAF31F8ED88895464255374EF097A82D7F59AD39596 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5890FA227121C76D90ED9E63C87E3A6533EEA0F6F0A1A23F1FC445139BC6BCDF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5D1E9ACBBB4A7D024B6852DF025970E2CED66FF622EE019CD0ED7FD841CCAD02 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61341E07697978220EA61E85DCD2421343F2C1BF35CC5B8D0AD2F0226F391479 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61CEC4A377BF5902C0FEAEE37034BF97D5BC6E0615E23A1CDFBAE6E3F5FB3CFD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,631F0857B41845362C90C6980B4B10C4B628E23DBE24B6E96C128AE3DCB0D5AC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65B2E7CC18D903C331DF1152DF73CA0DC932D29F17997481C56F3087B2DD3147 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,66AA13A0EDC219384D9C425D3927E6ED4A5D1940C5E7CD4DAC88F5770103F2F1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6873D2F61C29BD52E954EEFF5977AA8367439997811A62FF212C948133C68D97 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DBBEAD23E8C860CF8B47F74FBFCA5204DE3E28B881313BB1D1ECCDC4747934E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DEAD13257DFC3CCC6A4B37016BA91755FE9E0EC1F415030942E5ABC47F07C88 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,70A1450AF2AD395569AD0AFEB1D9C125324EE90AEC39C258880134D4892D51AB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,72C26F827CEB92989798961BC6AE748D141E05D3EBCFB65D9041B266C920BE82 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,781764102188A8B4B173D4A8F5EC94D828647156097F99357A581E624B377509 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,788383A4C733BB87D2BF51673DC73E92DF15AB7D51DC715627AE77686D8D23BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,78B4EDCAABC8D9093E20E217802CAEB4F09E23A3394C4ACC6E87E8F35395310F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7F49CCB309323B1C7AB11C93C955B8C744F0A2B75C311F495E18906070500027 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82ACBA48D5236CCFF7659AFC14594DEE902BD6082EF1A30A0B9B508628CF34F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,894D7839368F3298CC915AE8742EF330D7A26699F459478CF22C2B6BB2850166 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8C0349D708571AE5AA21C11363482332073297D868F29058916529EFC520EF70 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D93D60C691959651476E5DC464BE12A85FA5280B6F524D4A1C3FCC9D048CFAD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9063F5FBC5E57AB6DE6C9488146020E172B176D5AB57D4C89F0F600E17FE2DE2 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91656AA4EF493B3824A0B7263248E4E2D657A5C8488D880CB65B01730932FB53 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91971C1497BF8E5BC68439ACC48D63EBB8FAABFD764DCBE82F3BA977CAC8CF6A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,947078F97C6196968C3AE99C9A5D58667E86882CF6C8C9D58967A496BB7AF43C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,96E4509450D380DAC362FF8E295589128A1F1CE55885D20D89C27BA2A9D00909 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9783B5EE4492E9E891C655F1F48035959DAD453C0E623AF0FE7BF2C0A57885E3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A51A094444620DF38CD8C6512CAC909A75FD437AE1E4D22929807661238127 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A8C5BA11D61FEFBB5D6A05DA4E15BA472DC4C6CD4972FC1A035DE321342FE4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992820E6EC8C41DAAE4BD8AB48F58268E943A670D35CA5E2BDCD3E7C4C94A072 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9954A1A99D55E8B189AB1BCA414B91F6A017191F6C40A86B6F3EF368DD860031 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9BAF4F76D76BF5D6A897BFBD5F429BA14D04E08B48C3EE8D76930A828FFF3891 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9C259FCB301D5FC7397ED5759963E0EF6B36E42057FD73046E6BD08B149F751C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9DD2DCB72F5E741627F2E9E03AB18503A3403CF6A904A479A4DB05D97E2250A9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9ED33F0FBC180BC032F8909CA2C4AB3418EDC33A45A50D2521A3B5876AA3EA2C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A4D978B7C4BDA15435D508F8B9592EC2A5ADFB12EA7BAD146A35ECB53094642F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A924D3CAD6DA42B7399B96A095A06F18F6B1ABA5B873B0D5F3A0EE2173B48B6C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AD3BE589C0474E97DE5BB2BF33534948B76BB80376DFDC58B1FED767B5A15BFC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B8D6B5E7857B45830E017C7BE3D856ADEB97C7290EB0665A3D473A4BEB51DCF3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B93F0699598F8B20FA0DACC12CFCFC1F2568793F6E779E04795E6D7C22530F75 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB01DA0333BB639C7E1C806DB0561DC98A5316F22FEF1090FB8D0BE46DAE499A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BC75F910FF320F5CB5999E66BBD4034F4AE537A42FDFEF35161C5348E366E216 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BDD01126E9D85710D3FE75AF1CC1702A29F081B4F6FDF6A2B2135C0297A9CEC5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BE435DF7CD28AA2A7C8DB4FC8173475B77E5ABF392F76B7C76FA3F698CB71A9A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BEF7663BE5EA4DBFD8686E24701E036F4C03FB7FCD67A6C566ED94CE09C44470 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C2469759C1947E14F4B65F72A9F5B3AF8B6F6E727B68BB0D91385CBF42176A8A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3505BF3EC10A51DACE417C76B8BD10939A065D1F34E75B8A3065EE31CC69B96 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C42D11C70CCF5E8CF3FB91FDF21D884021AD836CA68ADF2CBB7995C10BF588D4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C69D64A5B839E41BA16742527E17056A18CE3C276FD26E34901A1BC7D0E32219 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CB340011AFEB0D74C4A588B36EBAA441961608E8D2FA80DCA8C13872C850796B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CC8EEC6EB9212CBF897A5ACE7E8ABEECE1079F1A6DEF0A789591CB1547F1F084 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CF13A243C1CD2E3C8CEB7E70100387CECBFB830525BBF9D0B70C79ADF3E84128 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D89A11D16C488DD4FBBC541D4B07FAF8670D660994488FE54B1FBFF2704E4288 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D9668AB52785086786C134B5E4BDDBF72452813B6973229AB92AA1A54D201BF5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DA3560FD0C32B54C83D4F2FF869003D2089369ACF2C89608F8AFA7436BFA4655 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF02AAB48387A9E1D4C65228089CB6ABE196C8F4B396C7E4BBC395DE136977F6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF91AC85A94FCD0CFB8155BD7CBEFAAC14B8C5EE7397FE2CC85984459E2EA14E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E36DFC719D2114C2E39AEA88849E2845AB326F6F7FE74E0E539B7E54D81F3631 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E39891F48BBCC593B8ED86CE82CE666FC1145B9FCBFD2B07BAD0A89BF4C7BFBF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E6856F137F79992DC94FA2F43297EC32D2D9A76F7BE66114C6A13EFC3BCDF5C8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EAFF8C85C208BA4D5B6B8046F5D6081747D779BADA7768E649D047FF9B1F660C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EE83A566496109A74F6AC6E410DF00BB29A290E0021516AE3B8A23288E7E2E72 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EED7E0EFF2ED559E2A79EE361F9962AF3B1E999131E30BB7FD07546FAE0A7267 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1B4F6513B0D544A688D13ADC291EFA8C59F420CA5DCB23E0B5A06FA7E0D083D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F2A16D35B554694187A70D40CA682959F4F35C2CE0EAB8FD64F7AC2AB9F5C24A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F31FD461C5E99510403FC97C1DA2D8A9CBE270597D32BADF8FD66B77495F8D94 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F48E6DD8718E953B60A24F2CBEA60A9521DEAE67DB25425B7D3ACE3C517DD9B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C805603C4FA038776E42F263C604B49D96840322E1922D5606A9B0BBB5BFFE6F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F16078CCE009DF62EDB9E7170E66CAAE670BCE71B8F92D38280C56AA372031D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,37A480374DAF6202CE790C318A2BB8AA3797311261160A8E30558B7DEA78C7A6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,408B8B3DF5ABB043521A493525023175AB1261B1DE21064D6BF247CE142153B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,540801DD345DC1C33EF431B35BF4C0E68BD319B577B9ABE1A9CFF1CBC39F548F","title":"dump example"},{"location":"tools/using_sig_db_tool/#get_canonical-example","text":"(venv_pytools) C:\\dbx_data>sig_db_tool --compact get_canonical Uefi_Desktop_retail_DBX_SigListContent_amd64.bin ESL:c1c41626-504c-4092-aca9-41f936934328,0x229c,0x0,0x30,NONE ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0257FF710F2A16E489B37493C07604A7CDA96129D8A8FD68D2B6AF633904315D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,02E6216ACAEF6401401FA555ECBED940B1A5F2569AED92956137AE58482EF1B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,03F64A29948A88BEFFDB035E0B09A7370CCF0CD9CE6BCF8E640C2107318FAB87 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,05D87E15713454616F5B0ED7849AB5C1712AB84F02349478EC2A38F970C01489 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,06EB5BADD26E4FAE65F9A42358DEEF7C18E52CC05FBB7FC76776E69D1B982A14 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,08BB2289E9E91B4D20FF3F1562516AB07E979B2C6CEFE2AB70C6DFC1199F8DA5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0928F0408BF725E61D67D87138A8EEBC52962D2847F16E3587163B160E41B6AD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,09F98AA90F85198C0D73F89BA77E87EC6F596C491350FB8F8BBA80A62FBB914B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0A75EA0B1D70EAA4D3F374246DB54FC7B43E7F596A353309B9C36B4FD975725E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0C51D7906FC4931149765DA88682426B2CFE9E6AA4F27253EAB400111432E3A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0CE02100F67C7EF85F4EED368F02BF7092380A3C23CA91FD7F19430D94B00C19 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0DC24C75EB1AEF56B9F13AB9DE60E2ECA1C4510034E290BBB36CF60A549B234C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,0FA3A29AD05130D7FE5BF4D2596563CDED1D874096AACC181069932A2E49519A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,106FACEACFECFD4E303B74F480A08098E2D0802B936F8EC774CE21F31686689C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,10D45FCBA396AEF3153EE8F6ECAE58AFE8476A280A2026FC71F6217DCF49BA2F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,147730B42F11FE493FE902B6251E97CD2B6F34D36AF59330F11D02A42F940D07 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,148FE18F715A9FCFE1A444CE0FFF7F85869EB422330DC04B314C0F295D6DA79E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,174E3A0B5B43C6A607BBD3404F05341E3DCF396267CE94F8B50E2E23A9DA920C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1AEC84B84B6C65A51220A9BE7181965230210D62D6D33C48999C6B295A2B0A06 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1B909115A8D473E51328A87823BD621CE655DFAE54FA2BFA72FDC0298611D6B8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1CB4DCCAF2C812CFA7B4938E1371FE2B96910FE407216FD95428672D6C7E7316 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1D8B58C1FDB8DA8B33CCEE1E5F973AF734D90EF317E33F5DB1573C2BA088A80C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F16078CCE009DF62EDB9E7170E66CAAE670BCE71B8F92D38280C56AA372031D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,1F179186EFDF5EF2DE018245BA0EAE8134868601BA0D35FF3D9865C1537CED93 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2679650FE341F2CF1EA883460B3556AAAF77A70D6B8DC484C9301D1B746CF7B5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,270C84B29D86F16312B06AAAE4EBB8DFF8DE7D080D825B8839FF1766274EFF47 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29C6EB52B43C3AA18B2CD8ED6EA8607CEF3CFAE1BAFE1165755CF2E614844A44 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,29CCA4544EA330D61591C784695C149C6B040022AC7B5B89CBD72800D10840EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B2298EAA26B9DC4A4558AE92E7BB0E4F85CF34BF848FDF636C0C11FBEC49897 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2B99CF26422E92FE365FBF4BC30D27086C9EE14B7A6FFF44FB2F6B9001699939 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2DCF8E8D817023D1E8E1451A3D68D6EC30D9BED94CBCB87F19DDC1CC0116AC1A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,2E70916786A6F773511FA7181FAB0F1D70B557C6322EA923B2A8D3B92B51AF7D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,311A2AC55B50C09B30B3CC93B994A119153EEEAC54EF892FC447BBBD96101AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32AD3296829BC46DCFAC5EDDCB9DBF2C1EED5C11F83B2210CF9C6E60C798D4A7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,32F5940CA29DD812A2C145E6FC89646628FFCC7C7A42CAE512337D8D29C40BBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,340DA32B58331C8E2B561BAF300CA9DFD6B91CD2270EE0E2A34958B1C6259E85 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,362ED31D20B1E00392281231A96F0A0ACFDE02618953E695C9EF2EB0BAC37550 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,367A31E5838831AD2C074647886A6CDFF217E6B1BA910BFF85DC7A87AE9B5E98 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3765D769C05BF98B427B3511903B2137E8A49B6F859D0AF159ED6A86786AA634 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,37A480374DAF6202CE790C318A2BB8AA3797311261160A8E30558B7DEA78C7A6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,386D695CDF2D4576E01BCACCF5E49E78DA51AF9955C0B8FA7606373B007994B3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,39DBC2288EF44B5F95332CB777E31103E840DBA680634AA806F5C9B100061802 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A4F74BEAFAE2B9383AD8215D233A6CF3D057FB3C7E213E897BEEF4255FAEE9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3A91F0F9E5287FA2994C7D930B2C1A5EE14CE8E1C8304AE495ADC58CC4453C0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3AE76C45CA70E9180C1559981F42622DD251BCA1FBE6B901C52EC11673B03514 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3BE8E7EB348D35C1928F19C769846788991641D1F6CF09514CA10269934F7359 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3E3926F0B8A15AD5A14167BB647A843C3D4321E35DBC44DCE8C837417F2D28B0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3ECE27CBB3EC4438CCE523B927C4F05FDC5C593A3766DB984C5E437A3FF6A16B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,3FCE9B9FDF3EF09D5452B0F95EE481C2B7F06D743A737971558E70136ACE3E73 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,400AC66D59B7B094A9E30B01A6BD013AFF1D30570F83E7592F421DBE5FF4BA8F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,408B8B3DF5ABB043521A493525023175AB1261B1DE21064D6BF247CE142153B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4185821F6DAB5BA8347B78A22B5F9A0A7570CA5C93A74D478A793D83BAC49805 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,41D1EEB177C0324E17DD6557F384E532DE0CF51A019A446B01EFB351BC259D77 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45876B4DD861D45B3A94800774027A5DB45A48B2A729410908B6412F8A87E95D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,45C7C8AE750ACFBB48FC37527D6412DD644DAED8913CCD8A24C94D856967DF8E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4667BF250CD7C1A06B8474C613CDB1DF648A7F58736FBF57D05D6F755DAB67F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47CC086127E2069A86E03A6BEF2CD410F8C55A6D6BDB362168C31B2CE32A5ADF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,47FF1B63B140B6FC04ED79131331E651DA5B2E2F170F5DAEF4153DC2FBC532B1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,495300790E6C9BF2510DABA59DB3D57E9D2B85D7D7640434EC75BAA3851C74E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,4B8668A5D465BCDD9000AA8DFCFF42044FCBD0AECE32FC7011A83E9160E89F09 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5391C3A2FB112102A6AA1EDC25AE77E19F5D6F09CD09EEB2509922BFCD5992EA ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,540801DD345DC1C33EF431B35BF4C0E68BD319B577B9ABE1A9CFF1CBC39F548F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,57E6913AFACC5222BD76CDAF31F8ED88895464255374EF097A82D7F59AD39596 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5890FA227121C76D90ED9E63C87E3A6533EEA0F6F0A1A23F1FC445139BC6BCDF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,58FB941AEF95A25943B3FB5F2510A0DF3FE44C58C95E0AB80487297568AB9771 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5B248E913D71853D3DA5AEDD8D9A4BC57A917126573817FB5FCB2D86A2F1C886 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5C5805196A85E93789457017D4F9EB6828B97C41CB9BA6D3DC1FCC115F527A55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,5D1E9ACBBB4A7D024B6852DF025970E2CED66FF622EE019CD0ED7FD841CCAD02 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61341E07697978220EA61E85DCD2421343F2C1BF35CC5B8D0AD2F0226F391479 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,61CEC4A377BF5902C0FEAEE37034BF97D5BC6E0615E23A1CDFBAE6E3F5FB3CFD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,631F0857B41845362C90C6980B4B10C4B628E23DBE24B6E96C128AE3DCB0D5AC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,64575BD912789A2E14AD56F6341F52AF6BF80CF94400785975E9F04E2D64D745 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65B2E7CC18D903C331DF1152DF73CA0DC932D29F17997481C56F3087B2DD3147 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,65F3C0A01B8402D362B9722E98F75E5E991E6C186E934F7B2B2E6BE6DEC800EC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,66AA13A0EDC219384D9C425D3927E6ED4A5D1940C5E7CD4DAC88F5770103F2F1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6873D2F61C29BD52E954EEFF5977AA8367439997811A62FF212C948133C68D97 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,68EE4632C7BE1C66C83E89DD93EAEE1294159ABF45B4C2C72D7DC7499AA2A043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DBBEAD23E8C860CF8B47F74FBFCA5204DE3E28B881313BB1D1ECCDC4747934E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6DEAD13257DFC3CCC6A4B37016BA91755FE9E0EC1F415030942E5ABC47F07C88 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,6EFEFE0B5B01478B7B944C10D3A8ACA2CCA4208888E2059F8A06CB5824D7BAB0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,70A1450AF2AD395569AD0AFEB1D9C125324EE90AEC39C258880134D4892D51AB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,71F2906FD222497E54A34662AB2497FCC81020770FF51368E9E3D9BFCBFD6375 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,72C26F827CEB92989798961BC6AE748D141E05D3EBCFB65D9041B266C920BE82 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,781764102188A8B4B173D4A8F5EC94D828647156097F99357A581E624B377509 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,788383A4C733BB87D2BF51673DC73E92DF15AB7D51DC715627AE77686D8D23BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,78B4EDCAABC8D9093E20E217802CAEB4F09E23A3394C4ACC6E87E8F35395310F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7BC9CB5463CE0F011FB5085EB8BA77D1ACD283C43F4A57603CC113F22CEBC579 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7EAC80A915C84CD4AFEC638904D94EB168A8557951A4D539B0713028552B6B8C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,7F49CCB309323B1C7AB11C93C955B8C744F0A2B75C311F495E18906070500027 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,804E354C6368BB27A90FAE8E498A57052B293418259A019C4F53A2007254490F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,80B4D96931BF0D02FD91A61E19D14F1DA452E66DB2408CA8604D411F92659F0A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81A8B2C9751AEB1FABA7DBDE5EE9691DC0EAEE2A31C38B1491A8146756A6B770 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,81D8FB4C9E2E7A8225656B4B8273B7CBA4B03EF2E9EB20E0A0291624ECA1BA86 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82ACBA48D5236CCFF7659AFC14594DEE902BD6082EF1A30A0B9B508628CF34F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,82DB3BCEB4F60843CE9D97C3D187CD9B5941CD3DE8100E586F2BDA5637575F67 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,835881F2A5572D7059B5C8635018552892E945626F115FC9CA07ACF7BDE857A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,894D7839368F3298CC915AE8742EF330D7A26699F459478CF22C2B6BB2850166 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,89F3D1F6E485C334CD059D0995E3CDFDC00571B1849854847A44DC5548E2DCFB ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8AD64859F195B5F58DAFAA940B6A6167ACD67A886E8F469364177221C55945B9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8C0349D708571AE5AA21C11363482332073297D868F29058916529EFC520EF70 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D8EA289CFE70A1C07AB7365CB28EE51EDD33CF2506DE888FBADD60EBF80481C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8D93D60C691959651476E5DC464BE12A85FA5280B6F524D4A1C3FCC9D048CFAD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,8E53EFDC15F852CEE5A6E92931BC42E6163CD30FF649CCA7E87252C3A459960B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9063F5FBC5E57AB6DE6C9488146020E172B176D5AB57D4C89F0F600E17FE2DE2 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,90FBE70E69D633408D3E170C6832DBB2D209E0272527DFB63D49D29572A6F44C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91656AA4EF493B3824A0B7263248E4E2D657A5C8488D880CB65B01730932FB53 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,91971C1497BF8E5BC68439ACC48D63EBB8FAABFD764DCBE82F3BA977CAC8CF6A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,947078F97C6196968C3AE99C9A5D58667E86882CF6C8C9D58967A496BB7AF43C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,95049F0E4137C790B0D2767195E56F73807D123ADCF8F6E7BF2D4D991D305F89 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,96E4509450D380DAC362FF8E295589128A1F1CE55885D20D89C27BA2A9D00909 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9783B5EE4492E9E891C655F1F48035959DAD453C0E623AF0FE7BF2C0A57885E3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A51A094444620DF38CD8C6512CAC909A75FD437AE1E4D22929807661238127 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,97A8C5BA11D61FEFBB5D6A05DA4E15BA472DC4C6CD4972FC1A035DE321342FE4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992820E6EC8C41DAAE4BD8AB48F58268E943A670D35CA5E2BDCD3E7C4C94A072 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,992D359AA7A5F789D268B94C11B9485A6B1CE64362B0EDB4441CCC187C39647B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9954A1A99D55E8B189AB1BCA414B91F6A017191F6C40A86B6F3EF368DD860031 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9BAF4F76D76BF5D6A897BFBD5F429BA14D04E08B48C3EE8D76930A828FFF3891 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9C259FCB301D5FC7397ED5759963E0EF6B36E42057FD73046E6BD08B149F751C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9D00AE4CD47A41C783DC48F342C076C2C16F3413F4D2DF50D181CA3BB5AD859D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9DD2DCB72F5E741627F2E9E03AB18503A3403CF6A904A479A4DB05D97E2250A9 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9ED33F0FBC180BC032F8909CA2C4AB3418EDC33A45A50D2521A3B5876AA3EA2C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9F1863ED5717C394B42EF10A6607B144A65BA11FB6579DF94B8EB2F0C4CD60C1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,9FA4D5023FD43ECAFF4200BA7E8D4353259D2B7E5E72B5096EFF8027D66D1043 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A4D978B7C4BDA15435D508F8B9592EC2A5ADFB12EA7BAD146A35ECB53094642F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,A924D3CAD6DA42B7399B96A095A06F18F6B1ABA5B873B0D5F3A0EE2173B48B6C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AD3BE589C0474E97DE5BB2BF33534948B76BB80376DFDC58B1FED767B5A15BFC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,AEEBAE3151271273ED95AA2E671139ED31A98567303A332298F83709A9D55AA1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B3E506340FBF6B5786973393079F24B66BA46507E35E911DB0362A2ACDE97049 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B8D6B5E7857B45830E017C7BE3D856ADEB97C7290EB0665A3D473A4BEB51DCF3 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B92AF298DC08049B78C77492D6551B710CD72AADA3D77BE54609E43278EF6E4D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,B93F0699598F8B20FA0DACC12CFCFC1F2568793F6E779E04795E6D7C22530F75 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BADFF5E4F0FEA711701CA8FB22E4C43821E31E210CF52D1D4F74DD50F1D039BC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB01DA0333BB639C7E1C806DB0561DC98A5316F22FEF1090FB8D0BE46DAE499A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BB1DD16D530008636F232303A7A86F3DFF969F848815C0574B12C2D787FEC93F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BC75F910FF320F5CB5999E66BBD4034F4AE537A42FDFEF35161C5348E366E216 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BDD01126E9D85710D3FE75AF1CC1702A29F081B4F6FDF6A2B2135C0297A9CEC5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BE435DF7CD28AA2A7C8DB4FC8173475B77E5ABF392F76B7C76FA3F698CB71A9A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,BEF7663BE5EA4DBFD8686E24701E036F4C03FB7FCD67A6C566ED94CE09C44470 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C2469759C1947E14F4B65F72A9F5B3AF8B6F6E727B68BB0D91385CBF42176A8A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3505BF3EC10A51DACE417C76B8BD10939A065D1F34E75B8A3065EE31CC69B96 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C3A99A460DA464A057C3586D83CEF5F4AE08B7103979ED8932742DF0ED530C66 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C409BDAC4775ADD8DB92AA22B5B718FB8C94A1462C1FE9A416B95D8A3388C2FC ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C42D11C70CCF5E8CF3FB91FDF21D884021AD836CA68ADF2CBB7995C10BF588D4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C452AB846073DF5ACE25CCA64D6B7A09D906308A1A65EB5240E3C4EBCAA9CC0C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C5D9D8A186E2C82D09AFAA2A6F7F2E73870D3E64F72C4E08EF67796A840F0FBD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C617C1A8B1EE2A811C28B5A81B4C83D7C98B5B0C27281D610207EBE692C2967F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C69D64A5B839E41BA16742527E17056A18CE3C276FD26E34901A1BC7D0E32219 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C805603C4FA038776E42F263C604B49D96840322E1922D5606A9B0BBB5BFFE6F ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C90F336617B8E7F983975413C997F10B73EB267FD8A10CB9E3BDBFC667ABDB8B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,C9EC350406F26E559AFFB4030DE2EBDE5435054C35A998605B8FCF04972D8D55 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CB340011AFEB0D74C4A588B36EBAA441961608E8D2FA80DCA8C13872C850796B ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CC8EEC6EB9212CBF897A5ACE7E8ABEECE1079F1A6DEF0A789591CB1547F1F084 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,CF13A243C1CD2E3C8CEB7E70100387CECBFB830525BBF9D0B70C79ADF3E84128 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D063EC28F67EBA53F1642DBF7DFF33C6A32ADD869F6013FE162E2C32F1CBE56D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D372C0D0F4FDC9F52E9E1F23FC56EE72414A17F350D0CEA6C26A35A6C3217A13 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D626157E1D6A718BC124AB8DA27CBB65072CA03A7B6B257DBDCBBD60F65EF3D1 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D89A11D16C488DD4FBBC541D4B07FAF8670D660994488FE54B1FBFF2704E4288 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D8D4E6DDF6E42D74A6A536EA62FD1217E4290B145C9E5C3695A31B42EFB5F5A4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,D9668AB52785086786C134B5E4BDDBF72452813B6973229AB92AA1A54D201BF5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DA3560FD0C32B54C83D4F2FF869003D2089369ACF2C89608F8AFA7436BFA4655 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DBAF9E056D3D5B38B68553304ABC88827EBC00F80CB9C7E197CDBC5822CD316C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DCCC3CE1C00EE4B0B10487D372A0FA47F5C26F57A359BE7B27801E144EACBAC4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DD59AF56084406E38C63FBE0850F30A0CD1277462A2192590FB05BC259E61273 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF02AAB48387A9E1D4C65228089CB6ABE196C8F4B396C7E4BBC395DE136977F6 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,DF91AC85A94FCD0CFB8155BD7CBEFAAC14B8C5EE7397FE2CC85984459E2EA14E ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E051B788ECBAEDA53046C70E6AF6058F95222C046157B8C4C1B9C2CFC65F46E5 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E19DAE83C02E6F281358D4EBD11D7723B4F5EA0E357907D5443DECC5F93C1E9D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E24B315A551671483D8B9073B32DE11B4DE1EB2EAB211AFD2D9C319FF55E08D0 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E36DFC719D2114C2E39AEA88849E2845AB326F6F7FE74E0E539B7E54D81F3631 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E39891F48BBCC593B8ED86CE82CE666FC1145B9FCBFD2B07BAD0A89BF4C7BFBF ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E6856F137F79992DC94FA2F43297EC32D2D9A76F7BE66114C6A13EFC3BCDF5C8 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7681F153121EA1E67F74BBCB0CDC5E502702C1B8CC55FB65D702DFBA948B5F4 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E7C20B3AB481EC885501ECA5293781D84B5A1AC24F88266B5270E7ECB4AA2538 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,E800395DBE0E045781E8005178B4BAF5A257F06E159121A67C595F6AE22506FD ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EAFF8C85C208BA4D5B6B8046F5D6081747D779BADA7768E649D047FF9B1F660C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EE83A566496109A74F6AC6E410DF00BB29A290E0021516AE3B8A23288E7E2E72 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,EED7E0EFF2ED559E2A79EE361F9962AF3B1E999131E30BB7FD07546FAE0A7267 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1863EC8B7F43F94AD14FB0B8B4A69497A8C65ECBC2A55E0BB420E772B8CDC91 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F1B4F6513B0D544A688D13ADC291EFA8C59F420CA5DCB23E0B5A06FA7E0D083D ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F277AF4F9BDC918AE89FA35CC1B34E34984C04AE9765322C3CB049574D36509C ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F2A16D35B554694187A70D40CA682959F4F35C2CE0EAB8FD64F7AC2AB9F5C24A ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F31FD461C5E99510403FC97C1DA2D8A9CBE270597D32BADF8FD66B77495F8D94 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F48E6DD8718E953B60A24F2CBEA60A9521DEAE67DB25425B7D3ACE3C517DD9B7 ESD:EFI_CERT_SHA256,77fa9abd-0359-4d32-bd60-28f4e78f784b,F52F83A3FA9CFBD6920F722824DBE4034534D25B8507246B3B957DAC6E1BCE7A ESL:a5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x32c,0x0,0x310,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784ba5c059a1-94e4-4aa7-87b5-ab155c2bf072,0x450,0x0,0x434,NONE ESD:EFI_CERT_X509,77fa9abd-0359-4d32-bd60-28f4e78f784btitle":"get_canonical example"},{"location":"tools/using_versioninfo_tool/","text":"Version Info Tool \u00b6 A simple command line utility for working with resource sections and PECOFF binaries. Utility can dump the contents of a PECOFF RSRC section into readable json data Utility can encode a json file with name/value pairs into a input file for a RC compiler. BETA feature This tools is part of a proof of concept project to support embedding version information into UEFI PE images. As this project advances this may require changes of this tool as well as significant refactoring. Overall, expect the versioninfo module and cli to be less stable than other parts of pytools. Usage info \u00b6 run versioninfo_tool -h usage: versioninfo_tool [-h] [-e | -d] input_file output_file Versioninfo Tool is a command-line tool to assist in generating VERSIONINFO resource files for use with a Resource Compiler. It takes a JSON representing versioning info and produces a resource file that once compiled will create a standard resource section. !!! Warning - BETA Feature This tool is still in early development and may change with little regard for backward compatibility. Version: 0.7.0 An example to encode json to rc file might look like: versioninfo_tool -e /path/to/version.JSON /path/to/output An example to decode a binary efi file and output the rsrc in json might look like: versioninfo_tool -d /path/to/app.efi /path/to/output.JSON positional arguments: input_file a filesystem path to a json/PE file to load output_file a filesystem path to the output file. if file does not exist, entire directory path will be created. if file does exist, contents will be overwritten optional arguments: -h, --help show this help message and exit -e, --encode (default) outputs VERSIONINFO.rc of given json file -d, --dump outputs json file of VERSIONINFO given PE file JSON file format \u00b6 The json input file used for the ecode operation can be in two flavors. First a minimal file. This must contain only these three fields. { \"FileVersion\" : \"1.0.0.0\" , \"CompanyName\" : \"Example Company\" , \"OriginalFilename\" : \"ExampleApp.efi\" } or if Minimal is set to \"False\" then the json must contain the values for a complete rc section. { \"Minimal\" : \"False\" , \"FileVersion\" : \"1.0.0.0\" , \"ProductVersion\" : \"1.0.0.0\" , \"FileFlagsMask\" : \"VS_FFI_FILEFLAGSMASK\" , \"FileFlags\" : \"0\" , \"FileOS\" : \"VOS_NT\" , \"FileType\" : \"VFT_DRV\" , \"FileSubtype\" : \"VFT2_DRV_SYSTEM\" , \"StringFileInfo\" : { \"CompanyName\" : \"Example Company\" , \"OriginalFilename\" : \"ExampleApp.efi\" , \"FileVersion\" : \"1.0.0.0\" , }, \"VarFileInfo\" : { \"Translation\" : \"0x0409 0x04b0\" } } More Info \u00b6 https://docs.microsoft.com/en-us/windows/win32/menurc/versioninfo-resource","title":"Version Info Tool"},{"location":"tools/using_versioninfo_tool/#version-info-tool","text":"A simple command line utility for working with resource sections and PECOFF binaries. Utility can dump the contents of a PECOFF RSRC section into readable json data Utility can encode a json file with name/value pairs into a input file for a RC compiler. BETA feature This tools is part of a proof of concept project to support embedding version information into UEFI PE images. As this project advances this may require changes of this tool as well as significant refactoring. Overall, expect the versioninfo module and cli to be less stable than other parts of pytools.","title":"Version Info Tool"},{"location":"tools/using_versioninfo_tool/#usage-info","text":"run versioninfo_tool -h usage: versioninfo_tool [-h] [-e | -d] input_file output_file Versioninfo Tool is a command-line tool to assist in generating VERSIONINFO resource files for use with a Resource Compiler. It takes a JSON representing versioning info and produces a resource file that once compiled will create a standard resource section. !!! Warning - BETA Feature This tool is still in early development and may change with little regard for backward compatibility. Version: 0.7.0 An example to encode json to rc file might look like: versioninfo_tool -e /path/to/version.JSON /path/to/output An example to decode a binary efi file and output the rsrc in json might look like: versioninfo_tool -d /path/to/app.efi /path/to/output.JSON positional arguments: input_file a filesystem path to a json/PE file to load output_file a filesystem path to the output file. if file does not exist, entire directory path will be created. if file does exist, contents will be overwritten optional arguments: -h, --help show this help message and exit -e, --encode (default) outputs VERSIONINFO.rc of given json file -d, --dump outputs json file of VERSIONINFO given PE file","title":"Usage info"},{"location":"tools/using_versioninfo_tool/#json-file-format","text":"The json input file used for the ecode operation can be in two flavors. First a minimal file. This must contain only these three fields. { \"FileVersion\" : \"1.0.0.0\" , \"CompanyName\" : \"Example Company\" , \"OriginalFilename\" : \"ExampleApp.efi\" } or if Minimal is set to \"False\" then the json must contain the values for a complete rc section. { \"Minimal\" : \"False\" , \"FileVersion\" : \"1.0.0.0\" , \"ProductVersion\" : \"1.0.0.0\" , \"FileFlagsMask\" : \"VS_FFI_FILEFLAGSMASK\" , \"FileFlags\" : \"0\" , \"FileOS\" : \"VOS_NT\" , \"FileType\" : \"VFT_DRV\" , \"FileSubtype\" : \"VFT2_DRV_SYSTEM\" , \"StringFileInfo\" : { \"CompanyName\" : \"Example Company\" , \"OriginalFilename\" : \"ExampleApp.efi\" , \"FileVersion\" : \"1.0.0.0\" , }, \"VarFileInfo\" : { \"Translation\" : \"0x0409 0x04b0\" } }","title":"JSON file format"},{"location":"tools/using_versioninfo_tool/#more-info","text":"https://docs.microsoft.com/en-us/windows/win32/menurc/versioninfo-resource","title":"More Info"},{"location":"using/build/","text":"Building a Platform using Stuart \u00b6 To take your firmware code tree from freshly cloned to fully built, you only need to execute three commands. If you've properly installed edk2-pytool-extensions, then these commands will be available to execute as seen below: stuart_setup -c path/to/SettingsFile.py stuart_update -c path/to/SettingsFile.py stuart_build -c path/to/SettingsFile.py Tip Review your platform's instructions as it is common to install any additional python requirements via the command pip install --upgrade -r pip-requirements.txt , where pip-requirements.txt contains the necessary python requirements. Stuart provides platforms the ability to customize it's build via command flags. Due to this Your platform's build instructions is the single source of truth. Tip Once you've run stuart_setup and stuart_update , building your platform again is as simple as executing stuart_build -c path/to/SettingsFile.py . As you can see, Each of these commands has a single required flag -c that points towards a platform's settings file. This is a python file that is typically located in the same directory as the platform's DSC file, however refer to your platform's build instructions for the exact name and location of this file. Curious about what each command does? Check out the below sections. stuart_setup \u00b6 Stuart_setup is responsible for downloading all git submodule dependencies as specified by your platform. stuart_setup -c path/to/SettingsFile.py stuart_update \u00b6 Stuart_update is responsible for downloading all other required external dependencies, including, but not limited to nuget, azure, etc. stuart_update -c path/to/SettingsFile.py stuart_build \u00b6 Stuart_build is responsible for building the platform and placing all artifacts in the /Build/ directory. Refer to your platform's build instructions for any additional build flags needed to build. stuart_build -c path/to/SettingsFile.py FAQ \u00b6 N/A","title":"Build Instructions"},{"location":"using/build/#building-a-platform-using-stuart","text":"To take your firmware code tree from freshly cloned to fully built, you only need to execute three commands. If you've properly installed edk2-pytool-extensions, then these commands will be available to execute as seen below: stuart_setup -c path/to/SettingsFile.py stuart_update -c path/to/SettingsFile.py stuart_build -c path/to/SettingsFile.py Tip Review your platform's instructions as it is common to install any additional python requirements via the command pip install --upgrade -r pip-requirements.txt , where pip-requirements.txt contains the necessary python requirements. Stuart provides platforms the ability to customize it's build via command flags. Due to this Your platform's build instructions is the single source of truth. Tip Once you've run stuart_setup and stuart_update , building your platform again is as simple as executing stuart_build -c path/to/SettingsFile.py . As you can see, Each of these commands has a single required flag -c that points towards a platform's settings file. This is a python file that is typically located in the same directory as the platform's DSC file, however refer to your platform's build instructions for the exact name and location of this file. Curious about what each command does? Check out the below sections.","title":"Building a Platform using Stuart"},{"location":"using/build/#stuart_setup","text":"Stuart_setup is responsible for downloading all git submodule dependencies as specified by your platform. stuart_setup -c path/to/SettingsFile.py","title":"stuart_setup"},{"location":"using/build/#stuart_update","text":"Stuart_update is responsible for downloading all other required external dependencies, including, but not limited to nuget, azure, etc. stuart_update -c path/to/SettingsFile.py","title":"stuart_update"},{"location":"using/build/#stuart_build","text":"Stuart_build is responsible for building the platform and placing all artifacts in the /Build/ directory. Refer to your platform's build instructions for any additional build flags needed to build. stuart_build -c path/to/SettingsFile.py","title":"stuart_build"},{"location":"using/build/#faq","text":"N/A","title":"FAQ"},{"location":"using/ci/","text":"Continuous Integration with Stuart \u00b6 The idea of Continuous Integration (CI) with Stuart is that you have code and you have a to-do list of tasks that verify this code meets the requirements defined by you or your team. Stuart provides an easy to use interface that automates this process. To take your firmware code tree from freshly cloned to fully tested, you only need to execute three commands. If you've properly installed edk2-pytool-extensions, then these commands will be available to execute as seen below: stuart_ci_setup -c path/to/CISettingsFile.py stuart_update -c path/to/CISettingsFile.py stuart_ci_build -c path/to/CISettingsFile.py Tip Review your platform's instructions as it is common to install any additional python requirements via the command pip install --upgrade -r pip-requirements.txt , where pip-requirements.txt contains the necessary python requirements. Stuart provides platforms the ability to customize it's CI via command flags. Due to this Your platform's build instructions is the single source of truth. As you can see, Each of these commands has a single required flag -c that points towards a CI settings file. There is no set place for this file, so refer to your platform's build instructions for the exact name and location of this file. Curious about what each command does? Check out the below sections. stuart_ci_setup \u00b6 Stuart_ci_setup is responsible for downloading all git submodule dependencies required to perform all CI tasks. stuart_ci_setup -c path/to/CISettingsFile.py stuart_update \u00b6 Stuart_update is responsible for downloading all other required external dependencies (including, but not limited to nuget, azure, etc) required to perform all CI tasks. stuart_update -c path/to/CISettingsFile.py stuart_ci_build \u00b6 Stuart_ci_build is responsible for executing all CI tasks and placing any artifacts in the /Build/ directory. stuart_ci_build -c path/to/CISettingsFile.py FAQ \u00b6 N/A","title":"Core CI Instructions"},{"location":"using/ci/#continuous-integration-with-stuart","text":"The idea of Continuous Integration (CI) with Stuart is that you have code and you have a to-do list of tasks that verify this code meets the requirements defined by you or your team. Stuart provides an easy to use interface that automates this process. To take your firmware code tree from freshly cloned to fully tested, you only need to execute three commands. If you've properly installed edk2-pytool-extensions, then these commands will be available to execute as seen below: stuart_ci_setup -c path/to/CISettingsFile.py stuart_update -c path/to/CISettingsFile.py stuart_ci_build -c path/to/CISettingsFile.py Tip Review your platform's instructions as it is common to install any additional python requirements via the command pip install --upgrade -r pip-requirements.txt , where pip-requirements.txt contains the necessary python requirements. Stuart provides platforms the ability to customize it's CI via command flags. Due to this Your platform's build instructions is the single source of truth. As you can see, Each of these commands has a single required flag -c that points towards a CI settings file. There is no set place for this file, so refer to your platform's build instructions for the exact name and location of this file. Curious about what each command does? Check out the below sections.","title":"Continuous Integration with Stuart"},{"location":"using/ci/#stuart_ci_setup","text":"Stuart_ci_setup is responsible for downloading all git submodule dependencies required to perform all CI tasks. stuart_ci_setup -c path/to/CISettingsFile.py","title":"stuart_ci_setup"},{"location":"using/ci/#stuart_update","text":"Stuart_update is responsible for downloading all other required external dependencies (including, but not limited to nuget, azure, etc) required to perform all CI tasks. stuart_update -c path/to/CISettingsFile.py","title":"stuart_update"},{"location":"using/ci/#stuart_ci_build","text":"Stuart_ci_build is responsible for executing all CI tasks and placing any artifacts in the /Build/ directory. stuart_ci_build -c path/to/CISettingsFile.py","title":"stuart_ci_build"},{"location":"using/ci/#faq","text":"N/A","title":"FAQ"},{"location":"using/install/","text":"Installing and Setting up Stuart \u00b6 Stuart is a powerful command line interface (CLI) and core feature of the python package edk2-pytool-extensions . It provides a simple and easy way to build and maintain an Edk2 based UEFI Firmware code tree. This section goes into how to install stuart, how to build a platform with stuart, and how to perform continuous integration (CI) on a project with stuart. Note It is suggested to use python virtual environments to avoid dependency pollution and conflicts. Read More Installing on Windows \u00b6 Ensure the latest version of Python3 is installed on your system. Install edk2-pytool-extensions: pip install --upgrade edk2-pytool-extensions Installing on Linux \u00b6 If using WSL, review Getting Started with WSL . Ensure the latest version of Python3 is installed on your system. sudo apt install python3, python3-pip, python3-venv Install Nuget and dependencies: sudo apt-get install mono-complete, nuget Install edk2-pytool-extensions: pip install --upgrade edk2-pytool-extensions Summary \u00b6 That's it, you are ready to go! Click Here to learn how to build a platform with Stuart. Click Here to learn how to perform platform CI with Stuart.","title":"Installation Instructions"},{"location":"using/install/#installing-and-setting-up-stuart","text":"Stuart is a powerful command line interface (CLI) and core feature of the python package edk2-pytool-extensions . It provides a simple and easy way to build and maintain an Edk2 based UEFI Firmware code tree. This section goes into how to install stuart, how to build a platform with stuart, and how to perform continuous integration (CI) on a project with stuart. Note It is suggested to use python virtual environments to avoid dependency pollution and conflicts. Read More","title":"Installing and Setting up Stuart"},{"location":"using/install/#installing-on-windows","text":"Ensure the latest version of Python3 is installed on your system. Install edk2-pytool-extensions: pip install --upgrade edk2-pytool-extensions","title":"Installing on Windows"},{"location":"using/install/#installing-on-linux","text":"If using WSL, review Getting Started with WSL . Ensure the latest version of Python3 is installed on your system. sudo apt install python3, python3-pip, python3-venv Install Nuget and dependencies: sudo apt-get install mono-complete, nuget Install edk2-pytool-extensions: pip install --upgrade edk2-pytool-extensions","title":"Installing on Linux"},{"location":"using/install/#summary","text":"That's it, you are ready to go! Click Here to learn how to build a platform with Stuart. Click Here to learn how to perform platform CI with Stuart.","title":"Summary"}]}